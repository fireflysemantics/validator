import { ValidationConstraintEnum } from "./ValidationConstraintEnum";
import { Types } from "./types";
import { IsError } from "./IsError";
/**
 * Checks if value >= target.
 * @param value The value being checked.
 * @param target The target value to perform the check against.
 * @return True if the value is greater or equal to the target, false otherwise.
 */
export function isGreaterThanOrEqualTo(value, target) {
    return typeof value === "number" && typeof target === "number" && value >= target;
}
export function isGreaterThanOrEqualToError(value, target, field, code) {
    const CONSTRAINT = "IsGreaterThanOrEqualTo";
    if (!isGreaterThanOrEqualTo(value, target)) {
        const message = `The value (${value}) of the field ${field} should be greater than or equal to ${target}.`;
        throw new IsError(message, value, field, ValidationConstraintEnum.IS_GREATER_THAN_OR_EQUAL_TO, Types.NUMBER, code);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSXNHcmVhdGVyVGhhbk9yRXF1YWxUby5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmaXJlZmx5c2VtYW50aWNzL2lzLyIsInNvdXJjZXMiOlsibGliL0lzR3JlYXRlclRoYW5PckVxdWFsVG8udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDdEUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNoQyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRXBDOzs7OztHQUtHO0FBQ0gsTUFBTSxVQUFVLHNCQUFzQixDQUFDLEtBQWEsRUFBRSxNQUFjO0lBQ2hFLE9BQU8sT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsSUFBSSxLQUFLLElBQUksTUFBTSxDQUFDO0FBQ3BGLENBQUM7QUFFRCxNQUFNLFVBQVUsMkJBQTJCLENBQUMsS0FBYSxFQUFFLE1BQWMsRUFBRSxLQUFhLEVBQUUsSUFBYTtJQUNyRyxNQUFNLFVBQVUsR0FBRyx3QkFBd0IsQ0FBQztJQUU1QyxJQUFJLENBQUMsc0JBQXNCLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxFQUFFO1FBQzFDLE1BQU0sT0FBTyxHQUFXLGNBQWMsS0FBSyxrQkFBa0IsS0FBSyx1Q0FBdUMsTUFBTSxHQUFHLENBQUM7UUFDbkgsTUFBTSxJQUFJLE9BQU8sQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSx3QkFBd0IsQ0FBQywyQkFBMkIsRUFBRSxLQUFLLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQ3BIO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZhbGlkYXRpb25Db25zdHJhaW50RW51bSB9IGZyb20gXCIuL1ZhbGlkYXRpb25Db25zdHJhaW50RW51bVwiO1xuaW1wb3J0IHsgVHlwZXMgfSBmcm9tIFwiLi90eXBlc1wiO1xuaW1wb3J0IHsgSXNFcnJvciB9IGZyb20gXCIuL0lzRXJyb3JcIjtcblxuLyoqXG4gKiBDaGVja3MgaWYgdmFsdWUgPj0gdGFyZ2V0LlxuICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSBiZWluZyBjaGVja2VkLlxuICogQHBhcmFtIHRhcmdldCBUaGUgdGFyZ2V0IHZhbHVlIHRvIHBlcmZvcm0gdGhlIGNoZWNrIGFnYWluc3QuXG4gKiBAcmV0dXJuIFRydWUgaWYgdGhlIHZhbHVlIGlzIGdyZWF0ZXIgb3IgZXF1YWwgdG8gdGhlIHRhcmdldCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNHcmVhdGVyVGhhbk9yRXF1YWxUbyh2YWx1ZTogbnVtYmVyLCB0YXJnZXQ6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIgJiYgdHlwZW9mIHRhcmdldCA9PT0gXCJudW1iZXJcIiAmJiB2YWx1ZSA+PSB0YXJnZXQ7XG4gIH1cbiAgXG4gIGV4cG9ydCBmdW5jdGlvbiBpc0dyZWF0ZXJUaGFuT3JFcXVhbFRvRXJyb3IodmFsdWU6IG51bWJlciwgdGFyZ2V0OiBudW1iZXIsIGZpZWxkOiBzdHJpbmcsIGNvZGU/OiBzdHJpbmcpOiB2b2lkIHtcbiAgICBjb25zdCBDT05TVFJBSU5UID0gXCJJc0dyZWF0ZXJUaGFuT3JFcXVhbFRvXCI7XG4gIFxuICAgIGlmICghaXNHcmVhdGVyVGhhbk9yRXF1YWxUbyh2YWx1ZSwgdGFyZ2V0KSkge1xuICAgICAgY29uc3QgbWVzc2FnZTogc3RyaW5nID0gYFRoZSB2YWx1ZSAoJHt2YWx1ZX0pIG9mIHRoZSBmaWVsZCAke2ZpZWxkfSBzaG91bGQgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvICR7dGFyZ2V0fS5gO1xuICAgICAgdGhyb3cgbmV3IElzRXJyb3IobWVzc2FnZSwgdmFsdWUsIGZpZWxkLCBWYWxpZGF0aW9uQ29uc3RyYWludEVudW0uSVNfR1JFQVRFUl9USEFOX09SX0VRVUFMX1RPLCBUeXBlcy5OVU1CRVIsIGNvZGUpO1xuICAgIH1cbiAgfVxuICBcbiAgIl19