import { isObject } from "./IsObject";
import { isArray } from "./IsArray";
/**
 * Checks if given value is in the target array of allowed values.
 *
 * The value being checked should not be an object (isObject(value) != true).  It must
 * be a primitive javascript type, like a string, number,
 * or boolean.
 *
 * If the target is not an array false is returned.
 *
 * Note that when the value is an array, JSON.stringify is used
 * to perform the check.  It has a few quirks that are discussed
 * here.  These could affect the output in certain edge cases:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify
 *
 * For example Infinity is considered null by JSON.stringify.
 *
 * @param value The value being checked.
 * @param target The target array to perform the check against.
 * @return True if the value is in the target array, false otherwise.
 */
export function isIn(value, target) {
    if (isObject(value)) {
        return false;
    }
    if (!isArray(value)) {
        return !isArray(target) || target.indexOf(value) > -1;
    }
    else {
        return (JSON.stringify(target)).indexOf(JSON.stringify(value)) != -1;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSXNJbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmaXJlZmx5c2VtYW50aWNzL2lzLyIsInNvdXJjZXMiOlsibGliL0lzSW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUN0QyxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBRXBDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBbUJHO0FBQ0gsTUFBTSxVQUFVLElBQUksQ0FBQyxLQUFVLEVBQUUsTUFBYTtJQUMxQyxJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUNuQixPQUFPLEtBQUssQ0FBQztLQUNkO0lBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUNuQixPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7S0FDdkQ7U0FDSTtRQUNILE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztLQUN0RTtBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc09iamVjdCB9IGZyb20gXCIuL0lzT2JqZWN0XCI7XG5pbXBvcnQgeyBpc0FycmF5IH0gZnJvbSBcIi4vSXNBcnJheVwiO1xuXG4vKipcbiAqIENoZWNrcyBpZiBnaXZlbiB2YWx1ZSBpcyBpbiB0aGUgdGFyZ2V0IGFycmF5IG9mIGFsbG93ZWQgdmFsdWVzLlxuICogXG4gKiBUaGUgdmFsdWUgYmVpbmcgY2hlY2tlZCBzaG91bGQgbm90IGJlIGFuIG9iamVjdCAoaXNPYmplY3QodmFsdWUpICE9IHRydWUpLiAgSXQgbXVzdFxuICogYmUgYSBwcmltaXRpdmUgamF2YXNjcmlwdCB0eXBlLCBsaWtlIGEgc3RyaW5nLCBudW1iZXIsXG4gKiBvciBib29sZWFuLlxuICogXG4gKiBJZiB0aGUgdGFyZ2V0IGlzIG5vdCBhbiBhcnJheSBmYWxzZSBpcyByZXR1cm5lZC5cbiAqIFxuICogTm90ZSB0aGF0IHdoZW4gdGhlIHZhbHVlIGlzIGFuIGFycmF5LCBKU09OLnN0cmluZ2lmeSBpcyB1c2VkXG4gKiB0byBwZXJmb3JtIHRoZSBjaGVjay4gIEl0IGhhcyBhIGZldyBxdWlya3MgdGhhdCBhcmUgZGlzY3Vzc2VkXG4gKiBoZXJlLiAgVGhlc2UgY291bGQgYWZmZWN0IHRoZSBvdXRwdXQgaW4gY2VydGFpbiBlZGdlIGNhc2VzOlxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvSlNPTi9zdHJpbmdpZnlcbiAqIFxuICogRm9yIGV4YW1wbGUgSW5maW5pdHkgaXMgY29uc2lkZXJlZCBudWxsIGJ5IEpTT04uc3RyaW5naWZ5LlxuICogXG4gKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIGJlaW5nIGNoZWNrZWQuXG4gKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgYXJyYXkgdG8gcGVyZm9ybSB0aGUgY2hlY2sgYWdhaW5zdC5cbiAqIEByZXR1cm4gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgaW4gdGhlIHRhcmdldCBhcnJheSwgZmFsc2Ugb3RoZXJ3aXNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNJbih2YWx1ZTogYW55LCB0YXJnZXQ6IGFueVtdKTogYm9vbGVhbiB7XG4gICAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAoIWlzQXJyYXkodmFsdWUpKSB7XG4gICAgICByZXR1cm4gIWlzQXJyYXkodGFyZ2V0KSB8fCB0YXJnZXQuaW5kZXhPZih2YWx1ZSkgPiAtMTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZXR1cm4gKEpTT04uc3RyaW5naWZ5KHRhcmdldCkpLmluZGV4T2YoSlNPTi5zdHJpbmdpZnkodmFsdWUpKSAhPSAtMTtcbiAgICB9XG4gIH1cbiAgIl19