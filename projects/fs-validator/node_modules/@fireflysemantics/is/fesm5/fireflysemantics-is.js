import { isAlpha as isAlpha$1, isAlphaNumeric as isAlphaNumeric$1, isAscii as isAscii$1, isBase64 as isBase64$1, isBoolean as isBoolean$1, isByteLength as isByteLength$1, isCreditCard as isCreditCard$1, isCurrency as isCurrency$1, isDivisibleBy as isDivisibleBy$1, isEmail as isEmail$1, isFQDN as isFQDN$1, isFullWidth as isFullWidth$1, isHalfWidth as isHalfWidth$1, isHexadecimal as isHexadecimal$1, isHexColor as isHexColor$1, isIP as isIP$1, isISBN as isISBN$1, isISIN as isISIN$1, isISO8601 as isISO8601$1, isJSON as isJSON$1, isLength, isLowercase as isLowercase$1, matches, isMobilePhone as isMobilePhone$1, isMobilePhoneLocales, isMongoId as isMongoId$1, isMultibyte as isMultibyte$1, contains, isNumeric, isSurrogatePair as isSurrogatePair$1, isUppercase as isUppercase$1, isURL as isURL$1, isUUID as isUUID$1, isVariableWidth as isVariableWidth$1 } from '@fireflysemantics/validatorts';
import { __extends } from 'tslib';

var ValidationConstraintEnum;
(function (ValidationConstraintEnum) {
    ValidationConstraintEnum["IS_POSITIVE"] = "IsPositive";
    ValidationConstraintEnum["IS_NUMBER"] = "IsNumber";
    ValidationConstraintEnum["IS_BOOLEAN"] = "IsBoolean";
    ValidationConstraintEnum["IS_NUMBER_IN_RANGE"] = "IsNumberInRange";
    ValidationConstraintEnum["IS_NOT_NEGATIVE"] = "IsNotNegative";
    ValidationConstraintEnum["IS_GREATER_THAN"] = "IsGreaterThan";
    ValidationConstraintEnum["IS_GREATER_THAN_OR_EQUAL_TO"] = "IsGreaterThanOrEqualTo";
})(ValidationConstraintEnum || (ValidationConstraintEnum = {}));

var Types;
(function (Types) {
    Types["NUMBER"] = "number";
    Types["BOOLEAN"] = "boolean";
})(Types || (Types = {}));

/**
 * Checks if the value is a date that's after the specified date.
 *
 * @param target The value being checked.
 * @param arg The target value to perform the check against.
 * @return True if the value date is after the target, false otherwise.
 */
function isAfterInstant(target, arg) {
    return target && target.getTime() > arg.getTime();
}

/**
 * Checks if the string contains only letters (a-zA-Z).
 * If given value is not a string, then it returns false.
 *
 * @param value The value being checked.
 * @return True if the value contains only letters (a-zA-Z), false otherwise.
 */
function isAlpha(value) {
    return typeof value === "string" && isAlpha$1(value);
}

/**
 * Checks if the string contains only letters and numbers.
 * If given value is not a string, then it returns false.
 *
 * @param value The value being checked.
 * @return True if the value contains only letters and numbers, false otherwise.
 */
function isAlphaNumeric(value) {
    return typeof value === "string" && isAlphaNumeric$1(value);
}

/**
 * Checks if a argument is an array
 * @param value The value being checked.
 * @return True if the value is an instance of an array, false otherwise.
 */
function isArray(value) {
    return value instanceof Array;
}

/**
 * Checks if value array contains all values from the given target array.
 * If value is null, undefined, or not an array instance
 * then this function returns false.
 *
 * The values check should be primitive javascript types (String, number, boolean, null, undefined, etc.).
 * and not Object instances.
 *
 * Note that the check is value based.  For example the values
 * in the array [2,3,4,2] are contained by [2,3,4] even though the latter
 * is shorter.
 *
 * @param value The value container array being checked.
 * @param target The array of target values
 * @returns True if array contains all values from the given target array, false otherwise.
 */
function isArrayContainerOf(value, target) {
    if (!(value instanceof Array))
        return false;
    return !value || target.every(function (v) { return value.indexOf(v) !== -1; });
}

/**
 * Checks if an array contains any items.
 * @param value The array being checked
 * @return True if the array is empty and false otherwise.
 */
function isArrayEmpty(value) {
    if (!isArray(value))
        return false;
    return value.length == 0 ? true : false;
}

/**
 * Checks if value array does not contain any of the given target values.
 * If null or undefined is given then this function returns false.
 *
 * @param value The value container array being checked.
 * @param target The array of target values
 * @returns True if value array does not contain any of the given target values, false otherwise.
 */
function isArrayNotContainerOf(value, target) {
    if (!(value instanceof Array))
        return false;
    return !isArrayContainerOf(value, target);
}

/**
 * Checks if given array is not empty.
 * If null or undefined is given then this function returns false.
 *
 * @param value The array being checked.
 * @returns True if given array is not empty, false otherwise.
 */
function isArrayNotEmpty(value) {
    return !isArrayEmpty(value);
}

/**
 * Checks if array's length is greater than the target number.
 * If null or undefined is given then this function returns false.
 *
 * @param value The value array being checked.
 * @param target The minimum size of the array
 * @returns True if array's length is greater than the target number, false otherwise.
 */
function isArraySizeGreaterThan(value, target) {
    return isArray(value) ? value.length > target : false;
}

/**
 * Checks if array's length is less than the target number.
 * If null or undefined is given then this function returns false.
 *
 * @param value The value array being checked.
 * @param target The maximum size of the array
 * @returns True if array's length is less than the target number, false otherwise.
 */
function isArraySizeLessThan(value, target) {
    return isArray(value) ? value.length < target : false;
}

/**
 * Checks if all array's values are unique. Comparison for objects is reference-based.
 * If null or undefined is given then this function returns false.
 *
 * @param value The array being checked.
 * @returns True if all array's values are unique, false otherwise.
 */
function isArrayUnique(array) {
    if (!(array instanceof Array))
        return false;
    var uniqueItems = array.filter(function (a, b, c) { return c.indexOf(a) === b; });
    return array.length === uniqueItems.length;
}

/**
 * Checks if the string contains ASCII chars only.
 * If given value is not a string, then it returns false.
 *
 * @param value The value being checked.
 * @param target The target value to perform the check against.
 * @return True if the value contains only letters and numbers, false otherwise.
 */
function isAscii(value) {
    return typeof value === "string" && isAscii$1(value);
}

/**
 * Checks if a string is base64 encoded.
 * If given value is not a string, then it returns false.
 *
 * @param value The value being checked.
 * @return True a the value string is base64 encoded, false otherwise.
 */
function isBase64(value) {
    return typeof value === "string" && isBase64$1(value);
}

/**
 * Checks if the value is a date that's before the target date.
 *
 * @param value The value being checked.
 * @param target The target value to perform the check against.
 * @return True if the value date comes before the target date, false otherwise.
 */
function isBeforeInstant(value, target) {
    return value && value.getTime() < target.getTime();
}

/**
 * @param message The error message
 * @param value The value that violates the constraint
 * @param field The name of the field that triggered the constraint violation
 * @param constraint The name of the constraint violated
 * @param type The expected type for the field
 * @param code The application or module code for the error
 */
var IsError = /** @class */ (function (_super) {
    __extends(IsError, _super);
    function IsError(message, value, field, constraint, type, code) {
        var _this = _super.call(this, message) || this;
        _this.message = message;
        _this.value = value;
        _this.field = field;
        _this.constraint = constraint;
        _this.type = type;
        _this.code = code;
        _this.name = 'IsError';
        Object.setPrototypeOf(_this, IsError.prototype);
        return _this;
    }
    return IsError;
}(Error));

/**
 * Checks if the argument is a real boolean.
 * @param value The value being checked.
 * @returns True if the argument is an instance of Boolean.
 */
function isBoolean(value) {
    return value instanceof Boolean || typeof value === "boolean";
}
/**
 * Throws an `IsError` if the value does not pass the `isBoolean` check.
 * @param value The value being checked.
 * @param field The name of the field being checked.
 * @param code The application / module code assigned to this error.
 * @throws IsError if the value is not a Boolean instance.
 * @returns false if an {@link IsError} is not thrown
 */
function isBooleanError(value, field, code) {
    if (!isBoolean(value)) {
        var message = "The " + value + " valued field " + field + " should be a boolean.";
        throw new IsError(message, value, field, ValidationConstraintEnum.IS_BOOLEAN, Types.BOOLEAN, code);
    }
    return false;
}

/**
 * Checks if a string is a boolean.
 * If given value is not a string, then it returns false.
 *
 * @param value The value being checked.
 * @param target The target value to perform the check against.
 * @return True if the type of the value is the same as string and `isBoolean` passes.
 */
function isBooleanString(value) {
    return typeof value === "string" && isBoolean$1(value);
}

/**
 * Checks if the string's length (in bytes) falls in a range.
 * If given value is not a string, then it returns false.
 *
 * @param value The value being checked.
 * @param min The min value to perform the check against.
 * @param max The max value to perform the check against.
 * @return True if the check passes, false otherwise.
 */
function isByteLength(value, min, max) {
    return typeof value === "string" && isByteLength$1(value, { min: min, max: max });
}

/**
 * Checks if the string is a credit card.
 * If given value is not a string, then it returns false.
 *
 * @param value The value being checked.
 * @return True if the string is a credit card, false otherwise.
 */
function isCreditCard(value) {
    return typeof value === "string" && isCreditCard$1(value);
}

/**
 * Checks if the string is a valid currency amount.
 * If given value is not a string, then it returns false.
 *
 * @param value The value being checked.
 * @param options The options configuration {@link IsCurrencyOptions}
 * @return True if the string is a valid currency amount, false otherwise.
 */
function isCurrency(value, options) {
    return typeof value === "string" && isCurrency$1(value, options);
}

/**
 * Checks if argument is date.
 * @param value The date being checked.
 * @return True if the date value is a real date, false otherwise.
 */
function isDate(value) {
    return value instanceof Date && !isNaN(value.getTime());
}

/**
 * @param value The value being checked.
 * @returns True if the value is strictly `undefined`.not null or undefined, false otherwise.
 *
 * See https://stackoverflow.com/questions/51003292/exporting-utility-functions-in-typescript/51004236#51004236
 * for an implementation reference.
 */
function isDefined(value) {
    return value != null; //This checks for undefined automatically.
}

/**
 * Default options for IsNumber
 */
var IS_NUMBER_OPTIONS_DEFAULTS = {
    allowNaN: false,
    allowInfinity: true
};
/**
 * Check if a given value is a number.
 *
 * Default `IsNumberOptions` allow
 * `-Infinity, Infinity` but disallow `NaN`.
 *
 * @param target The value being checked.
 * @param options The optional configuration {@link IsNumberOptions}.
 * @return True if the value is a number, false otherwise.
 */
function isNumber(target, options) {
    if (options === void 0) { options = IS_NUMBER_OPTIONS_DEFAULTS; }
    if (target === Infinity || target === -Infinity) {
        return !!options.allowInfinity;
    }
    if (Number.isNaN(target)) {
        return !!options.allowNaN;
    }
    return Number.isFinite(target);
}
/**
 * Utility method for throwing an error if the {@link isNumber} test fails.
 *
 * @param target The target value being checked
 * @param field The name of the field containing the number
 * @param code Optional nervous system code
 * @param options Optional {@link IsNumberOptions} instance.
 * @throws IsError if the target is not a number
 * @returns false if an {@link IsError} is not thrown
 */
function isNumberError(target, field, code, options) {
    var o = options ? options : IS_NUMBER_OPTIONS_DEFAULTS;
    if (!isNumber(target)) {
        var message = "The field " + field + " is not a number.  \n             The options used to perform the check were " + JSON.stringify(o) + ".";
        throw new IsError(message, target, field, ValidationConstraintEnum.IS_NUMBER, Types.NUMBER, code);
    }
    return false;
}

/**
 * Checks if the value is the value that is divisible by the target
 * without producing a remainder.
 *
 * @param target The value being checked.
 * @param arg The target value to perform the check against.
 * @return True if the value is divisible by the target, false otherwise.
 */
function isDivisibleBy(target, arg) {
    isNumberError(target, 'target');
    isNumberError(arg, 'arg');
    return (isDivisibleBy$1(String(target), String(arg)));
}

/**
 * Checks if the string is an email.
 * If given value is not a string, then it returns false.
 *
 * @param value The value being checked.
 * @param options The options configuration {@link IsEmailOptions}
 * @return True if the string is an email, false otherwise.
 */
function isEmail(value, options) {
    return typeof value === "string" && isEmail$1(value, options);
}

/**
 * Checks if given value is empty (=== '', === null, === undefined).
 * @param value The value being checked.
 * @return True if the value is empty, false otherwise.
 */
function isEmpty(value) {
    return value === "" || value === null || value === undefined;
}

/**
 * Checks if a given value is an enum
 * (The value is contained in a property on the target object).
 * @param value The value being checked.
 * @param target The enum instance
 * @return True if the value is an instance of the enum, false otherwise.
 */
function isEnum(value, target) {
    return Object.values(target).indexOf(value) >= 0;
}

/**
 * Checks if value using a ("===") the comparison.
 * @param value The value being checked.
 * @param target The target value to perform the check against.
 * @return True if the value equals the target, false otherwise.
 */
function isEqualTo(value, target) {
    return value === target;
}

/**
 * Checks if the string is a fully qualified domain name (e.g. domain.com).
 * If given value is not a string, then it returns false.
 *
 * @param value The value being checked.
 * @param options The options configuration {@link IsFQDNOptions}
 * @return True if the string is a fully qualified domain name, false otherwise.
 */
function isFQDN(value, options) {
    return typeof value === "string" && isFQDN$1(value, options);
}

/**
 * Checks if the string contains any full-width chars.
 * If given value is not a string, then it returns false.
 *
 * @param value The value being checked.
 * @returns  True if the string contains full-width characters, false otherwise.
 */
function isFullWidth(value) {
    return typeof value === "string" && isFullWidth$1(value);
}

/**
 * Checks if value > target.
 * @param value The value being checked.
 * @param target The target value to perform the check against.
 * @return True if the value is greater than the target, false otherwise.
 */
function isGreaterThan(value, target) {
    return typeof value === "number" && typeof target === "number" && value > target;
}
function isGreaterThanError(value, target, field, code) {
    if (!isGreaterThan(value, target)) {
        var message = "The value (" + value + ") of the field " + field + " should be greater " + target + ".";
        throw new IsError(message, value, field, ValidationConstraintEnum.IS_GREATER_THAN, Types.NUMBER, code);
    }
}

/**
 * Checks if value >= target.
 * @param value The value being checked.
 * @param target The target value to perform the check against.
 * @return True if the value is greater or equal to the target, false otherwise.
 */
function isGreaterThanOrEqualTo(value, target) {
    return typeof value === "number" && typeof target === "number" && value >= target;
}
function isGreaterThanOrEqualToError(value, target, field, code) {
    var CONSTRAINT = "IsGreaterThanOrEqualTo";
    if (!isGreaterThanOrEqualTo(value, target)) {
        var message = "The value (" + value + ") of the field " + field + " should be greater than or equal to " + target + ".";
        throw new IsError(message, value, field, ValidationConstraintEnum.IS_GREATER_THAN_OR_EQUAL_TO, Types.NUMBER, code);
    }
}

/**
 * Checks if the string contains any half-width chars.
 * If given value is not a string, then it returns false.
 *
 * @param value The value being checked.
 * @returns  True if the string contains any half-width chars, false otherwise.
 */
function isHalfWidth(value) {
    return typeof value === "string" && isHalfWidth$1(value);
}

/**
 * Checks if the string is a hexadecimal number.
 * If given value is not a string, then it returns false.
 *
 * @param value The value being checked.
 * @returns  True if the string is a hexadecimal number, false otherwise.
 */
function isHexadecimal(value) {
    return typeof value === "string" && isHexadecimal$1(value);
}

/**
 * Checks if the string is a hexadecimal color.
 * If given value is not a string, then it returns false.
 *
 * @param value The value being checked.
 * @returns  True if the string is a hexadecimal color, false otherwise.
 */
function isHexColor(value) {
    return typeof value === "string" && isHexColor$1(value);
}

/**
 * Checks if the instance is defined, is not an array, and
 * an object (typeof value === 'object').
 * @param value The value being checked.
 * @return True if the value is an instance of the enum, false otherwise.
 */
function isObject(value) {
    if (isArray(value)) {
        return false;
    }
    return isDefined(value) ? typeof value === 'object' : false;
}

/**
 * Checks if given value is in the target array of allowed values.
 *
 * The value being checked should not be an object (isObject(value) != true).  It must
 * be a primitive javascript type, like a string, number,
 * or boolean.
 *
 * If the target is not an array false is returned.
 *
 * Note that when the value is an array, JSON.stringify is used
 * to perform the check.  It has a few quirks that are discussed
 * here.  These could affect the output in certain edge cases:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify
 *
 * For example Infinity is considered null by JSON.stringify.
 *
 * @param value The value being checked.
 * @param target The target array to perform the check against.
 * @return True if the value is in the target array, false otherwise.
 */
function isIn(value, target) {
    if (isObject(value)) {
        return false;
    }
    if (!isArray(value)) {
        return !isArray(target) || target.indexOf(value) > -1;
    }
    else {
        return (JSON.stringify(target)).indexOf(JSON.stringify(value)) != -1;
    }
}

/**
 * Checks if the value is an instance of the specified object.
 *
 * @param value The value array being checked.
 * @param target The target type constructor
 * @returns True if the value is an instance of the specified object, false otherwise.
 */
function isInstanceOf(value, target) {
    return (target &&
        typeof target === "function" &&
        value instanceof target);
}

/**
 * Checks if value is an integer.
 * @param value The value being checked.
 * @return True if the value is an integer, false otherwise.
 */
function isInt(val) {
    return Number.isInteger(val);
}

/**
 * Checks if the string is an IP (version 4 or 6).
 * If given value is not a string, then it returns false.
 *
 * @param value The value being checked.
 * @returns  True if the string is an IP (version 4 or 6), false otherwise.
 */
function isIP(value, version) {
    return typeof value === "string" && isIP$1(value, version);
}

/**
 * Checks if the string is an ISBN (version 10 or 13).
 * If given value is not a string, then it returns false.
 *
 * @param value The value being checked.
 * @returns  True if the string is an ISBN, false otherwise.
 */
function isISBN(value, version) {
    return typeof value === "string" && isISBN$1(value, version);
}

/**
 * Checks if the string is an ISIN (stock/security identifier).
 * If given value is not a string, then it returns false.
 *
 * @param value The value being checked.
 * @returns  True if the string is an ISIN, false otherwise.
 */
function isISIN(value) {
    return typeof value === "string" && isISIN$1(value);
}

/**
 * Checks if the string is a valid ISO 8601 date.
 * If given value is not a string, then it returns false.
 *
 * @param value The value being checked.
 * @returns  True if the string a valid ISO 8601, false otherwise.
 */
function isISO8601(value) {
    return typeof value === "string" && isISO8601$1(value);
}

/**
 * Checks if argument is a real string.
 * @param value The value being checked.
 * @return True if the value is a string, false otherwise.
 *
 */
function isString(value) {
    return value instanceof String || typeof value === "string";
}

/**
 * Checks if argument is a ISO 8601 Date String.
 *
 * Such a string is 24 ((YYYY-MM-DDTHH:mm:ss.sssZ)
 * or
 * 27 (±YYYYYY-MM-DDTHH:mm:ss.sssZ)
 *
 * characters long.
 *
 * @param value The value being checked.
 * @return True if the value is an instance of an ISOString date.
 */
function isISODateString(value) {
    var regex = /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d(?:\.\d+)?(?:Z|\+[0-2]\d(?:\:[0-5]\d)?)?/g;
    return isString(value) && regex.test(value);
}

/**
 * Checks if the string is valid JSON (note: uses JSON.parse).
 * If given value is not a string, then it returns false.
 */
function isJSON(value) {
    return typeof value === "string" && isJSON$1(value);
}

/**
 * Checks if the string's length falls in a range. Note: this function takes into account surrogate pairs.
 * If given value is not a string, then it returns false.
 *
 * @param value The value being checked.
 * @param min The min value to perform the check against.
 * @param max The max value to perform the check against.
 * @return True if the check passes, false otherwise.
 */
function isLengthInRange(value, min, max) {
    return (typeof value === "string" && isLength(value, { min: min, max: max }));
}

/**
 * Checks if the string's length is not less than given target number.
 * Note: this function takes into account surrogate pairs.
 * If given value is not a string, then it returns false.
 *
 * @param value The value being checked.
 * @param target The minimum target length
 * @returns True if the string's length is not less than given target number, false otherwise.
 */
function isLengthGreaterThan(value, target) {
    return typeof value === "string" && isLengthInRange(value, target);
}

/**
 * Checks if the string's length is not more than target number.
 * Note: this function takes into account surrogate pairs.
 * If given value is not a string, then it returns false.
 *
 * @param value The value being checked.
 * @param target The maximum target length
 * @returns True if the string's length is not less than given target number, false otherwise.
 */
function isLengthLessThan(value, target) {
    return typeof value === "string" && isLengthInRange(value, 0, target);
}

/**
 * Checks if the first number is value < target.
 * @param value The value being checked.
 * @param target The target value to perform the check against.
 * @return True if the value is less than the target, false otherwise.
 */
function isLessThan(value, target) {
    return typeof value === "number" && typeof target === "number" && value < target;
}

/**
 * Checks if the string is lowercase.
 * If given value is not a string, then it returns false.
 *
 * @param value The value being checked.
 * @returns  True if the string is lowercase, false otherwise.
 */
function isLowercase(value) {
    return typeof value === "string" && isLowercase$1(value);
}

/**
 * Checks if string matches the pattern.
 * Either matches('foo', /foo/i) or matches('foo', 'foo', 'i').
 * If given value is not a string, then it returns false.
 *
 * @param value The value being checked.
 * @param pattern The match pattern
 * @param modifiers The modifiers
 * @returns True if string matches the pattern, false otherwise.
 */
function isMatch(value, pattern, modifiers) {
    return (typeof value === "string" &&
        matches(value, pattern, modifiers));
}

/**
 * Checks if the string represents a time without a given timezone in the format HH:MM (military)
 * If the given value does not match the pattern HH:MM, then it returns false.
 *
 * @param value The value being checked.
 * @returns True if the string represents a time without a given timezone in the format HH:MM (military), false otherwise.
 */
function isMilitaryTime(value) {
    return isMatch(value, /^([01]\d|2[0-3]):?([0-5]\d)$/);
}

/**
 * Checks if the string is a mobile phone number (locale is one of ['zh-CN', 'zh-TW', 'en-ZA', 'en-AU', 'en-HK',
 * 'pt-PT', 'fr-FR', 'el-GR', 'en-GB', 'en-US', 'en-ZM', 'ru-RU', 'nb-NO', 'nn-NO', 'vi-VN', 'en-NZ']).
 * If given value is not a string, then it returns false.
 *
 * @param value The value being checked.
 * @param options The optional configuration {@link MobilePhoneLocale}.
 * @return True if the string is a mobile phone number, false otherwise.
 */
function isMobilePhone(value, locale, options) {
    return (typeof value === "string" && isMobilePhone$1(value, locale, options));
}
var IsMobilePhoneLocales = isMobilePhoneLocales;

/**
 * Checks if the string is a valid hex-encoded representation of a MongoDB ObjectId.
 * If given value is not a string, then it returns false.
 *
 * @param value The value being checked.
 * @returns True if the string is a valid hex-encoded representation of a MongoDB ObjectId, false otherwise.
 */
function isMongoId(value) {
    return typeof value === "string" && isMongoId$1(value);
}

/**
 * Checks if the string contains one or more multibyte chars.
 * If given value is not a string, then it returns false.
 *
 * @param value The value being checked.
 * @returns True if the string contains one or more multibyte chars, false otherwise.
 */
function isMultibyte(value) {
    return typeof value === "string" && isMultibyte$1(value);
}

/**
 * Checks if the value is > 0.
 * @param value The value being checked.
 * @return True if the value is a number and is positive, false otherwise.
 */
function isPositive(value) {
    return typeof value === "number" && value > 0;
}
/**
 * Throws an `IsError` if the value is not positive.
 *
 * @param value The value being checked.
 * @param field The name of the field being checked.
 * @param code The application / module code assigned to this error.
 * @throws {@link IsError} if the value is not a number instance.
 */
function isPositiveError(value, field, code) {
    if (!isPositive(value)) {
        var message = "The field " + field + " should be positive.  It is set to " + value + ". ";
        throw new IsError(message, value, field, ValidationConstraintEnum.IS_POSITIVE, Types.NUMBER, code);
    }
}

/**
 * Checks if the value is a negative number.
 * @param value The value being checked.
 * @return True if the value is < 0, false otherwise.
 */
function isNegative(value) {
    return !isPositive(value);
}

/**
 * Checks if given value is not empty (!== '', !== null, !== undefined).
 * @param value The value being checked.
 * @return True if the value is not empty, false otherwise.
 */
function isNotEmpty(value) {
    return value !== "" && value !== null && value !== undefined;
}

/**
 * Checks if value does not match ("!==") the comparison.
 * @param value The value being checked.
 * @param target The target value to perform the check against.
 * @return True if the value does not equal the target, false otherwise.
 */
function isNotEqualTo(value, target) {
    return value !== target;
}

/**
 * Checks if given value is in the target array of allowed values.
 *
 * @param value The value being checked.
 * @param target The target value to perform the check against.
 * @return True if the value is not in the target array, false otherwise.
 */
function isNotIn(value, target) {
    return !isArray(target) || !isIn(value, target);
}

/**
 * Checks if the value is >= 0.
 * @param value The value being checked.
 * @return True if the value is a number not negative, false otherwise.
 */
function isNotNegative(value) {
    return typeof value === "number" && value >= 0;
}
/**
 * Throws an `IsError` if the value is negative.
 * @param value The value being checked.
 * @param field The name of the field being checked.
 * @param code The application / module code assigned to this error.
 * @throws IsError if the value is not a Boolean instance.
 */
function isNotNegativeError(value, field, code) {
    if (!isNotNegative(value)) {
        var message = "The field " + field + " should not be negative.  It is set to " + value + ". ";
        throw new IsError(message, value, field, ValidationConstraintEnum.IS_NOT_NEGATIVE, Types.NUMBER, code);
    }
}

/**
 * Checks if the value is not a substring of the target.
 * If given value is not a string, then it returns false.
 *
 * @param value The value being checked.
 * @param target The target value to perform the check against.
 * @return True if the value is a not a substring of the target, false otherwise.
 */
function isNotSubString(value, target) {
    return typeof value === "string" && !contains(target, value);
}

/**
 * Checks if the string value does not contain the target.
 * If given value is not a string, then it returns false.
 *
 * @param value The value being checked.
 * @param target The target value to perform the check against.
 * @return True if the value is a not super string of the target, false otherwise.
 */
function isNotSuperString(value, target) {
    return typeof value === "string" && !contains(value, target);
}

/**
 * Checks if the argument is in the range of the min max parameters.
 * @param value The value being checked.
 * @param min The min parameter
 * @param max The max parameter
 * @throws {@link IsError} if min is not a number
 * @throws {@link IsError} if max is not a number
 * @returns True if the argument is in range.
 */
function isNumberInRange(value, min, max) {
    isNumberError(min, 'min');
    isNumberError(max, 'max');
    return (value >= min && value <= max);
}
function isNumberInRangeError(value, min, max, field, code) {
    if (!isNumberInRange(value, min, max)) {
        var message = "The field " + field + " is not in range [" + min + ", " + max + "].  It is set to " + value + ". ";
        throw new IsError(message, value, field, ValidationConstraintEnum.IS_NUMBER_IN_RANGE, Types.NUMBER, code);
    }
}

/**
 * Checks if the string is numeric.
 * If given value is not a string, then it returns false.
 *
 * @param value The value being checked.
 * @return True if the value is numeric, false otherwise.
 */
function isNumberString(value, options) {
    if (options === void 0) { options = {}; }
    if (value === ('Infinity') || value === '-Infinity') {
        return !!options.allowInfinity;
    }
    if (value === ('NaN')) {
        return !!options.allowNaN;
    }
    return typeof value === "string" && isNumeric(value, options);
}

/**
 * Checks if the value is a date occurs at the exact same time
 * as the target date.
 *
 * @param value The value being checked.
 * @param target The target value to perform the check against.
 * @return True if the value date occurs at the exact same time as the target date, false otherwise.
 */
function isSameInstant(value, target) {
    return value && value.getTime() === target.getTime();
}

/**
 * Checks if the value is a substring of the seed.
 * If given value is not a string, then it returns false.
 *
 * @param value The value being checked.
 * @param target The target value to perform the check against.
 * @return True if the value is a substring of the target, false otherwise.
 */
function isSubString(value, target) {
    return typeof value === "string" && contains(target, value);
}

/**
 * Checks if the string value contains the target.
 * If given value is not a string, then it returns false.
 *
 * @param value The value being checked.
 * @param target The target value to perform the check against.
 * @return True if the value is a super string of the target, false otherwise.
 */
function isSuperString(value, target) {
    return typeof value === "string" && contains(value, target);
}

/**
 * Checks if the string contains any surrogate pairs chars.
 * If given value is not a string, then it returns false.
 *
 * @param value The value being checked.
 * @returns True if the string contains any surrogate pairs chars, false otherwise.
 */
function isSurrogatePair(value) {
    return typeof value === "string" && isSurrogatePair$1(value);
}

/**
 * @param value The value being checked.
 * @returns True if the value is null or undefined, false otherwise.
 */
function isUndefined(value) {
    return !isDefined(value);
}

/**
 * Checks if the string is uppercase.
 * If given value is not a string, then it returns false.
 *
 * @param value The value being checked.
 * @returns True if the string is uppercase, false otherwise.
 */
function isUppercase(value) {
    return typeof value === "string" && isUppercase$1(value);
}

/**
 * Checks if the string is an url.
 * If given value is not a string, then it returns false.
 *
 * @param value The value being checked.
 * @param options The optional configuration options {@link ValidatorJS.IsURLOptions}
 * @returns True if the string is an url, false otherwise.
 */
function isURL(value, options) {
    return typeof value === "string" && isURL$1(value, options);
}

/**
 * Checks if the string is a UUID (version 3, 4 or 5).
 * If given value is not a string, then it returns false.
 *
 * @param value The value being checked.
 * @param version The UUID version (3, 4 or 5)
 * @returns True if the string is a UUID, false otherwise.
 */
function isUUID(value, version) {
    return typeof value === "string" && isUUID$1(value, version);
}

/**
 * Checks if the string contains variable-width chars.
 * If given value is not a string, then it returns false.
 *
 * @param value The value being checked.
 * @returns  True if the string contains variable-width chars, false otherwise.
 */
function isVariableWidth(value) {
    return typeof value === "string" && isVariableWidth$1(value);
}

/*
 * Public API Surface of is
 */

/**
 * Generated bundle index. Do not edit.
 */

export { IS_NUMBER_OPTIONS_DEFAULTS, IsError, IsMobilePhoneLocales, Types, ValidationConstraintEnum, isAfterInstant, isAlpha, isAlphaNumeric, isArray, isArrayContainerOf, isArrayEmpty, isArrayNotContainerOf, isArrayNotEmpty, isArraySizeGreaterThan, isArraySizeLessThan, isArrayUnique, isAscii, isBase64, isBeforeInstant, isBoolean, isBooleanError, isBooleanString, isByteLength, isCreditCard, isCurrency, isDate, isDefined, isDivisibleBy, isEmail, isEmpty, isEnum, isEqualTo, isFQDN, isFullWidth, isGreaterThan, isGreaterThanError, isGreaterThanOrEqualTo, isGreaterThanOrEqualToError, isHalfWidth, isHexColor, isHexadecimal, isIP, isISBN, isISIN, isISO8601, isISODateString, isIn, isInstanceOf, isInt, isJSON, isLengthGreaterThan, isLengthInRange, isLengthLessThan, isLessThan, isLowercase, isMatch, isMilitaryTime, isMobilePhone, isMongoId, isMultibyte, isNegative, isNotEmpty, isNotEqualTo, isNotIn, isNotNegative, isNotNegativeError, isNotSubString, isNotSuperString, isNumber, isNumberError, isNumberInRange, isNumberInRangeError, isNumberString, isObject, isPositive, isPositiveError, isSameInstant, isString, isSubString, isSuperString, isSurrogatePair, isURL, isUUID, isUndefined, isUppercase, isVariableWidth };
//# sourceMappingURL=fireflysemantics-is.js.map
