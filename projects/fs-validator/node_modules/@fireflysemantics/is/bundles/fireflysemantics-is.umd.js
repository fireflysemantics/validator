(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@fireflysemantics/validatorts')) :
    typeof define === 'function' && define.amd ? define('@fireflysemantics/is', ['exports', '@fireflysemantics/validatorts'], factory) :
    (global = global || self, factory((global.fireflysemantics = global.fireflysemantics || {}, global.fireflysemantics.is = {}), global.validatorts));
}(this, (function (exports, validatorts) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }

    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    (function (ValidationConstraintEnum) {
        ValidationConstraintEnum["IS_POSITIVE"] = "IsPositive";
        ValidationConstraintEnum["IS_NUMBER"] = "IsNumber";
        ValidationConstraintEnum["IS_BOOLEAN"] = "IsBoolean";
        ValidationConstraintEnum["IS_NUMBER_IN_RANGE"] = "IsNumberInRange";
        ValidationConstraintEnum["IS_NOT_NEGATIVE"] = "IsNotNegative";
        ValidationConstraintEnum["IS_GREATER_THAN"] = "IsGreaterThan";
        ValidationConstraintEnum["IS_GREATER_THAN_OR_EQUAL_TO"] = "IsGreaterThanOrEqualTo";
    })(exports.ValidationConstraintEnum || (exports.ValidationConstraintEnum = {}));


    (function (Types) {
        Types["NUMBER"] = "number";
        Types["BOOLEAN"] = "boolean";
    })(exports.Types || (exports.Types = {}));

    /**
     * Checks if the value is a date that's after the specified date.
     *
     * @param target The value being checked.
     * @param arg The target value to perform the check against.
     * @return True if the value date is after the target, false otherwise.
     */
    function isAfterInstant(target, arg) {
        return target && target.getTime() > arg.getTime();
    }

    /**
     * Checks if the string contains only letters (a-zA-Z).
     * If given value is not a string, then it returns false.
     *
     * @param value The value being checked.
     * @return True if the value contains only letters (a-zA-Z), false otherwise.
     */
    function isAlpha(value) {
        return typeof value === "string" && validatorts.isAlpha(value);
    }

    /**
     * Checks if the string contains only letters and numbers.
     * If given value is not a string, then it returns false.
     *
     * @param value The value being checked.
     * @return True if the value contains only letters and numbers, false otherwise.
     */
    function isAlphaNumeric(value) {
        return typeof value === "string" && validatorts.isAlphaNumeric(value);
    }

    /**
     * Checks if a argument is an array
     * @param value The value being checked.
     * @return True if the value is an instance of an array, false otherwise.
     */
    function isArray(value) {
        return value instanceof Array;
    }

    /**
     * Checks if value array contains all values from the given target array.
     * If value is null, undefined, or not an array instance
     * then this function returns false.
     *
     * The values check should be primitive javascript types (String, number, boolean, null, undefined, etc.).
     * and not Object instances.
     *
     * Note that the check is value based.  For example the values
     * in the array [2,3,4,2] are contained by [2,3,4] even though the latter
     * is shorter.
     *
     * @param value The value container array being checked.
     * @param target The array of target values
     * @returns True if array contains all values from the given target array, false otherwise.
     */
    function isArrayContainerOf(value, target) {
        if (!(value instanceof Array))
            return false;
        return !value || target.every(function (v) { return value.indexOf(v) !== -1; });
    }

    /**
     * Checks if an array contains any items.
     * @param value The array being checked
     * @return True if the array is empty and false otherwise.
     */
    function isArrayEmpty(value) {
        if (!isArray(value))
            return false;
        return value.length == 0 ? true : false;
    }

    /**
     * Checks if value array does not contain any of the given target values.
     * If null or undefined is given then this function returns false.
     *
     * @param value The value container array being checked.
     * @param target The array of target values
     * @returns True if value array does not contain any of the given target values, false otherwise.
     */
    function isArrayNotContainerOf(value, target) {
        if (!(value instanceof Array))
            return false;
        return !isArrayContainerOf(value, target);
    }

    /**
     * Checks if given array is not empty.
     * If null or undefined is given then this function returns false.
     *
     * @param value The array being checked.
     * @returns True if given array is not empty, false otherwise.
     */
    function isArrayNotEmpty(value) {
        return !isArrayEmpty(value);
    }

    /**
     * Checks if array's length is greater than the target number.
     * If null or undefined is given then this function returns false.
     *
     * @param value The value array being checked.
     * @param target The minimum size of the array
     * @returns True if array's length is greater than the target number, false otherwise.
     */
    function isArraySizeGreaterThan(value, target) {
        return isArray(value) ? value.length > target : false;
    }

    /**
     * Checks if array's length is less than the target number.
     * If null or undefined is given then this function returns false.
     *
     * @param value The value array being checked.
     * @param target The maximum size of the array
     * @returns True if array's length is less than the target number, false otherwise.
     */
    function isArraySizeLessThan(value, target) {
        return isArray(value) ? value.length < target : false;
    }

    /**
     * Checks if all array's values are unique. Comparison for objects is reference-based.
     * If null or undefined is given then this function returns false.
     *
     * @param value The array being checked.
     * @returns True if all array's values are unique, false otherwise.
     */
    function isArrayUnique(array) {
        if (!(array instanceof Array))
            return false;
        var uniqueItems = array.filter(function (a, b, c) { return c.indexOf(a) === b; });
        return array.length === uniqueItems.length;
    }

    /**
     * Checks if the string contains ASCII chars only.
     * If given value is not a string, then it returns false.
     *
     * @param value The value being checked.
     * @param target The target value to perform the check against.
     * @return True if the value contains only letters and numbers, false otherwise.
     */
    function isAscii(value) {
        return typeof value === "string" && validatorts.isAscii(value);
    }

    /**
     * Checks if a string is base64 encoded.
     * If given value is not a string, then it returns false.
     *
     * @param value The value being checked.
     * @return True a the value string is base64 encoded, false otherwise.
     */
    function isBase64(value) {
        return typeof value === "string" && validatorts.isBase64(value);
    }

    /**
     * Checks if the value is a date that's before the target date.
     *
     * @param value The value being checked.
     * @param target The target value to perform the check against.
     * @return True if the value date comes before the target date, false otherwise.
     */
    function isBeforeInstant(value, target) {
        return value && value.getTime() < target.getTime();
    }

    /**
     * @param message The error message
     * @param value The value that violates the constraint
     * @param field The name of the field that triggered the constraint violation
     * @param constraint The name of the constraint violated
     * @param type The expected type for the field
     * @param code The application or module code for the error
     */
    var IsError = /** @class */ (function (_super) {
        __extends(IsError, _super);
        function IsError(message, value, field, constraint, type, code) {
            var _this = _super.call(this, message) || this;
            _this.message = message;
            _this.value = value;
            _this.field = field;
            _this.constraint = constraint;
            _this.type = type;
            _this.code = code;
            _this.name = 'IsError';
            Object.setPrototypeOf(_this, IsError.prototype);
            return _this;
        }
        return IsError;
    }(Error));

    /**
     * Checks if the argument is a real boolean.
     * @param value The value being checked.
     * @returns True if the argument is an instance of Boolean.
     */
    function isBoolean(value) {
        return value instanceof Boolean || typeof value === "boolean";
    }
    /**
     * Throws an `IsError` if the value does not pass the `isBoolean` check.
     * @param value The value being checked.
     * @param field The name of the field being checked.
     * @param code The application / module code assigned to this error.
     * @throws IsError if the value is not a Boolean instance.
     * @returns false if an {@link IsError} is not thrown
     */
    function isBooleanError(value, field, code) {
        if (!isBoolean(value)) {
            var message = "The " + value + " valued field " + field + " should be a boolean.";
            throw new IsError(message, value, field, exports.ValidationConstraintEnum.IS_BOOLEAN, exports.Types.BOOLEAN, code);
        }
        return false;
    }

    /**
     * Checks if a string is a boolean.
     * If given value is not a string, then it returns false.
     *
     * @param value The value being checked.
     * @param target The target value to perform the check against.
     * @return True if the type of the value is the same as string and `isBoolean` passes.
     */
    function isBooleanString(value) {
        return typeof value === "string" && validatorts.isBoolean(value);
    }

    /**
     * Checks if the string's length (in bytes) falls in a range.
     * If given value is not a string, then it returns false.
     *
     * @param value The value being checked.
     * @param min The min value to perform the check against.
     * @param max The max value to perform the check against.
     * @return True if the check passes, false otherwise.
     */
    function isByteLength(value, min, max) {
        return typeof value === "string" && validatorts.isByteLength(value, { min: min, max: max });
    }

    /**
     * Checks if the string is a credit card.
     * If given value is not a string, then it returns false.
     *
     * @param value The value being checked.
     * @return True if the string is a credit card, false otherwise.
     */
    function isCreditCard(value) {
        return typeof value === "string" && validatorts.isCreditCard(value);
    }

    /**
     * Checks if the string is a valid currency amount.
     * If given value is not a string, then it returns false.
     *
     * @param value The value being checked.
     * @param options The options configuration {@link IsCurrencyOptions}
     * @return True if the string is a valid currency amount, false otherwise.
     */
    function isCurrency(value, options) {
        return typeof value === "string" && validatorts.isCurrency(value, options);
    }

    /**
     * Checks if argument is date.
     * @param value The date being checked.
     * @return True if the date value is a real date, false otherwise.
     */
    function isDate(value) {
        return value instanceof Date && !isNaN(value.getTime());
    }

    /**
     * @param value The value being checked.
     * @returns True if the value is strictly `undefined`.not null or undefined, false otherwise.
     *
     * See https://stackoverflow.com/questions/51003292/exporting-utility-functions-in-typescript/51004236#51004236
     * for an implementation reference.
     */
    function isDefined(value) {
        return value != null; //This checks for undefined automatically.
    }

    /**
     * Default options for IsNumber
     */
    var IS_NUMBER_OPTIONS_DEFAULTS = {
        allowNaN: false,
        allowInfinity: true
    };
    /**
     * Check if a given value is a number.
     *
     * Default `IsNumberOptions` allow
     * `-Infinity, Infinity` but disallow `NaN`.
     *
     * @param target The value being checked.
     * @param options The optional configuration {@link IsNumberOptions}.
     * @return True if the value is a number, false otherwise.
     */
    function isNumber(target, options) {
        if (options === void 0) { options = IS_NUMBER_OPTIONS_DEFAULTS; }
        if (target === Infinity || target === -Infinity) {
            return !!options.allowInfinity;
        }
        if (Number.isNaN(target)) {
            return !!options.allowNaN;
        }
        return Number.isFinite(target);
    }
    /**
     * Utility method for throwing an error if the {@link isNumber} test fails.
     *
     * @param target The target value being checked
     * @param field The name of the field containing the number
     * @param code Optional nervous system code
     * @param options Optional {@link IsNumberOptions} instance.
     * @throws IsError if the target is not a number
     * @returns false if an {@link IsError} is not thrown
     */
    function isNumberError(target, field, code, options) {
        var o = options ? options : IS_NUMBER_OPTIONS_DEFAULTS;
        if (!isNumber(target)) {
            var message = "The field " + field + " is not a number.  \n             The options used to perform the check were " + JSON.stringify(o) + ".";
            throw new IsError(message, target, field, exports.ValidationConstraintEnum.IS_NUMBER, exports.Types.NUMBER, code);
        }
        return false;
    }

    /**
     * Checks if the value is the value that is divisible by the target
     * without producing a remainder.
     *
     * @param target The value being checked.
     * @param arg The target value to perform the check against.
     * @return True if the value is divisible by the target, false otherwise.
     */
    function isDivisibleBy(target, arg) {
        isNumberError(target, 'target');
        isNumberError(arg, 'arg');
        return (validatorts.isDivisibleBy(String(target), String(arg)));
    }

    /**
     * Checks if the string is an email.
     * If given value is not a string, then it returns false.
     *
     * @param value The value being checked.
     * @param options The options configuration {@link IsEmailOptions}
     * @return True if the string is an email, false otherwise.
     */
    function isEmail(value, options) {
        return typeof value === "string" && validatorts.isEmail(value, options);
    }

    /**
     * Checks if given value is empty (=== '', === null, === undefined).
     * @param value The value being checked.
     * @return True if the value is empty, false otherwise.
     */
    function isEmpty(value) {
        return value === "" || value === null || value === undefined;
    }

    /**
     * Checks if a given value is an enum
     * (The value is contained in a property on the target object).
     * @param value The value being checked.
     * @param target The enum instance
     * @return True if the value is an instance of the enum, false otherwise.
     */
    function isEnum(value, target) {
        return Object.values(target).indexOf(value) >= 0;
    }

    /**
     * Checks if value using a ("===") the comparison.
     * @param value The value being checked.
     * @param target The target value to perform the check against.
     * @return True if the value equals the target, false otherwise.
     */
    function isEqualTo(value, target) {
        return value === target;
    }

    /**
     * Checks if the string is a fully qualified domain name (e.g. domain.com).
     * If given value is not a string, then it returns false.
     *
     * @param value The value being checked.
     * @param options The options configuration {@link IsFQDNOptions}
     * @return True if the string is a fully qualified domain name, false otherwise.
     */
    function isFQDN(value, options) {
        return typeof value === "string" && validatorts.isFQDN(value, options);
    }

    /**
     * Checks if the string contains any full-width chars.
     * If given value is not a string, then it returns false.
     *
     * @param value The value being checked.
     * @returns  True if the string contains full-width characters, false otherwise.
     */
    function isFullWidth(value) {
        return typeof value === "string" && validatorts.isFullWidth(value);
    }

    /**
     * Checks if value > target.
     * @param value The value being checked.
     * @param target The target value to perform the check against.
     * @return True if the value is greater than the target, false otherwise.
     */
    function isGreaterThan(value, target) {
        return typeof value === "number" && typeof target === "number" && value > target;
    }
    function isGreaterThanError(value, target, field, code) {
        if (!isGreaterThan(value, target)) {
            var message = "The value (" + value + ") of the field " + field + " should be greater " + target + ".";
            throw new IsError(message, value, field, exports.ValidationConstraintEnum.IS_GREATER_THAN, exports.Types.NUMBER, code);
        }
    }

    /**
     * Checks if value >= target.
     * @param value The value being checked.
     * @param target The target value to perform the check against.
     * @return True if the value is greater or equal to the target, false otherwise.
     */
    function isGreaterThanOrEqualTo(value, target) {
        return typeof value === "number" && typeof target === "number" && value >= target;
    }
    function isGreaterThanOrEqualToError(value, target, field, code) {
        var CONSTRAINT = "IsGreaterThanOrEqualTo";
        if (!isGreaterThanOrEqualTo(value, target)) {
            var message = "The value (" + value + ") of the field " + field + " should be greater than or equal to " + target + ".";
            throw new IsError(message, value, field, exports.ValidationConstraintEnum.IS_GREATER_THAN_OR_EQUAL_TO, exports.Types.NUMBER, code);
        }
    }

    /**
     * Checks if the string contains any half-width chars.
     * If given value is not a string, then it returns false.
     *
     * @param value The value being checked.
     * @returns  True if the string contains any half-width chars, false otherwise.
     */
    function isHalfWidth(value) {
        return typeof value === "string" && validatorts.isHalfWidth(value);
    }

    /**
     * Checks if the string is a hexadecimal number.
     * If given value is not a string, then it returns false.
     *
     * @param value The value being checked.
     * @returns  True if the string is a hexadecimal number, false otherwise.
     */
    function isHexadecimal(value) {
        return typeof value === "string" && validatorts.isHexadecimal(value);
    }

    /**
     * Checks if the string is a hexadecimal color.
     * If given value is not a string, then it returns false.
     *
     * @param value The value being checked.
     * @returns  True if the string is a hexadecimal color, false otherwise.
     */
    function isHexColor(value) {
        return typeof value === "string" && validatorts.isHexColor(value);
    }

    /**
     * Checks if the instance is defined, is not an array, and
     * an object (typeof value === 'object').
     * @param value The value being checked.
     * @return True if the value is an instance of the enum, false otherwise.
     */
    function isObject(value) {
        if (isArray(value)) {
            return false;
        }
        return isDefined(value) ? typeof value === 'object' : false;
    }

    /**
     * Checks if given value is in the target array of allowed values.
     *
     * The value being checked should not be an object (isObject(value) != true).  It must
     * be a primitive javascript type, like a string, number,
     * or boolean.
     *
     * If the target is not an array false is returned.
     *
     * Note that when the value is an array, JSON.stringify is used
     * to perform the check.  It has a few quirks that are discussed
     * here.  These could affect the output in certain edge cases:
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify
     *
     * For example Infinity is considered null by JSON.stringify.
     *
     * @param value The value being checked.
     * @param target The target array to perform the check against.
     * @return True if the value is in the target array, false otherwise.
     */
    function isIn(value, target) {
        if (isObject(value)) {
            return false;
        }
        if (!isArray(value)) {
            return !isArray(target) || target.indexOf(value) > -1;
        }
        else {
            return (JSON.stringify(target)).indexOf(JSON.stringify(value)) != -1;
        }
    }

    /**
     * Checks if the value is an instance of the specified object.
     *
     * @param value The value array being checked.
     * @param target The target type constructor
     * @returns True if the value is an instance of the specified object, false otherwise.
     */
    function isInstanceOf(value, target) {
        return (target &&
            typeof target === "function" &&
            value instanceof target);
    }

    /**
     * Checks if value is an integer.
     * @param value The value being checked.
     * @return True if the value is an integer, false otherwise.
     */
    function isInt(val) {
        return Number.isInteger(val);
    }

    /**
     * Checks if the string is an IP (version 4 or 6).
     * If given value is not a string, then it returns false.
     *
     * @param value The value being checked.
     * @returns  True if the string is an IP (version 4 or 6), false otherwise.
     */
    function isIP(value, version) {
        return typeof value === "string" && validatorts.isIP(value, version);
    }

    /**
     * Checks if the string is an ISBN (version 10 or 13).
     * If given value is not a string, then it returns false.
     *
     * @param value The value being checked.
     * @returns  True if the string is an ISBN, false otherwise.
     */
    function isISBN(value, version) {
        return typeof value === "string" && validatorts.isISBN(value, version);
    }

    /**
     * Checks if the string is an ISIN (stock/security identifier).
     * If given value is not a string, then it returns false.
     *
     * @param value The value being checked.
     * @returns  True if the string is an ISIN, false otherwise.
     */
    function isISIN(value) {
        return typeof value === "string" && validatorts.isISIN(value);
    }

    /**
     * Checks if the string is a valid ISO 8601 date.
     * If given value is not a string, then it returns false.
     *
     * @param value The value being checked.
     * @returns  True if the string a valid ISO 8601, false otherwise.
     */
    function isISO8601(value) {
        return typeof value === "string" && validatorts.isISO8601(value);
    }

    /**
     * Checks if argument is a real string.
     * @param value The value being checked.
     * @return True if the value is a string, false otherwise.
     *
     */
    function isString(value) {
        return value instanceof String || typeof value === "string";
    }

    /**
     * Checks if argument is a ISO 8601 Date String.
     *
     * Such a string is 24 ((YYYY-MM-DDTHH:mm:ss.sssZ)
     * or
     * 27 (±YYYYYY-MM-DDTHH:mm:ss.sssZ)
     *
     * characters long.
     *
     * @param value The value being checked.
     * @return True if the value is an instance of an ISOString date.
     */
    function isISODateString(value) {
        var regex = /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d(?:\.\d+)?(?:Z|\+[0-2]\d(?:\:[0-5]\d)?)?/g;
        return isString(value) && regex.test(value);
    }

    /**
     * Checks if the string is valid JSON (note: uses JSON.parse).
     * If given value is not a string, then it returns false.
     */
    function isJSON(value) {
        return typeof value === "string" && validatorts.isJSON(value);
    }

    /**
     * Checks if the string's length falls in a range. Note: this function takes into account surrogate pairs.
     * If given value is not a string, then it returns false.
     *
     * @param value The value being checked.
     * @param min The min value to perform the check against.
     * @param max The max value to perform the check against.
     * @return True if the check passes, false otherwise.
     */
    function isLengthInRange(value, min, max) {
        return (typeof value === "string" && validatorts.isLength(value, { min: min, max: max }));
    }

    /**
     * Checks if the string's length is not less than given target number.
     * Note: this function takes into account surrogate pairs.
     * If given value is not a string, then it returns false.
     *
     * @param value The value being checked.
     * @param target The minimum target length
     * @returns True if the string's length is not less than given target number, false otherwise.
     */
    function isLengthGreaterThan(value, target) {
        return typeof value === "string" && isLengthInRange(value, target);
    }

    /**
     * Checks if the string's length is not more than target number.
     * Note: this function takes into account surrogate pairs.
     * If given value is not a string, then it returns false.
     *
     * @param value The value being checked.
     * @param target The maximum target length
     * @returns True if the string's length is not less than given target number, false otherwise.
     */
    function isLengthLessThan(value, target) {
        return typeof value === "string" && isLengthInRange(value, 0, target);
    }

    /**
     * Checks if the first number is value < target.
     * @param value The value being checked.
     * @param target The target value to perform the check against.
     * @return True if the value is less than the target, false otherwise.
     */
    function isLessThan(value, target) {
        return typeof value === "number" && typeof target === "number" && value < target;
    }

    /**
     * Checks if the string is lowercase.
     * If given value is not a string, then it returns false.
     *
     * @param value The value being checked.
     * @returns  True if the string is lowercase, false otherwise.
     */
    function isLowercase(value) {
        return typeof value === "string" && validatorts.isLowercase(value);
    }

    /**
     * Checks if string matches the pattern.
     * Either matches('foo', /foo/i) or matches('foo', 'foo', 'i').
     * If given value is not a string, then it returns false.
     *
     * @param value The value being checked.
     * @param pattern The match pattern
     * @param modifiers The modifiers
     * @returns True if string matches the pattern, false otherwise.
     */
    function isMatch(value, pattern, modifiers) {
        return (typeof value === "string" &&
            validatorts.matches(value, pattern, modifiers));
    }

    /**
     * Checks if the string represents a time without a given timezone in the format HH:MM (military)
     * If the given value does not match the pattern HH:MM, then it returns false.
     *
     * @param value The value being checked.
     * @returns True if the string represents a time without a given timezone in the format HH:MM (military), false otherwise.
     */
    function isMilitaryTime(value) {
        return isMatch(value, /^([01]\d|2[0-3]):?([0-5]\d)$/);
    }

    /**
     * Checks if the string is a mobile phone number (locale is one of ['zh-CN', 'zh-TW', 'en-ZA', 'en-AU', 'en-HK',
     * 'pt-PT', 'fr-FR', 'el-GR', 'en-GB', 'en-US', 'en-ZM', 'ru-RU', 'nb-NO', 'nn-NO', 'vi-VN', 'en-NZ']).
     * If given value is not a string, then it returns false.
     *
     * @param value The value being checked.
     * @param options The optional configuration {@link MobilePhoneLocale}.
     * @return True if the string is a mobile phone number, false otherwise.
     */
    function isMobilePhone(value, locale, options) {
        return (typeof value === "string" && validatorts.isMobilePhone(value, locale, options));
    }
    var IsMobilePhoneLocales = validatorts.isMobilePhoneLocales;

    /**
     * Checks if the string is a valid hex-encoded representation of a MongoDB ObjectId.
     * If given value is not a string, then it returns false.
     *
     * @param value The value being checked.
     * @returns True if the string is a valid hex-encoded representation of a MongoDB ObjectId, false otherwise.
     */
    function isMongoId(value) {
        return typeof value === "string" && validatorts.isMongoId(value);
    }

    /**
     * Checks if the string contains one or more multibyte chars.
     * If given value is not a string, then it returns false.
     *
     * @param value The value being checked.
     * @returns True if the string contains one or more multibyte chars, false otherwise.
     */
    function isMultibyte(value) {
        return typeof value === "string" && validatorts.isMultibyte(value);
    }

    /**
     * Checks if the value is > 0.
     * @param value The value being checked.
     * @return True if the value is a number and is positive, false otherwise.
     */
    function isPositive(value) {
        return typeof value === "number" && value > 0;
    }
    /**
     * Throws an `IsError` if the value is not positive.
     *
     * @param value The value being checked.
     * @param field The name of the field being checked.
     * @param code The application / module code assigned to this error.
     * @throws {@link IsError} if the value is not a number instance.
     */
    function isPositiveError(value, field, code) {
        if (!isPositive(value)) {
            var message = "The field " + field + " should be positive.  It is set to " + value + ". ";
            throw new IsError(message, value, field, exports.ValidationConstraintEnum.IS_POSITIVE, exports.Types.NUMBER, code);
        }
    }

    /**
     * Checks if the value is a negative number.
     * @param value The value being checked.
     * @return True if the value is < 0, false otherwise.
     */
    function isNegative(value) {
        return !isPositive(value);
    }

    /**
     * Checks if given value is not empty (!== '', !== null, !== undefined).
     * @param value The value being checked.
     * @return True if the value is not empty, false otherwise.
     */
    function isNotEmpty(value) {
        return value !== "" && value !== null && value !== undefined;
    }

    /**
     * Checks if value does not match ("!==") the comparison.
     * @param value The value being checked.
     * @param target The target value to perform the check against.
     * @return True if the value does not equal the target, false otherwise.
     */
    function isNotEqualTo(value, target) {
        return value !== target;
    }

    /**
     * Checks if given value is in the target array of allowed values.
     *
     * @param value The value being checked.
     * @param target The target value to perform the check against.
     * @return True if the value is not in the target array, false otherwise.
     */
    function isNotIn(value, target) {
        return !isArray(target) || !isIn(value, target);
    }

    /**
     * Checks if the value is >= 0.
     * @param value The value being checked.
     * @return True if the value is a number not negative, false otherwise.
     */
    function isNotNegative(value) {
        return typeof value === "number" && value >= 0;
    }
    /**
     * Throws an `IsError` if the value is negative.
     * @param value The value being checked.
     * @param field The name of the field being checked.
     * @param code The application / module code assigned to this error.
     * @throws IsError if the value is not a Boolean instance.
     */
    function isNotNegativeError(value, field, code) {
        if (!isNotNegative(value)) {
            var message = "The field " + field + " should not be negative.  It is set to " + value + ". ";
            throw new IsError(message, value, field, exports.ValidationConstraintEnum.IS_NOT_NEGATIVE, exports.Types.NUMBER, code);
        }
    }

    /**
     * Checks if the value is not a substring of the target.
     * If given value is not a string, then it returns false.
     *
     * @param value The value being checked.
     * @param target The target value to perform the check against.
     * @return True if the value is a not a substring of the target, false otherwise.
     */
    function isNotSubString(value, target) {
        return typeof value === "string" && !validatorts.contains(target, value);
    }

    /**
     * Checks if the string value does not contain the target.
     * If given value is not a string, then it returns false.
     *
     * @param value The value being checked.
     * @param target The target value to perform the check against.
     * @return True if the value is a not super string of the target, false otherwise.
     */
    function isNotSuperString(value, target) {
        return typeof value === "string" && !validatorts.contains(value, target);
    }

    /**
     * Checks if the argument is in the range of the min max parameters.
     * @param value The value being checked.
     * @param min The min parameter
     * @param max The max parameter
     * @throws {@link IsError} if min is not a number
     * @throws {@link IsError} if max is not a number
     * @returns True if the argument is in range.
     */
    function isNumberInRange(value, min, max) {
        isNumberError(min, 'min');
        isNumberError(max, 'max');
        return (value >= min && value <= max);
    }
    function isNumberInRangeError(value, min, max, field, code) {
        if (!isNumberInRange(value, min, max)) {
            var message = "The field " + field + " is not in range [" + min + ", " + max + "].  It is set to " + value + ". ";
            throw new IsError(message, value, field, exports.ValidationConstraintEnum.IS_NUMBER_IN_RANGE, exports.Types.NUMBER, code);
        }
    }

    /**
     * Checks if the string is numeric.
     * If given value is not a string, then it returns false.
     *
     * @param value The value being checked.
     * @return True if the value is numeric, false otherwise.
     */
    function isNumberString(value, options) {
        if (options === void 0) { options = {}; }
        if (value === ('Infinity') || value === '-Infinity') {
            return !!options.allowInfinity;
        }
        if (value === ('NaN')) {
            return !!options.allowNaN;
        }
        return typeof value === "string" && validatorts.isNumeric(value, options);
    }

    /**
     * Checks if the value is a date occurs at the exact same time
     * as the target date.
     *
     * @param value The value being checked.
     * @param target The target value to perform the check against.
     * @return True if the value date occurs at the exact same time as the target date, false otherwise.
     */
    function isSameInstant(value, target) {
        return value && value.getTime() === target.getTime();
    }

    /**
     * Checks if the value is a substring of the seed.
     * If given value is not a string, then it returns false.
     *
     * @param value The value being checked.
     * @param target The target value to perform the check against.
     * @return True if the value is a substring of the target, false otherwise.
     */
    function isSubString(value, target) {
        return typeof value === "string" && validatorts.contains(target, value);
    }

    /**
     * Checks if the string value contains the target.
     * If given value is not a string, then it returns false.
     *
     * @param value The value being checked.
     * @param target The target value to perform the check against.
     * @return True if the value is a super string of the target, false otherwise.
     */
    function isSuperString(value, target) {
        return typeof value === "string" && validatorts.contains(value, target);
    }

    /**
     * Checks if the string contains any surrogate pairs chars.
     * If given value is not a string, then it returns false.
     *
     * @param value The value being checked.
     * @returns True if the string contains any surrogate pairs chars, false otherwise.
     */
    function isSurrogatePair(value) {
        return typeof value === "string" && validatorts.isSurrogatePair(value);
    }

    /**
     * @param value The value being checked.
     * @returns True if the value is null or undefined, false otherwise.
     */
    function isUndefined(value) {
        return !isDefined(value);
    }

    /**
     * Checks if the string is uppercase.
     * If given value is not a string, then it returns false.
     *
     * @param value The value being checked.
     * @returns True if the string is uppercase, false otherwise.
     */
    function isUppercase(value) {
        return typeof value === "string" && validatorts.isUppercase(value);
    }

    /**
     * Checks if the string is an url.
     * If given value is not a string, then it returns false.
     *
     * @param value The value being checked.
     * @param options The optional configuration options {@link ValidatorJS.IsURLOptions}
     * @returns True if the string is an url, false otherwise.
     */
    function isURL(value, options) {
        return typeof value === "string" && validatorts.isURL(value, options);
    }

    /**
     * Checks if the string is a UUID (version 3, 4 or 5).
     * If given value is not a string, then it returns false.
     *
     * @param value The value being checked.
     * @param version The UUID version (3, 4 or 5)
     * @returns True if the string is a UUID, false otherwise.
     */
    function isUUID(value, version) {
        return typeof value === "string" && validatorts.isUUID(value, version);
    }

    /**
     * Checks if the string contains variable-width chars.
     * If given value is not a string, then it returns false.
     *
     * @param value The value being checked.
     * @returns  True if the string contains variable-width chars, false otherwise.
     */
    function isVariableWidth(value) {
        return typeof value === "string" && validatorts.isVariableWidth(value);
    }

    exports.IS_NUMBER_OPTIONS_DEFAULTS = IS_NUMBER_OPTIONS_DEFAULTS;
    exports.IsError = IsError;
    exports.IsMobilePhoneLocales = IsMobilePhoneLocales;
    exports.isAfterInstant = isAfterInstant;
    exports.isAlpha = isAlpha;
    exports.isAlphaNumeric = isAlphaNumeric;
    exports.isArray = isArray;
    exports.isArrayContainerOf = isArrayContainerOf;
    exports.isArrayEmpty = isArrayEmpty;
    exports.isArrayNotContainerOf = isArrayNotContainerOf;
    exports.isArrayNotEmpty = isArrayNotEmpty;
    exports.isArraySizeGreaterThan = isArraySizeGreaterThan;
    exports.isArraySizeLessThan = isArraySizeLessThan;
    exports.isArrayUnique = isArrayUnique;
    exports.isAscii = isAscii;
    exports.isBase64 = isBase64;
    exports.isBeforeInstant = isBeforeInstant;
    exports.isBoolean = isBoolean;
    exports.isBooleanError = isBooleanError;
    exports.isBooleanString = isBooleanString;
    exports.isByteLength = isByteLength;
    exports.isCreditCard = isCreditCard;
    exports.isCurrency = isCurrency;
    exports.isDate = isDate;
    exports.isDefined = isDefined;
    exports.isDivisibleBy = isDivisibleBy;
    exports.isEmail = isEmail;
    exports.isEmpty = isEmpty;
    exports.isEnum = isEnum;
    exports.isEqualTo = isEqualTo;
    exports.isFQDN = isFQDN;
    exports.isFullWidth = isFullWidth;
    exports.isGreaterThan = isGreaterThan;
    exports.isGreaterThanError = isGreaterThanError;
    exports.isGreaterThanOrEqualTo = isGreaterThanOrEqualTo;
    exports.isGreaterThanOrEqualToError = isGreaterThanOrEqualToError;
    exports.isHalfWidth = isHalfWidth;
    exports.isHexColor = isHexColor;
    exports.isHexadecimal = isHexadecimal;
    exports.isIP = isIP;
    exports.isISBN = isISBN;
    exports.isISIN = isISIN;
    exports.isISO8601 = isISO8601;
    exports.isISODateString = isISODateString;
    exports.isIn = isIn;
    exports.isInstanceOf = isInstanceOf;
    exports.isInt = isInt;
    exports.isJSON = isJSON;
    exports.isLengthGreaterThan = isLengthGreaterThan;
    exports.isLengthInRange = isLengthInRange;
    exports.isLengthLessThan = isLengthLessThan;
    exports.isLessThan = isLessThan;
    exports.isLowercase = isLowercase;
    exports.isMatch = isMatch;
    exports.isMilitaryTime = isMilitaryTime;
    exports.isMobilePhone = isMobilePhone;
    exports.isMongoId = isMongoId;
    exports.isMultibyte = isMultibyte;
    exports.isNegative = isNegative;
    exports.isNotEmpty = isNotEmpty;
    exports.isNotEqualTo = isNotEqualTo;
    exports.isNotIn = isNotIn;
    exports.isNotNegative = isNotNegative;
    exports.isNotNegativeError = isNotNegativeError;
    exports.isNotSubString = isNotSubString;
    exports.isNotSuperString = isNotSuperString;
    exports.isNumber = isNumber;
    exports.isNumberError = isNumberError;
    exports.isNumberInRange = isNumberInRange;
    exports.isNumberInRangeError = isNumberInRangeError;
    exports.isNumberString = isNumberString;
    exports.isObject = isObject;
    exports.isPositive = isPositive;
    exports.isPositiveError = isPositiveError;
    exports.isSameInstant = isSameInstant;
    exports.isString = isString;
    exports.isSubString = isSubString;
    exports.isSuperString = isSuperString;
    exports.isSurrogatePair = isSurrogatePair;
    exports.isURL = isURL;
    exports.isUUID = isUUID;
    exports.isUndefined = isUndefined;
    exports.isUppercase = isUppercase;
    exports.isVariableWidth = isVariableWidth;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=fireflysemantics-is.umd.js.map
