{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@fireflysemantics/is/lib/ValidationConstraintEnum.ts","ng://@fireflysemantics/is/lib/types.ts","ng://@fireflysemantics/is/lib/IsArray.ts","ng://@fireflysemantics/is/lib/IsArrayContainerOf.ts","ng://@fireflysemantics/is/lib/IsArrayEmpty.ts","ng://@fireflysemantics/is/lib/IsError.ts","ng://@fireflysemantics/is/lib/IsBoolean.ts","ng://@fireflysemantics/is/lib/IsDefined.ts","ng://@fireflysemantics/is/lib/IsNumber.ts","ng://@fireflysemantics/is/lib/IsGreaterThan.ts","ng://@fireflysemantics/is/lib/IsGreaterThanOrEqualTo.ts","ng://@fireflysemantics/is/lib/IsObject.ts","ng://@fireflysemantics/is/lib/IsIn.ts","ng://@fireflysemantics/is/lib/IsString.ts","ng://@fireflysemantics/is/lib/IsLengthInRange.ts","ng://@fireflysemantics/is/lib/IsMatch.ts","ng://@fireflysemantics/is/lib/IsMobilePhone.ts","ng://@fireflysemantics/is/lib/IsPositive.ts","ng://@fireflysemantics/is/lib/IsNotNegative.ts","ng://@fireflysemantics/is/lib/IsNumberInRange.ts","ng://@fireflysemantics/is/lib/IsAfterInstant.ts","ng://@fireflysemantics/is/lib/IsAlpha.ts","ng://@fireflysemantics/is/lib/IsAlphaNumeric.ts","ng://@fireflysemantics/is/lib/IsArrayNotContainerOf.ts","ng://@fireflysemantics/is/lib/IsArrayNotEmpty.ts","ng://@fireflysemantics/is/lib/IsArraySizeGreaterThan.ts","ng://@fireflysemantics/is/lib/IsArraySizeLessThan.ts","ng://@fireflysemantics/is/lib/IsArrayUnique.ts","ng://@fireflysemantics/is/lib/IsAscii.ts","ng://@fireflysemantics/is/lib/IsBase64.ts","ng://@fireflysemantics/is/lib/IsBeforeInstant.ts","ng://@fireflysemantics/is/lib/IsBooleanString.ts","ng://@fireflysemantics/is/lib/IsByteLength.ts","ng://@fireflysemantics/is/lib/IsCreditCard.ts","ng://@fireflysemantics/is/lib/IsCurrency.ts","ng://@fireflysemantics/is/lib/IsDate.ts","ng://@fireflysemantics/is/lib/IsDivisibleBy.ts","ng://@fireflysemantics/is/lib/IsEmail.ts","ng://@fireflysemantics/is/lib/IsEmpty.ts","ng://@fireflysemantics/is/lib/IsEnum.ts","ng://@fireflysemantics/is/lib/IsEqualTo.ts","ng://@fireflysemantics/is/lib/IsFQDN.ts","ng://@fireflysemantics/is/lib/IsFullWidth.ts","ng://@fireflysemantics/is/lib/IsHalfWidth.ts","ng://@fireflysemantics/is/lib/IsHexColor.ts","ng://@fireflysemantics/is/lib/IsHexaDecimal.ts","ng://@fireflysemantics/is/lib/IsIP.ts","ng://@fireflysemantics/is/lib/IsISBN.ts","ng://@fireflysemantics/is/lib/IsISIN.ts","ng://@fireflysemantics/is/lib/IsISO8601.ts","ng://@fireflysemantics/is/lib/IsISODateString.ts","ng://@fireflysemantics/is/lib/IsInstanceOf.ts","ng://@fireflysemantics/is/lib/IsInt.ts","ng://@fireflysemantics/is/lib/IsJSON.ts","ng://@fireflysemantics/is/lib/IsLengthGreaterThan.ts","ng://@fireflysemantics/is/lib/IsLengthLessThan.ts","ng://@fireflysemantics/is/lib/IsLessThan.ts","ng://@fireflysemantics/is/lib/IsLowercase.ts","ng://@fireflysemantics/is/lib/IsMillitaryTime.ts","ng://@fireflysemantics/is/lib/IsMongoID.ts","ng://@fireflysemantics/is/lib/IsMultiByte.ts","ng://@fireflysemantics/is/lib/IsNegative.ts","ng://@fireflysemantics/is/lib/IsNotEmpty.ts","ng://@fireflysemantics/is/lib/IsNotEqualTo.ts","ng://@fireflysemantics/is/lib/IsNotIn.ts","ng://@fireflysemantics/is/lib/IsNotSubstring.ts","ng://@fireflysemantics/is/lib/IsNotSuperString.ts","ng://@fireflysemantics/is/lib/IsNumberString.ts","ng://@fireflysemantics/is/lib/IsSameInstant.ts","ng://@fireflysemantics/is/lib/IsSubString.ts","ng://@fireflysemantics/is/lib/IsSuperString.ts","ng://@fireflysemantics/is/lib/IsSurrogatePair.ts","ng://@fireflysemantics/is/lib/IsURL.ts","ng://@fireflysemantics/is/lib/IsUUID.ts","ng://@fireflysemantics/is/lib/IsUndefined.ts","ng://@fireflysemantics/is/lib/IsUppercase.ts","ng://@fireflysemantics/is/lib/IsVariableWidth.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","ValidationConstraintEnum","Types","isArray","value","isArrayContainerOf","target","every","v","indexOf","isArrayEmpty","length","IsError","_super","message","field","constraint","type","code","_this","call","this","name","prototype","__","constructor","create","__extends","Error","isBoolean","Boolean","isDefined","IS_NUMBER_OPTIONS_DEFAULTS","allowNaN","allowInfinity","isNumber","options","Infinity","Number","isNaN","isFinite","isNumberError","o","JSON","stringify","IS_NUMBER","NUMBER","isGreaterThan","isGreaterThanOrEqualTo","isObject","isIn","isString","String","isLengthInRange","min","max","isLength","isMatch","pattern","modifiers","matches","IsMobilePhoneLocales","vtsIsMobilePhoneLocales","isPositive","isNotNegative","isNumberInRange","arg","getTime","vtsIsAlpha","vtsIsAlphaNumeric","array","uniqueItems","filter","a","c","vtsIsAscii","vtsIsBase64","IS_BOOLEAN","BOOLEAN","vtsIsByteLength","vtsIsCreditCard","vtsIsCurrency","Date","vjsIsDivisibleBy","vtsIsEmail","values","vtsIsFQDN","vtsIsFullWidth","IS_GREATER_THAN","IS_GREATER_THAN_OR_EQUAL_TO","vtsIsHalfWidth","vtsIsHexColor","vtsIsHexadecimal","version","vtsIsIP","vtsIsISBN","vtsIsISIN","vtsIsISO8601","test","val","isInteger","vtsIsJSON","vtsIsLengthInRange","vtsIsLowerCase","locale","vtsIsMobilePhone","vtsIsMongoId","vtsIsMultibyte","IS_NOT_NEGATIVE","contains","IS_NUMBER_IN_RANGE","isNumeric","IS_POSITIVE","vtsIsSurrogatePair","vtsIsURL","vtsIsUUID","vtsIsUppercase","vtsIsVariableWidth"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export enum ValidationConstraintEnum {\n    IS_POSITIVE = 'IsPositive',\n    IS_NUMBER = 'IsNumber',\n    IS_BOOLEAN =  'IsBoolean',\n    IS_NUMBER_IN_RANGE = 'IsNumberInRange',\n    IS_NOT_NEGATIVE = 'IsNotNegative',\n    IS_GREATER_THAN = 'IsGreaterThan',\n    IS_GREATER_THAN_OR_EQUAL_TO = 'IsGreaterThanOrEqualTo'\n}","export enum Types {\n    NUMBER =  'number',\n    BOOLEAN = 'boolean'\n}\n  ","/**\n * Checks if a argument is an array\n * @param value The value being checked.\n * @return True if the value is an instance of an array, false otherwise.\n */\nexport function isArray(value: any): boolean {\n    return value instanceof Array;\n}","/**\n * Checks if value array contains all values from the given target array.\n * If value is null, undefined, or not an array instance\n * then this function returns false.\n * \n * The values check should be primitive javascript types (String, number, boolean, null, undefined, etc.).\n * and not Object instances.\n * \n * Note that the check is value based.  For example the values \n * in the array [2,3,4,2] are contained by [2,3,4] even though the latter\n * is shorter. \n * \n * @param value The value container array being checked.\n * @param target The array of target values\n * @returns True if array contains all values from the given target array, false otherwise.\n */\nexport function isArrayContainerOf(value: any[], target: any[]) {\n    if (!(value instanceof Array)) return false;\n\n    return !value || target.every(v => value.indexOf(v) !== -1);\n}","import { isArray } from './IsArray'\n\n/**\n * Checks if an array contains any items.\n * @param value The array being checked\n * @return True if the array is empty and false otherwise.\n */\nexport function isArrayEmpty(value: any[]) {\n    if (!isArray(value)) return false;\n\n    return value.length == 0 ? true : false;\n}\n","import { ValidationConstraintEnum } from \"./ValidationConstraintEnum\";\nimport { Types } from \"./types\";\n\n/**\n * @param message The error message\n * @param value The value that violates the constraint\n * @param field The name of the field that triggered the constraint violation\n * @param constraint The name of the constraint violated\n * @param type The expected type for the field\n * @param code The application or module code for the error\n */\nexport class IsError extends Error {\n    constructor(\n      public message:string,\n      public value: any, \n      public field?:string, \n      public constraint?: ValidationConstraintEnum,\n      public type?: Types,\n      public code?:string) {\n        super(message);\n        this.name = 'IsError';\n        Object.setPrototypeOf(this, IsError.prototype);      \n    }\n}\n  ","import { IsError } from './IsError'\nimport { Types } from './types'\nimport { ValidationConstraintEnum } from './ValidationConstraintEnum'\n\n/**\n * Checks if the argument is a real boolean.\n * @param value The value being checked.\n * @returns True if the argument is an instance of Boolean.\n */\nexport function isBoolean(value: any): boolean {\n    return value instanceof Boolean || typeof value === \"boolean\";\n}\n\n/**\n * Throws an `IsError` if the value does not pass the `isBoolean` check.\n * @param value The value being checked.\n * @param field The name of the field being checked.\n * @param code The application / module code assigned to this error.\n * @throws IsError if the value is not a Boolean instance.\n * @returns false if an {@link IsError} is not thrown\n */\nexport function isBooleanError(value: any, field: string, code?: string): boolean {\n    if (!isBoolean(value)) {\n        const message: string =\n            `The ${value} valued field ${field} should be a boolean.`\n        throw new IsError(\n            message, \n            value, \n            field, \n            ValidationConstraintEnum.IS_BOOLEAN, \n            Types.BOOLEAN, \n            code)\n    }\n    return false\n}","/**\n * @param value The value being checked.\n * @returns True if the value is strictly `undefined`.not null or undefined, false otherwise.\n *\n * See https://stackoverflow.com/questions/51003292/exporting-utility-functions-in-typescript/51004236#51004236\n * for an implementation reference.\n */\nexport function isDefined<T>(value: T | null | undefined): value is T {\n    return value != null; //This checks for undefined automatically.\n}\n","import { IsError } from './IsError'\nimport { Types } from './types'\nimport { ValidationConstraintEnum } from './ValidationConstraintEnum'\n\n//TODO - This should probably be moved to @fireflysemantics/validatorts\n/**\n * IsNumberOptions.\n */\nexport interface IsNumberOptions {\n    allowNaN?: boolean;\n    allowInfinity?: boolean;\n}\n\n/**\n * Default options for IsNumber\n */\nexport const IS_NUMBER_OPTIONS_DEFAULTS:IsNumberOptions = {\n     allowNaN: false, \n     allowInfinity: true \n}\n\n/**\n * Check if a given value is a number.\n * \n * Default `IsNumberOptions` allow \n * `-Infinity, Infinity` but disallow `NaN`.\n * \n * @param target The value being checked.\n * @param options The optional configuration {@link IsNumberOptions}.\n * @return True if the value is a number, false otherwise.\n */\nexport function isNumber(target: any,\n    options: IsNumberOptions = IS_NUMBER_OPTIONS_DEFAULTS): boolean {\n    if (target === Infinity || target === -Infinity) {\n      return !!options.allowInfinity;\n    }\n  \n    if (Number.isNaN(target)) {\n      return !!options.allowNaN;\n    }\n    return Number.isFinite(target);\n  }\n\n/**\n * Utility method for throwing an error if the {@link isNumber} test fails.\n * \n * @param target The target value being checked\n * @param field The name of the field containing the number\n * @param code Optional nervous system code\n * @param options Optional {@link IsNumberOptions} instance.\n * @throws IsError if the target is not a number\n * @returns false if an {@link IsError} is not thrown\n */\nexport function isNumberError(target: number, field: string, code?: string, options?:IsNumberOptions): boolean {\n    const o = options ? options : IS_NUMBER_OPTIONS_DEFAULTS\n  \n    if (!isNumber(target)) {\n      const message: string = \n            `The field ${field} is not a number.  \n             The options used to perform the check were ${JSON.stringify(o)}.`\n      throw new IsError(message, target, field, ValidationConstraintEnum.IS_NUMBER, Types.NUMBER,  code)\n    }\n    return false\n}","import { IsError } from \"./IsError\";\nimport { ValidationConstraintEnum } from \"./ValidationConstraintEnum\";\nimport { Types } from \"./types\";\n\n/**\n * Checks if value > target.\n * @param value The value being checked.\n * @param target The target value to perform the check against.\n * @return True if the value is greater than the target, false otherwise.\n */\nexport function isGreaterThan(value: number, target: number): boolean {\n    return typeof value === \"number\" && typeof target === \"number\" && value > target;\n  }\n  \n  export function isGreaterThanError(value: number, target: number, field: string, code?: string): void {  \n    if (!isGreaterThan(value, target)) {\n      const message: string = `The value (${value}) of the field ${field} should be greater ${target}.`;\n      throw new IsError(message, value, field, ValidationConstraintEnum.IS_GREATER_THAN, Types.NUMBER, code);\n    }\n  }\n  ","import { ValidationConstraintEnum } from \"./ValidationConstraintEnum\";\nimport { Types } from \"./types\";\nimport { IsError } from \"./IsError\";\n\n/**\n * Checks if value >= target.\n * @param value The value being checked.\n * @param target The target value to perform the check against.\n * @return True if the value is greater or equal to the target, false otherwise.\n */\nexport function isGreaterThanOrEqualTo(value: number, target: number): boolean {\n    return typeof value === \"number\" && typeof target === \"number\" && value >= target;\n  }\n  \n  export function isGreaterThanOrEqualToError(value: number, target: number, field: string, code?: string): void {\n    const CONSTRAINT = \"IsGreaterThanOrEqualTo\";\n  \n    if (!isGreaterThanOrEqualTo(value, target)) {\n      const message: string = `The value (${value}) of the field ${field} should be greater than or equal to ${target}.`;\n      throw new IsError(message, value, field, ValidationConstraintEnum.IS_GREATER_THAN_OR_EQUAL_TO, Types.NUMBER, code);\n    }\n  }\n  \n  ","import { isArray } from './IsArray'\nimport { isDefined } from './IsDefined'\n\n/**\n * Checks if the instance is defined, is not an array, and\n * an object (typeof value === 'object').  \n * @param value The value being checked.\n * @return True if the value is an instance of the enum, false otherwise.\n */\nexport function isObject(value: any): boolean {\n  if (isArray(value)) {\n    return false;\n  }\n  return isDefined(value) ? typeof value === 'object' : false;\n}\n\n\n","import { isObject } from \"./IsObject\";\nimport { isArray } from \"./IsArray\";\n\n/**\n * Checks if given value is in the target array of allowed values.\n * \n * The value being checked should not be an object (isObject(value) != true).  It must\n * be a primitive javascript type, like a string, number,\n * or boolean.\n * \n * If the target is not an array false is returned.\n * \n * Note that when the value is an array, JSON.stringify is used\n * to perform the check.  It has a few quirks that are discussed\n * here.  These could affect the output in certain edge cases:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\n * \n * For example Infinity is considered null by JSON.stringify.\n * \n * @param value The value being checked.\n * @param target The target array to perform the check against.\n * @return True if the value is in the target array, false otherwise.\n */\nexport function isIn(value: any, target: any[]): boolean {\n    if (isObject(value)) {\n      return false;\n    }\n    if (!isArray(value)) {\n      return !isArray(target) || target.indexOf(value) > -1;\n    }\n    else {\n      return (JSON.stringify(target)).indexOf(JSON.stringify(value)) != -1;\n    }\n  }\n  ","\n/**\n * Checks if argument is a real string.\n * @param value The value being checked.\n * @return True if the value is a string, false otherwise.\n * \n */\nexport function isString(value: any): boolean {\n    return value instanceof String || typeof value === \"string\";\n}\n","import { isLength } from \"@fireflysemantics/validatorts\";\n\n/**\n * Checks if the string's length falls in a range. Note: this function takes into account surrogate pairs.\n * If given value is not a string, then it returns false.\n * \n * @param value The value being checked.\n * @param min The min value to perform the check against.\n * @param max The max value to perform the check against.\n * @return True if the check passes, false otherwise.\n */\nexport function isLengthInRange(value: string, min: number, max?: number): boolean {\n    return (\n      typeof value === \"string\" && isLength(value, { min, max })\n    );\n  }\n  ","import { matches } from '@fireflysemantics/validatorts'\n\n/**\n * Checks if string matches the pattern. \n * Either matches('foo', /foo/i) or matches('foo', 'foo', 'i').\n * If given value is not a string, then it returns false.\n * \n * @param value The value being checked.\n * @param pattern The match pattern\n * @param modifiers The modifiers\n * @returns True if string matches the pattern, false otherwise.\n */\nexport function isMatch(\n    value: string,\n    pattern: RegExp,\n    modifiers?: string\n  ): boolean {\n    return (\n      typeof value === \"string\" &&\n      matches(value, pattern, modifiers)\n    );\n  }\n  ","import { isMobilePhoneLocales as vtsIsMobilePhoneLocales, IsMobilePhoneOptions as vtsIsMobilePhoneOptions, isMobilePhone as vtsIsMobilePhone } from \"@fireflysemantics/validatorts\"\nexport { MobilePhoneLocale } from \"@fireflysemantics/validatorts\"\n\n/**\n * Checks if the string is a mobile phone number (locale is one of ['zh-CN', 'zh-TW', 'en-ZA', 'en-AU', 'en-HK',\n * 'pt-PT', 'fr-FR', 'el-GR', 'en-GB', 'en-US', 'en-ZM', 'ru-RU', 'nb-NO', 'nn-NO', 'vi-VN', 'en-NZ']).\n * If given value is not a string, then it returns false.\n * \n * @param value The value being checked.\n * @param options The optional configuration {@link MobilePhoneLocale}.\n * @return True if the string is a mobile phone number, false otherwise.\n */\nexport function isMobilePhone(value: string, locale: string, options?: IsMobilePhoneOptions): boolean {\n    return ( typeof value === \"string\" && vtsIsMobilePhone(value, locale, options));\n}\n\n/**\n * Rexport the options\n */\nexport type IsMobilePhoneOptions = vtsIsMobilePhoneOptions\n\nexport const IsMobilePhoneLocales = vtsIsMobilePhoneLocales","import { IsError } from \"./IsError\";\nimport { ValidationConstraintEnum } from \"./ValidationConstraintEnum\";\nimport { Types } from \"./types\";\n\n/**\n * Checks if the value is > 0.\n * @param value The value being checked.\n * @return True if the value is a number and is positive, false otherwise.\n */\nexport function isPositive(value: number): boolean {\n    return typeof value === \"number\" && value > 0;\n}\n\n/**\n * Throws an `IsError` if the value is not positive.\n * \n * @param value The value being checked.\n * @param field The name of the field being checked.\n * @param code The application / module code assigned to this error.\n * @throws {@link IsError} if the value is not a number instance.\n */\nexport function isPositiveError(value: any, field: string, code?: string): void {\n\n    if (!isPositive(value)) {\n        const message: string = `The field ${field} should be positive.  It is set to ${value}. `;\n        throw new IsError(\n            message, \n            value, \n            field, \n            ValidationConstraintEnum.IS_POSITIVE, \n            Types.NUMBER, \n            code);\n    }\n}\n","import { IsError } from \"./IsError\";\nimport { ValidationConstraintEnum } from \"./ValidationConstraintEnum\";\nimport { Types } from \"./types\";\n\n/**\n * Checks if the value is >= 0.\n * @param value The value being checked.\n * @return True if the value is a number not negative, false otherwise.\n */\nexport function isNotNegative(value: number): boolean {\n    return typeof value === \"number\" && value >= 0;\n}\n\n/**\n * Throws an `IsError` if the value is negative.\n * @param value The value being checked.\n * @param field The name of the field being checked.\n * @param code The application / module code assigned to this error.\n * @throws IsError if the value is not a Boolean instance.\n */\nexport function isNotNegativeError(value: any, field: string, code?: string): void {\n\n    if (!isNotNegative(value)) {\n        const message: string = `The field ${field} should not be negative.  It is set to ${value}. `;\n        throw new IsError(\n            message,\n            value,\n            field,\n            ValidationConstraintEnum.IS_NOT_NEGATIVE,\n            Types.NUMBER,\n            code);\n    }\n}","import { isNumberError } from \"./IsNumber\";\nimport { IsError } from \"./IsError\";\nimport { ValidationConstraintEnum } from \"./ValidationConstraintEnum\";\nimport { Types } from \"./types\";\n\n/**\n * Checks if the argument is in the range of the min max parameters.\n * @param value The value being checked.\n * @param min The min parameter\n * @param max The max parameter\n * @throws {@link IsError} if min is not a number\n * @throws {@link IsError} if max is not a number\n * @returns True if the argument is in range.\n */\nexport function isNumberInRange(value: any, min: number, max: number): boolean {\n    isNumberError(min, 'min')\n    isNumberError(max, 'max')\n    return (value >= min && value <= max);\n  }\n  \n  \n  export function isNumberInRangeError(value: number, min: number, max: number, field: string, code?: string): void {\n  \n    if (!isNumberInRange(value, min, max)) {\n      const message: string = `The field ${field} is not in range [${min}, ${max}].  It is set to ${value}. `;\n      throw new IsError(message, value, field, ValidationConstraintEnum.IS_NUMBER_IN_RANGE, Types.NUMBER, code);\n    }\n  }\n  ","/**\n * Checks if the value is a date that's after the specified date.\n * \n * @param target The value being checked.\n * @param arg The target value to perform the check against.\n * @return True if the value date is after the target, false otherwise.\n */\nexport function isAfterInstant(target: Date, arg: Date): boolean {\n  return target && target.getTime() > arg.getTime();\n}\n","import { isAlpha as vtsIsAlpha } from \"@fireflysemantics/validatorts\";\n\n/**\n * Checks if the string contains only letters (a-zA-Z).\n * If given value is not a string, then it returns false.\n * \n * @param value The value being checked.\n * @return True if the value contains only letters (a-zA-Z), false otherwise.\n */\nexport function isAlpha(value: string): boolean {\n    return typeof value === \"string\" && vtsIsAlpha(value);\n}\n  ","import { isAlphaNumeric as vtsIsAlphaNumeric} from \"@fireflysemantics/validatorts\";\n\n/**\n * Checks if the string contains only letters and numbers.\n * If given value is not a string, then it returns false.\n * \n * @param value The value being checked.\n * @return True if the value contains only letters and numbers, false otherwise.\n */\nexport function isAlphaNumeric(value: string): boolean {\n    return typeof value === \"string\" && vtsIsAlphaNumeric(value);\n}  ","import { isArrayContainerOf } from \"./IsArrayContainerOf\";\n\n\n/**\n * Checks if value array does not contain any of the given target values.\n * If null or undefined is given then this function returns false.\n * \n * @param value The value container array being checked.\n * @param target The array of target values\n * @returns True if value array does not contain any of the given target values, false otherwise.\n */\n\nexport function isArrayNotContainerOf(value: any[], target: any[]) {\n  if (!(value instanceof Array)) return false;\n\n  return !isArrayContainerOf(value, target);\n}\n","import { isArrayEmpty } from \"./IsArrayEmpty\";\n\n/**\n * Checks if given array is not empty.\n * If null or undefined is given then this function returns false.\n * \n * @param value The array being checked.\n * @returns True if given array is not empty, false otherwise.\n */\nexport function isArrayNotEmpty(value: any[]) {\n  return !isArrayEmpty(value);\n}\n","import { isArray } from \"./IsArray\";\n\n/**\n * Checks if array's length is greater than the target number.\n * If null or undefined is given then this function returns false.\n * \n * @param value The value array being checked.\n * @param target The minimum size of the array\n * @returns True if array's length is greater than the target number, false otherwise.\n */\nexport function isArraySizeGreaterThan(value: any[], target: number) {\n    return isArray(value) ? value.length > target : false;\n  }\n  ","import { isArray } from \"./IsArray\";\n\n/**\n * Checks if array's length is less than the target number.\n * If null or undefined is given then this function returns false.\n * \n * @param value The value array being checked.\n * @param target The maximum size of the array\n * @returns True if array's length is less than the target number, false otherwise.\n */\nexport function isArraySizeLessThan(value: any[], target: number) {\n    return isArray(value) ? value.length < target : false;\n  }\n  ","/**\n * Checks if all array's values are unique. Comparison for objects is reference-based.\n * If null or undefined is given then this function returns false.\n * \n * @param value The array being checked.\n * @returns True if all array's values are unique, false otherwise.\n */\nexport function isArrayUnique(array: any[]) {\n    if (!(array instanceof Array)) return false;\n  \n    const uniqueItems = array.filter((a, b, c) => c.indexOf(a) === b);\n    return array.length === uniqueItems.length;\n  }\n  ","import { isAscii as vtsIsAscii } from '@fireflysemantics/validatorts'\n/**\n * Checks if the string contains ASCII chars only.\n * If given value is not a string, then it returns false.\n * \n * @param value The value being checked.\n * @param target The target value to perform the check against.\n * @return True if the value contains only letters and numbers, false otherwise.\n */\nexport function isAscii(value: string): boolean {\n    return typeof value === \"string\" && vtsIsAscii(value);\n}\n","import { isBase64 as vtsIsBase64 } from \"@fireflysemantics/validatorts\";\n\n/**\n * Checks if a string is base64 encoded.\n * If given value is not a string, then it returns false.\n * \n * @param value The value being checked.\n * @return True a the value string is base64 encoded, false otherwise.\n */\nexport function isBase64(value: string): boolean {\n  return typeof value === \"string\" && vtsIsBase64(value);\n}","/**\n * Checks if the value is a date that's before the target date.\n * \n * @param value The value being checked.\n * @param target The target value to perform the check against.\n * @return True if the value date comes before the target date, false otherwise.\n */\nexport function isBeforeInstant(value: Date, target: Date): boolean {\n    return value && value.getTime() < target.getTime();\n  }\n  ","import { isBoolean } from '@fireflysemantics/validatorts'\n\n/**\n * Checks if a string is a boolean.\n * If given value is not a string, then it returns false.\n * \n * @param value The value being checked.\n * @param target The target value to perform the check against.\n * @return True if the type of the value is the same as string and `isBoolean` passes.\n */\nexport function isBooleanString(value: string): boolean {\n    return typeof value === \"string\" && isBoolean(value);\n  }\n  ","import { isByteLength as vtsIsByteLength } from \"@fireflysemantics/validatorts\";\n\n/**\n * Checks if the string's length (in bytes) falls in a range.\n * If given value is not a string, then it returns false.\n * \n * @param value The value being checked.\n * @param min The min value to perform the check against.\n * @param max The max value to perform the check against.\n * @return True if the check passes, false otherwise.\n */\nexport function isByteLength(value: string, min: number, max?: number): boolean {\n  return typeof value === \"string\" && vtsIsByteLength(value, { min, max });\n}\n","import { isCreditCard as vtsIsCreditCard } from \"@fireflysemantics/validatorts\";\n\n/**\n * Checks if the string is a credit card.\n * If given value is not a string, then it returns false.\n * \n * @param value The value being checked.\n * @return True if the string is a credit card, false otherwise.\n */\nexport function isCreditCard(value: string): boolean {\n  return typeof value === \"string\" && vtsIsCreditCard(value);\n}\n\n","import { IsCurrencyOptions as vtsIsCurrencyOptions, isCurrency as vtsIsCurrency } from \"@fireflysemantics/validatorts\";\n\n/**\n * Checks if the string is a valid currency amount.\n * If given value is not a string, then it returns false.\n * \n * @param value The value being checked.\n * @param options The options configuration {@link IsCurrencyOptions}\n * @return True if the string is a valid currency amount, false otherwise.\n */\nexport function isCurrency(\n    value: string,\n    options?: vtsIsCurrencyOptions\n): boolean {\n    return typeof value === \"string\" && vtsIsCurrency(value, options);\n}\n\n/**\n * Rexport IsCurrencyOptions\n */\nexport type IsCurrencyOptions = vtsIsCurrencyOptions","/**\n * Checks if argument is date.\n * @param value The date being checked.\n * @return True if the date value is a real date, false otherwise.\n */\nexport function isDate(value: any): boolean {\n    return value instanceof Date && !isNaN(value.getTime());\n}\n\n","import { isDivisibleBy as vjsIsDivisibleBy } from '@fireflysemantics/validatorts'\nimport { isNumberError } from './IsNumber';\n/**\n * Checks if the value is the value that is divisible by the target\n * without producing a remainder.\n * \n * @param target The value being checked.\n * @param arg The target value to perform the check against.\n * @return True if the value is divisible by the target, false otherwise.\n */\nexport function isDivisibleBy(target: number, arg: number): boolean {\n    isNumberError(target, 'target')\n    isNumberError(arg, 'arg')\n  return (\n    vjsIsDivisibleBy(String(target), String(arg))\n  );\n}","import { IsEmailOptions as vtsIsEmailOptions, isEmail as vtsIsEmail } from \"@fireflysemantics/validatorts\";\n\n/**\n * Checks if the string is an email.\n * If given value is not a string, then it returns false.\n * \n * @param value The value being checked.\n * @param options The options configuration {@link IsEmailOptions}\n * @return True if the string is an email, false otherwise.\n */\nexport function isEmail(value: string, options?: vtsIsEmailOptions): boolean {\n    return typeof value === \"string\" && vtsIsEmail(value, options);\n}\n\n/**\n * Reexport IsEmailOptions\n */\nexport type IsEmailOptions = vtsIsEmailOptions","/**\n * Checks if given value is empty (=== '', === null, === undefined).\n * @param value The value being checked.\n * @return True if the value is empty, false otherwise.\n */\nexport function isEmpty(value: any): boolean {\n    return value === \"\" || value === null || value === undefined;\n}\n","/**\n * Checks if a given value is an enum \n * (The value is contained in a property on the target object).\n * @param value The value being checked.\n * @param target The enum instance\n * @return True if the value is an instance of the enum, false otherwise.\n */\nexport function isEnum(value: any, target: any): boolean {\n    return Object.values(target).indexOf(value) >= 0;  \n}\n  ","/**\n * Checks if value using a (\"===\") the comparison.\n * @param value The value being checked.\n * @param target The target value to perform the check against.\n * @return True if the value equals the target, false otherwise.\n */\nexport function isEqualTo(value: any, target: any): boolean {\n    return value === target;\n}\n","import { IsFQDNOptions as vtsIsFQDNOptions, isFQDN as vtsIsFQDN } from '@fireflysemantics/validatorts'\n\n/**\n * Checks if the string is a fully qualified domain name (e.g. domain.com).\n * If given value is not a string, then it returns false.\n * \n * @param value The value being checked.\n * @param options The options configuration {@link IsFQDNOptions}\n * @return True if the string is a fully qualified domain name, false otherwise.\n */\nexport function isFQDN(value: string, options?: vtsIsFQDNOptions): boolean {\n    return typeof value === \"string\" && vtsIsFQDN(value, options);\n}\n\n/**\n * Reexport the options\n */\nexport type IsFQDNOptions = vtsIsFQDNOptions","import { isFullWidth as vtsIsFullWidth } from \"@fireflysemantics/validatorts\";\n\n/**\n * Checks if the string contains any full-width chars.\n * If given value is not a string, then it returns false.\n * \n * @param value The value being checked.\n * @returns  True if the string contains full-width characters, false otherwise.\n */\nexport function isFullWidth(value: string): boolean {\n  return typeof value === \"string\" && vtsIsFullWidth(value);\n}","import { isHalfWidth as vtsIsHalfWidth } from \"@fireflysemantics/validatorts\";\n\n/**\n * Checks if the string contains any half-width chars.\n * If given value is not a string, then it returns false.\n * \n * @param value The value being checked.\n * @returns  True if the string contains any half-width chars, false otherwise.\n */\nexport function isHalfWidth(value: string): boolean {\n    return typeof value === \"string\" && vtsIsHalfWidth(value);\n  }\n  ","import { isHexColor as vtsIsHexColor } from \"@fireflysemantics/validatorts\";\n\n/**\n * Checks if the string is a hexadecimal color.\n * If given value is not a string, then it returns false.\n * \n * @param value The value being checked.\n * @returns  True if the string is a hexadecimal color, false otherwise.\n */\nexport function isHexColor(value: string): boolean {\n  return typeof value === \"string\" && vtsIsHexColor(value)\n}\n\n","import { isHexadecimal as vtsIsHexadecimal } from \"@fireflysemantics/validatorts\";\n\n/**\n * Checks if the string is a hexadecimal number.\n * If given value is not a string, then it returns false.\n * \n * @param value The value being checked.\n * @returns  True if the string is a hexadecimal number, false otherwise.\n */\nexport function isHexadecimal(value: string): boolean {\n    return typeof value === \"string\" && vtsIsHexadecimal(value)\n}\n  ","import { isIP as vtsIsIP } from \"@fireflysemantics/validatorts\";\n\n/**\n * Checks if the string is an IP (version 4 or 6).\n * If given value is not a string, then it returns false.\n * \n * @param value The value being checked.\n * @returns  True if the string is an IP (version 4 or 6), false otherwise.\n */\nexport function isIP(value: string, version?: \"4\" | \"6\" ): boolean {\n  return typeof value === \"string\" && vtsIsIP(value, version);\n}\n","import { isISBN as vtsIsISBN } from \"@fireflysemantics/validatorts\";\n\n/**\n * Checks if the string is an ISBN (version 10 or 13).\n * If given value is not a string, then it returns false.\n * \n * @param value The value being checked.\n * @returns  True if the string is an ISBN, false otherwise.\n */\nexport function isISBN(value: string, version?: \"10\" | \"13\"): boolean {\n    return typeof value === \"string\" && vtsIsISBN(value, version);\n}\n  ","import { isISIN as vtsIsISIN } from \"@fireflysemantics/validatorts\";\n\n/**\n * Checks if the string is an ISIN (stock/security identifier).\n * If given value is not a string, then it returns false.\n * \n * @param value The value being checked.\n * @returns  True if the string is an ISIN, false otherwise.\n */\nexport function isISIN(value: string): boolean {\n    return typeof value === \"string\" && vtsIsISIN(value);\n}","import { isISO8601 as vtsIsISO8601 } from \"@fireflysemantics/validatorts\";\n\n/**\n * Checks if the string is a valid ISO 8601 date.\n * If given value is not a string, then it returns false.\n * \n * @param value The value being checked.\n * @returns  True if the string a valid ISO 8601, false otherwise.\n */\nexport function isISO8601(value: string): boolean {\n  return typeof value === \"string\" && vtsIsISO8601(value);\n}\n","import { isString } from \"./IsString\"\n\n/**\n * Checks if argument is a ISO 8601 Date String.\n * \n * Such a string is 24 ((YYYY-MM-DDTHH:mm:ss.sssZ) \n * or \n * 27 (±YYYYYY-MM-DDTHH:mm:ss.sssZ) \n * \n * characters long.\n * \n * @param value The value being checked.\n * @return True if the value is an instance of an ISOString date.\n */\nexport function isISODateString(value: any): boolean {\n    const regex = /\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d(?:\\.\\d+)?(?:Z|\\+[0-2]\\d(?:\\:[0-5]\\d)?)?/g;\n    return isString(value) && regex.test(value)\n}\n  ","/**\n * Checks if the value is an instance of the specified object.\n * \n * @param value The value array being checked.\n * @param target The target type constructor\n * @returns True if the value is an instance of the specified object, false otherwise.\n */\nexport function isInstanceOf(\n    value: any,\n    target: new (...args: any[]) => any\n  ) {\n    return (\n      target &&\n      typeof target === \"function\" &&\n      value instanceof target\n    );\n  }\n  ","/**\n * Checks if value is an integer.\n * @param value The value being checked.\n * @return True if the value is an integer, false otherwise.\n */\nexport function isInt(val: number): boolean {\n    return Number.isInteger(val);\n}\n","import { isJSON as vtsIsJSON} from \"@fireflysemantics/validatorts\";\n\n/**\n * Checks if the string is valid JSON (note: uses JSON.parse).\n * If given value is not a string, then it returns false.\n */\nexport function isJSON(value: string): boolean {\n    return typeof value === \"string\" && vtsIsJSON(value);\n  }\n  ","import { isLengthInRange } from \"./IsLengthInRange\";\n\n/**\n * Checks if the string's length is not less than given target number. \n * Note: this function takes into account surrogate pairs.\n * If given value is not a string, then it returns false.\n * \n * @param value The value being checked.\n * @param target The minimum target length\n * @returns True if the string's length is not less than given target number, false otherwise.\n */\nexport function isLengthGreaterThan(value: string, target: number) {\n  return typeof value === \"string\" && isLengthInRange(value, target);\n}","import { isLengthInRange as vtsIsLengthInRange } from \"./IsLengthInRange\";\n\n/**\n * Checks if the string's length is not more than target number. \n * Note: this function takes into account surrogate pairs.\n * If given value is not a string, then it returns false.\n * \n * @param value The value being checked.\n * @param target The maximum target length\n * @returns True if the string's length is not less than given target number, false otherwise.\n */\nexport function isLengthLessThan(value: string, target: number) {\n    return typeof value === \"string\" && vtsIsLengthInRange(value, 0, target);\n}","/**\n * Checks if the first number is value < target.\n * @param value The value being checked.\n * @param target The target value to perform the check against.\n * @return True if the value is less than the target, false otherwise.\n */\nexport function isLessThan(value: number, target: number): boolean {\n    return typeof value === \"number\" && typeof target === \"number\" && value < target;\n  }\n  ","import { isLowercase as vtsIsLowerCase } from \"@fireflysemantics/validatorts\";\n\n/**\n * Checks if the string is lowercase.\n * If given value is not a string, then it returns false.\n * \n * @param value The value being checked.\n * @returns  True if the string is lowercase, false otherwise.\n */\nexport function isLowercase(value: string): boolean {\n    return typeof value === \"string\" && vtsIsLowerCase(value);\n  }\n  ","import { isMatch } from \"./IsMatch\";\n\n/**\n * Checks if the string represents a time without a given timezone in the format HH:MM (military)\n * If the given value does not match the pattern HH:MM, then it returns false.\n * \n * @param value The value being checked.\n * @returns True if the string represents a time without a given timezone in the format HH:MM (military), false otherwise.\n */\nexport function isMilitaryTime(value: string): boolean {\n    return isMatch(value, /^([01]\\d|2[0-3]):?([0-5]\\d)$/);\n}\n","import { isMongoId as vtsIsMongoId} from \"@fireflysemantics/validatorts\";\n\n/**\n * Checks if the string is a valid hex-encoded representation of a MongoDB ObjectId.\n * If given value is not a string, then it returns false.\n * \n * @param value The value being checked.\n * @returns True if the string is a valid hex-encoded representation of a MongoDB ObjectId, false otherwise.\n */\nexport function isMongoId(value: string): boolean {\n    return typeof value === \"string\" && vtsIsMongoId(value);\n  }\n  \n  ","import { isMultibyte as vtsIsMultibyte} from \"@fireflysemantics/validatorts\";\n\n/**\n * Checks if the string contains one or more multibyte chars.\n * If given value is not a string, then it returns false.\n * \n * @param value The value being checked.\n * @returns True if the string contains one or more multibyte chars, false otherwise.\n */\nexport function isMultibyte(value: string): boolean {\n    return typeof value === \"string\" && vtsIsMultibyte(value);\n  }\n  ","import { isPositive } from \"./IsPositive\";\n\n/**\n * Checks if the value is a negative number.\n * @param value The value being checked.\n * @return True if the value is < 0, false otherwise.\n */\nexport function isNegative(value: number): boolean {\n    return !isPositive(value);\n}\n","/**\n * Checks if given value is not empty (!== '', !== null, !== undefined).\n * @param value The value being checked.\n * @return True if the value is not empty, false otherwise.\n */\nexport function isNotEmpty(value: any): boolean {\n    return value !== \"\" && value !== null && value !== undefined;\n}\n","/**\n * Checks if value does not match (\"!==\") the comparison.\n * @param value The value being checked.\n * @param target The target value to perform the check against.\n * @return True if the value does not equal the target, false otherwise.\n */\nexport function isNotEqualTo(value: any, target: any): boolean {\n    return value !== target;\n  }\n  ","import { isArray } from \"./IsArray\";\nimport { isIn } from \"./IsIn\";\n\n/**\n * Checks if given value is in the target array of allowed values.\n * \n * @param value The value being checked.\n * @param target The target value to perform the check against.\n * @return True if the value is not in the target array, false otherwise.\n */\nexport function isNotIn(value: any, target: any[]): boolean {\n    return !isArray(target) || !isIn(value, target);\n  }\n  ","import { contains } from \"@fireflysemantics/validatorts\";\n\n/**\n * Checks if the value is not a substring of the target.\n * If given value is not a string, then it returns false.\n * \n * @param value The value being checked.\n * @param target The target value to perform the check against.\n * @return True if the value is a not a substring of the target, false otherwise.\n */\nexport function isNotSubString(value: string, target: string): boolean {\n    return typeof value === \"string\" && !contains(target, value);\n}","import { contains } from \"@fireflysemantics/validatorts\";\n\n/**\n * Checks if the string value does not contain the target.\n * If given value is not a string, then it returns false.\n * \n * @param value The value being checked.\n * @param target The target value to perform the check against.\n * @return True if the value is a not super string of the target, false otherwise.\n */\nexport function isNotSuperString(value: string, target: string): boolean {\n    return typeof value === \"string\" && !contains(value, target);\n  }\n  ","import { isNumeric } from \"@fireflysemantics/validatorts\";\nimport { IsNumberOptions } from \"./IsNumber\";\n\n\n/**\n * Checks if the string is numeric.\n * If given value is not a string, then it returns false.\n * \n * @param value The value being checked.\n * @return True if the value is numeric, false otherwise.\n */\nexport function isNumberString(value: string, options: IsNumberOptions = {}): boolean {\n    if (value === ('Infinity') || value === '-Infinity') {\n      return !!options.allowInfinity;\n    }\n  \n    if (value === ('NaN')) {\n      return !!options.allowNaN;\n    }\n    return typeof value === \"string\" && isNumeric(value, options);\n  }\n  ","/**\n * Checks if the value is a date occurs at the exact same time\n * as the target date.\n * \n * @param value The value being checked.\n * @param target The target value to perform the check against.\n * @return True if the value date occurs at the exact same time as the target date, false otherwise.\n */\nexport function isSameInstant(value: Date, target: Date): boolean {\n    return value && value.getTime() === target.getTime();\n  }\n  ","import { contains } from \"@fireflysemantics/validatorts\";\n\n/**\n * Checks if the value is a substring of the seed.\n * If given value is not a string, then it returns false.\n * \n * @param value The value being checked.\n * @param target The target value to perform the check against.\n * @return True if the value is a substring of the target, false otherwise.\n */\nexport function isSubString(value: string, target: string): boolean {\n    return typeof value === \"string\" && contains(target, value);\n  }\n  ","import { contains } from \"@fireflysemantics/validatorts\";\n\n/**\n * Checks if the string value contains the target.\n * If given value is not a string, then it returns false.\n * \n * @param value The value being checked.\n * @param target The target value to perform the check against.\n * @return True if the value is a super string of the target, false otherwise.\n */\nexport function isSuperString(value: string, target: string): boolean {\n    return typeof value === \"string\" && contains(value, target);\n  }\n  \n  ","import { isSurrogatePair as vtsIsSurrogatePair } from \"@fireflysemantics/validatorts\";\n\n/**\n * Checks if the string contains any surrogate pairs chars.\n * If given value is not a string, then it returns false.\n * \n * @param value The value being checked.\n * @returns True if the string contains any surrogate pairs chars, false otherwise.\n */\nexport function isSurrogatePair(value: string): boolean {\n    return typeof value === \"string\" && vtsIsSurrogatePair(value);\n  }\n  ","import { IsURLOptions as vtsIsURLOptions, isURL as vtsIsURL } from \"@fireflysemantics/validatorts\";\n\n/**\n * Checks if the string is an url.\n * If given value is not a string, then it returns false.\n * \n * @param value The value being checked.\n * @param options The optional configuration options {@link ValidatorJS.IsURLOptions}\n * @returns True if the string is an url, false otherwise.\n */\nexport function isURL(value: string, options?: vtsIsURLOptions): boolean {\n    return typeof value === \"string\" && vtsIsURL(value, options);\n}\n\nexport type IsURLOptions = vtsIsURLOptions\n","import { isUUID as vtsIsUUID } from \"@fireflysemantics/validatorts\";\n\n/**\n * Checks if the string is a UUID (version 3, 4 or 5).\n * If given value is not a string, then it returns false.\n * \n * @param value The value being checked.\n * @param version The UUID version (3, 4 or 5)\n * @returns True if the string is a UUID, false otherwise.\n */\nexport function isUUID(value: string, version?: 3 | 4 | 5): boolean {\n    return typeof value === \"string\" && vtsIsUUID(value, version);\n}\n  ","import { isDefined } from './IsDefined'\n/**\n * @param value The value being checked.\n * @returns True if the value is null or undefined, false otherwise.\n */\nexport function isUndefined<T>(value: T | null | undefined): value is T {\n    return !isDefined(value);\n}","import { isUppercase as vtsIsUppercase } from \"@fireflysemantics/validatorts\";\n\n/**\n * Checks if the string is uppercase.\n * If given value is not a string, then it returns false.\n * \n * @param value The value being checked.\n * @returns True if the string is uppercase, false otherwise. \n */\nexport function isUppercase(value: string): boolean {\n    return typeof value === \"string\" && vtsIsUppercase(value);\n  }\n  ","import { isVariableWidth as vtsIsVariableWidth } from \"@fireflysemantics/validatorts\";\n\n/**\n * Checks if the string contains variable-width chars.\n * If given value is not a string, then it returns false.\n * \n * @param value The value being checked.\n * @returns  True if the string contains variable-width chars, false otherwise.\n */\nexport function isVariableWidth(value: string): boolean {\n    return typeof value === \"string\" && vtsIsVariableWidth(value);\n}\n  "]}