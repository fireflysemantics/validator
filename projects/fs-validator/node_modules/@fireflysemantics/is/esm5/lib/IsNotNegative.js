import { IsError } from "./IsError";
import { ValidationConstraintEnum } from "./ValidationConstraintEnum";
import { Types } from "./types";
/**
 * Checks if the value is >= 0.
 * @param value The value being checked.
 * @return True if the value is a number not negative, false otherwise.
 */
export function isNotNegative(value) {
    return typeof value === "number" && value >= 0;
}
/**
 * Throws an `IsError` if the value is negative.
 * @param value The value being checked.
 * @param field The name of the field being checked.
 * @param code The application / module code assigned to this error.
 * @throws IsError if the value is not a Boolean instance.
 */
export function isNotNegativeError(value, field, code) {
    if (!isNotNegative(value)) {
        var message = "The field " + field + " should not be negative.  It is set to " + value + ". ";
        throw new IsError(message, value, field, ValidationConstraintEnum.IS_NOT_NEGATIVE, Types.NUMBER, code);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSXNOb3ROZWdhdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmaXJlZmx5c2VtYW50aWNzL2lzLyIsInNvdXJjZXMiOlsibGliL0lzTm90TmVnYXRpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNwQyxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRWhDOzs7O0dBSUc7QUFDSCxNQUFNLFVBQVUsYUFBYSxDQUFDLEtBQWE7SUFDdkMsT0FBTyxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksS0FBSyxJQUFJLENBQUMsQ0FBQztBQUNuRCxDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsTUFBTSxVQUFVLGtCQUFrQixDQUFDLEtBQVUsRUFBRSxLQUFhLEVBQUUsSUFBYTtJQUV2RSxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ3ZCLElBQU0sT0FBTyxHQUFXLGVBQWEsS0FBSywrQ0FBMEMsS0FBSyxPQUFJLENBQUM7UUFDOUYsTUFBTSxJQUFJLE9BQU8sQ0FDYixPQUFPLEVBQ1AsS0FBSyxFQUNMLEtBQUssRUFDTCx3QkFBd0IsQ0FBQyxlQUFlLEVBQ3hDLEtBQUssQ0FBQyxNQUFNLEVBQ1osSUFBSSxDQUFDLENBQUM7S0FDYjtBQUNMLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJc0Vycm9yIH0gZnJvbSBcIi4vSXNFcnJvclwiO1xuaW1wb3J0IHsgVmFsaWRhdGlvbkNvbnN0cmFpbnRFbnVtIH0gZnJvbSBcIi4vVmFsaWRhdGlvbkNvbnN0cmFpbnRFbnVtXCI7XG5pbXBvcnQgeyBUeXBlcyB9IGZyb20gXCIuL3R5cGVzXCI7XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSB2YWx1ZSBpcyA+PSAwLlxuICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSBiZWluZyBjaGVja2VkLlxuICogQHJldHVybiBUcnVlIGlmIHRoZSB2YWx1ZSBpcyBhIG51bWJlciBub3QgbmVnYXRpdmUsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzTm90TmVnYXRpdmUodmFsdWU6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwibnVtYmVyXCIgJiYgdmFsdWUgPj0gMDtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYW4gYElzRXJyb3JgIGlmIHRoZSB2YWx1ZSBpcyBuZWdhdGl2ZS5cbiAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgYmVpbmcgY2hlY2tlZC5cbiAqIEBwYXJhbSBmaWVsZCBUaGUgbmFtZSBvZiB0aGUgZmllbGQgYmVpbmcgY2hlY2tlZC5cbiAqIEBwYXJhbSBjb2RlIFRoZSBhcHBsaWNhdGlvbiAvIG1vZHVsZSBjb2RlIGFzc2lnbmVkIHRvIHRoaXMgZXJyb3IuXG4gKiBAdGhyb3dzIElzRXJyb3IgaWYgdGhlIHZhbHVlIGlzIG5vdCBhIEJvb2xlYW4gaW5zdGFuY2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc05vdE5lZ2F0aXZlRXJyb3IodmFsdWU6IGFueSwgZmllbGQ6IHN0cmluZywgY29kZT86IHN0cmluZyk6IHZvaWQge1xuXG4gICAgaWYgKCFpc05vdE5lZ2F0aXZlKHZhbHVlKSkge1xuICAgICAgICBjb25zdCBtZXNzYWdlOiBzdHJpbmcgPSBgVGhlIGZpZWxkICR7ZmllbGR9IHNob3VsZCBub3QgYmUgbmVnYXRpdmUuICBJdCBpcyBzZXQgdG8gJHt2YWx1ZX0uIGA7XG4gICAgICAgIHRocm93IG5ldyBJc0Vycm9yKFxuICAgICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgZmllbGQsXG4gICAgICAgICAgICBWYWxpZGF0aW9uQ29uc3RyYWludEVudW0uSVNfTk9UX05FR0FUSVZFLFxuICAgICAgICAgICAgVHlwZXMuTlVNQkVSLFxuICAgICAgICAgICAgY29kZSk7XG4gICAgfVxufSJdfQ==