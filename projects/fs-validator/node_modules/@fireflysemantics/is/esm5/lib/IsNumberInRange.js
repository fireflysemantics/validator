import { isNumberError } from "./IsNumber";
import { IsError } from "./IsError";
import { ValidationConstraintEnum } from "./ValidationConstraintEnum";
import { Types } from "./types";
/**
 * Checks if the argument is in the range of the min max parameters.
 * @param value The value being checked.
 * @param min The min parameter
 * @param max The max parameter
 * @throws {@link IsError} if min is not a number
 * @throws {@link IsError} if max is not a number
 * @returns True if the argument is in range.
 */
export function isNumberInRange(value, min, max) {
    isNumberError(min, 'min');
    isNumberError(max, 'max');
    return (value >= min && value <= max);
}
export function isNumberInRangeError(value, min, max, field, code) {
    if (!isNumberInRange(value, min, max)) {
        var message = "The field " + field + " is not in range [" + min + ", " + max + "].  It is set to " + value + ". ";
        throw new IsError(message, value, field, ValidationConstraintEnum.IS_NUMBER_IN_RANGE, Types.NUMBER, code);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSXNOdW1iZXJJblJhbmdlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZpcmVmbHlzZW1hbnRpY3MvaXMvIiwic291cmNlcyI6WyJsaWIvSXNOdW1iZXJJblJhbmdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFDM0MsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNwQyxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRWhDOzs7Ozs7OztHQVFHO0FBQ0gsTUFBTSxVQUFVLGVBQWUsQ0FBQyxLQUFVLEVBQUUsR0FBVyxFQUFFLEdBQVc7SUFDaEUsYUFBYSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQTtJQUN6QixhQUFhLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFBO0lBQ3pCLE9BQU8sQ0FBQyxLQUFLLElBQUksR0FBRyxJQUFJLEtBQUssSUFBSSxHQUFHLENBQUMsQ0FBQztBQUN4QyxDQUFDO0FBR0QsTUFBTSxVQUFVLG9CQUFvQixDQUFDLEtBQWEsRUFBRSxHQUFXLEVBQUUsR0FBVyxFQUFFLEtBQWEsRUFBRSxJQUFhO0lBRXhHLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBRTtRQUNyQyxJQUFNLE9BQU8sR0FBVyxlQUFhLEtBQUssMEJBQXFCLEdBQUcsVUFBSyxHQUFHLHlCQUFvQixLQUFLLE9BQUksQ0FBQztRQUN4RyxNQUFNLElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLHdCQUF3QixDQUFDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDM0c7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNOdW1iZXJFcnJvciB9IGZyb20gXCIuL0lzTnVtYmVyXCI7XG5pbXBvcnQgeyBJc0Vycm9yIH0gZnJvbSBcIi4vSXNFcnJvclwiO1xuaW1wb3J0IHsgVmFsaWRhdGlvbkNvbnN0cmFpbnRFbnVtIH0gZnJvbSBcIi4vVmFsaWRhdGlvbkNvbnN0cmFpbnRFbnVtXCI7XG5pbXBvcnQgeyBUeXBlcyB9IGZyb20gXCIuL3R5cGVzXCI7XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBhcmd1bWVudCBpcyBpbiB0aGUgcmFuZ2Ugb2YgdGhlIG1pbiBtYXggcGFyYW1ldGVycy5cbiAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgYmVpbmcgY2hlY2tlZC5cbiAqIEBwYXJhbSBtaW4gVGhlIG1pbiBwYXJhbWV0ZXJcbiAqIEBwYXJhbSBtYXggVGhlIG1heCBwYXJhbWV0ZXJcbiAqIEB0aHJvd3Mge0BsaW5rIElzRXJyb3J9IGlmIG1pbiBpcyBub3QgYSBudW1iZXJcbiAqIEB0aHJvd3Mge0BsaW5rIElzRXJyb3J9IGlmIG1heCBpcyBub3QgYSBudW1iZXJcbiAqIEByZXR1cm5zIFRydWUgaWYgdGhlIGFyZ3VtZW50IGlzIGluIHJhbmdlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNOdW1iZXJJblJhbmdlKHZhbHVlOiBhbnksIG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIGlzTnVtYmVyRXJyb3IobWluLCAnbWluJylcbiAgICBpc051bWJlckVycm9yKG1heCwgJ21heCcpXG4gICAgcmV0dXJuICh2YWx1ZSA+PSBtaW4gJiYgdmFsdWUgPD0gbWF4KTtcbiAgfVxuICBcbiAgXG4gIGV4cG9ydCBmdW5jdGlvbiBpc051bWJlckluUmFuZ2VFcnJvcih2YWx1ZTogbnVtYmVyLCBtaW46IG51bWJlciwgbWF4OiBudW1iZXIsIGZpZWxkOiBzdHJpbmcsIGNvZGU/OiBzdHJpbmcpOiB2b2lkIHtcbiAgXG4gICAgaWYgKCFpc051bWJlckluUmFuZ2UodmFsdWUsIG1pbiwgbWF4KSkge1xuICAgICAgY29uc3QgbWVzc2FnZTogc3RyaW5nID0gYFRoZSBmaWVsZCAke2ZpZWxkfSBpcyBub3QgaW4gcmFuZ2UgWyR7bWlufSwgJHttYXh9XS4gIEl0IGlzIHNldCB0byAke3ZhbHVlfS4gYDtcbiAgICAgIHRocm93IG5ldyBJc0Vycm9yKG1lc3NhZ2UsIHZhbHVlLCBmaWVsZCwgVmFsaWRhdGlvbkNvbnN0cmFpbnRFbnVtLklTX05VTUJFUl9JTl9SQU5HRSwgVHlwZXMuTlVNQkVSLCBjb2RlKTtcbiAgICB9XG4gIH1cbiAgIl19