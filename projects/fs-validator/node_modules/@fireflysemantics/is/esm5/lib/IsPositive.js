import { IsError } from "./IsError";
import { ValidationConstraintEnum } from "./ValidationConstraintEnum";
import { Types } from "./types";
/**
 * Checks if the value is > 0.
 * @param value The value being checked.
 * @return True if the value is a number and is positive, false otherwise.
 */
export function isPositive(value) {
    return typeof value === "number" && value > 0;
}
/**
 * Throws an `IsError` if the value is not positive.
 *
 * @param value The value being checked.
 * @param field The name of the field being checked.
 * @param code The application / module code assigned to this error.
 * @throws {@link IsError} if the value is not a number instance.
 */
export function isPositiveError(value, field, code) {
    if (!isPositive(value)) {
        var message = "The field " + field + " should be positive.  It is set to " + value + ". ";
        throw new IsError(message, value, field, ValidationConstraintEnum.IS_POSITIVE, Types.NUMBER, code);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSXNQb3NpdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmaXJlZmx5c2VtYW50aWNzL2lzLyIsInNvdXJjZXMiOlsibGliL0lzUG9zaXRpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNwQyxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRWhDOzs7O0dBSUc7QUFDSCxNQUFNLFVBQVUsVUFBVSxDQUFDLEtBQWE7SUFDcEMsT0FBTyxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztBQUNsRCxDQUFDO0FBRUQ7Ozs7Ozs7R0FPRztBQUNILE1BQU0sVUFBVSxlQUFlLENBQUMsS0FBVSxFQUFFLEtBQWEsRUFBRSxJQUFhO0lBRXBFLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEVBQUU7UUFDcEIsSUFBTSxPQUFPLEdBQVcsZUFBYSxLQUFLLDJDQUFzQyxLQUFLLE9BQUksQ0FBQztRQUMxRixNQUFNLElBQUksT0FBTyxDQUNiLE9BQU8sRUFDUCxLQUFLLEVBQ0wsS0FBSyxFQUNMLHdCQUF3QixDQUFDLFdBQVcsRUFDcEMsS0FBSyxDQUFDLE1BQU0sRUFDWixJQUFJLENBQUMsQ0FBQztLQUNiO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElzRXJyb3IgfSBmcm9tIFwiLi9Jc0Vycm9yXCI7XG5pbXBvcnQgeyBWYWxpZGF0aW9uQ29uc3RyYWludEVudW0gfSBmcm9tIFwiLi9WYWxpZGF0aW9uQ29uc3RyYWludEVudW1cIjtcbmltcG9ydCB7IFR5cGVzIH0gZnJvbSBcIi4vdHlwZXNcIjtcblxuLyoqXG4gKiBDaGVja3MgaWYgdGhlIHZhbHVlIGlzID4gMC5cbiAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgYmVpbmcgY2hlY2tlZC5cbiAqIEByZXR1cm4gVHJ1ZSBpZiB0aGUgdmFsdWUgaXMgYSBudW1iZXIgYW5kIGlzIHBvc2l0aXZlLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1Bvc2l0aXZlKHZhbHVlOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiICYmIHZhbHVlID4gMDtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYW4gYElzRXJyb3JgIGlmIHRoZSB2YWx1ZSBpcyBub3QgcG9zaXRpdmUuXG4gKiBcbiAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgYmVpbmcgY2hlY2tlZC5cbiAqIEBwYXJhbSBmaWVsZCBUaGUgbmFtZSBvZiB0aGUgZmllbGQgYmVpbmcgY2hlY2tlZC5cbiAqIEBwYXJhbSBjb2RlIFRoZSBhcHBsaWNhdGlvbiAvIG1vZHVsZSBjb2RlIGFzc2lnbmVkIHRvIHRoaXMgZXJyb3IuXG4gKiBAdGhyb3dzIHtAbGluayBJc0Vycm9yfSBpZiB0aGUgdmFsdWUgaXMgbm90IGEgbnVtYmVyIGluc3RhbmNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNQb3NpdGl2ZUVycm9yKHZhbHVlOiBhbnksIGZpZWxkOiBzdHJpbmcsIGNvZGU/OiBzdHJpbmcpOiB2b2lkIHtcblxuICAgIGlmICghaXNQb3NpdGl2ZSh2YWx1ZSkpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZTogc3RyaW5nID0gYFRoZSBmaWVsZCAke2ZpZWxkfSBzaG91bGQgYmUgcG9zaXRpdmUuICBJdCBpcyBzZXQgdG8gJHt2YWx1ZX0uIGA7XG4gICAgICAgIHRocm93IG5ldyBJc0Vycm9yKFxuICAgICAgICAgICAgbWVzc2FnZSwgXG4gICAgICAgICAgICB2YWx1ZSwgXG4gICAgICAgICAgICBmaWVsZCwgXG4gICAgICAgICAgICBWYWxpZGF0aW9uQ29uc3RyYWludEVudW0uSVNfUE9TSVRJVkUsIFxuICAgICAgICAgICAgVHlwZXMuTlVNQkVSLCBcbiAgICAgICAgICAgIGNvZGUpO1xuICAgIH1cbn1cbiJdfQ==