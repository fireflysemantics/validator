import { IsError } from './IsError';
import { Types } from './types';
import { ValidationConstraintEnum } from './ValidationConstraintEnum';
/**
 * Default options for IsNumber
 */
export var IS_NUMBER_OPTIONS_DEFAULTS = {
    allowNaN: false,
    allowInfinity: true
};
/**
 * Check if a given value is a number.
 *
 * Default `IsNumberOptions` allow
 * `-Infinity, Infinity` but disallow `NaN`.
 *
 * @param target The value being checked.
 * @param options The optional configuration {@link IsNumberOptions}.
 * @return True if the value is a number, false otherwise.
 */
export function isNumber(target, options) {
    if (options === void 0) { options = IS_NUMBER_OPTIONS_DEFAULTS; }
    if (target === Infinity || target === -Infinity) {
        return !!options.allowInfinity;
    }
    if (Number.isNaN(target)) {
        return !!options.allowNaN;
    }
    return Number.isFinite(target);
}
/**
 * Utility method for throwing an error if the {@link isNumber} test fails.
 *
 * @param target The target value being checked
 * @param field The name of the field containing the number
 * @param code Optional nervous system code
 * @param options Optional {@link IsNumberOptions} instance.
 * @throws IsError if the target is not a number
 * @returns false if an {@link IsError} is not thrown
 */
export function isNumberError(target, field, code, options) {
    var o = options ? options : IS_NUMBER_OPTIONS_DEFAULTS;
    if (!isNumber(target)) {
        var message = "The field " + field + " is not a number.  \n             The options used to perform the check were " + JSON.stringify(o) + ".";
        throw new IsError(message, target, field, ValidationConstraintEnum.IS_NUMBER, Types.NUMBER, code);
    }
    return false;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSXNOdW1iZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmlyZWZseXNlbWFudGljcy9pcy8iLCJzb3VyY2VzIjpbImxpYi9Jc051bWJlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sV0FBVyxDQUFBO0FBQ25DLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxTQUFTLENBQUE7QUFDL0IsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sNEJBQTRCLENBQUE7QUFXckU7O0dBRUc7QUFDSCxNQUFNLENBQUMsSUFBTSwwQkFBMEIsR0FBbUI7SUFDckQsUUFBUSxFQUFFLEtBQUs7SUFDZixhQUFhLEVBQUUsSUFBSTtDQUN2QixDQUFBO0FBRUQ7Ozs7Ozs7OztHQVNHO0FBQ0gsTUFBTSxVQUFVLFFBQVEsQ0FBQyxNQUFXLEVBQ2hDLE9BQXFEO0lBQXJELHdCQUFBLEVBQUEsb0NBQXFEO0lBQ3JELElBQUksTUFBTSxLQUFLLFFBQVEsSUFBSSxNQUFNLEtBQUssQ0FBQyxRQUFRLEVBQUU7UUFDL0MsT0FBTyxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQztLQUNoQztJQUVELElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUN4QixPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDO0tBQzNCO0lBQ0QsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2pDLENBQUM7QUFFSDs7Ozs7Ozs7O0dBU0c7QUFDSCxNQUFNLFVBQVUsYUFBYSxDQUFDLE1BQWMsRUFBRSxLQUFhLEVBQUUsSUFBYSxFQUFFLE9BQXdCO0lBQ2hHLElBQU0sQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQywwQkFBMEIsQ0FBQTtJQUV4RCxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFFO1FBQ3JCLElBQU0sT0FBTyxHQUNQLGVBQWEsS0FBSyxxRkFDNEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsTUFBRyxDQUFBO1FBQ3hFLE1BQU0sSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsd0JBQXdCLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxNQUFNLEVBQUcsSUFBSSxDQUFDLENBQUE7S0FDbkc7SUFDRCxPQUFPLEtBQUssQ0FBQTtBQUNoQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSXNFcnJvciB9IGZyb20gJy4vSXNFcnJvcidcbmltcG9ydCB7IFR5cGVzIH0gZnJvbSAnLi90eXBlcydcbmltcG9ydCB7IFZhbGlkYXRpb25Db25zdHJhaW50RW51bSB9IGZyb20gJy4vVmFsaWRhdGlvbkNvbnN0cmFpbnRFbnVtJ1xuXG4vL1RPRE8gLSBUaGlzIHNob3VsZCBwcm9iYWJseSBiZSBtb3ZlZCB0byBAZmlyZWZseXNlbWFudGljcy92YWxpZGF0b3J0c1xuLyoqXG4gKiBJc051bWJlck9wdGlvbnMuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSXNOdW1iZXJPcHRpb25zIHtcbiAgICBhbGxvd05hTj86IGJvb2xlYW47XG4gICAgYWxsb3dJbmZpbml0eT86IGJvb2xlYW47XG59XG5cbi8qKlxuICogRGVmYXVsdCBvcHRpb25zIGZvciBJc051bWJlclxuICovXG5leHBvcnQgY29uc3QgSVNfTlVNQkVSX09QVElPTlNfREVGQVVMVFM6SXNOdW1iZXJPcHRpb25zID0ge1xuICAgICBhbGxvd05hTjogZmFsc2UsIFxuICAgICBhbGxvd0luZmluaXR5OiB0cnVlIFxufVxuXG4vKipcbiAqIENoZWNrIGlmIGEgZ2l2ZW4gdmFsdWUgaXMgYSBudW1iZXIuXG4gKiBcbiAqIERlZmF1bHQgYElzTnVtYmVyT3B0aW9uc2AgYWxsb3cgXG4gKiBgLUluZmluaXR5LCBJbmZpbml0eWAgYnV0IGRpc2FsbG93IGBOYU5gLlxuICogXG4gKiBAcGFyYW0gdGFyZ2V0IFRoZSB2YWx1ZSBiZWluZyBjaGVja2VkLlxuICogQHBhcmFtIG9wdGlvbnMgVGhlIG9wdGlvbmFsIGNvbmZpZ3VyYXRpb24ge0BsaW5rIElzTnVtYmVyT3B0aW9uc30uXG4gKiBAcmV0dXJuIFRydWUgaWYgdGhlIHZhbHVlIGlzIGEgbnVtYmVyLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc051bWJlcih0YXJnZXQ6IGFueSxcbiAgICBvcHRpb25zOiBJc051bWJlck9wdGlvbnMgPSBJU19OVU1CRVJfT1BUSU9OU19ERUZBVUxUUyk6IGJvb2xlYW4ge1xuICAgIGlmICh0YXJnZXQgPT09IEluZmluaXR5IHx8IHRhcmdldCA9PT0gLUluZmluaXR5KSB7XG4gICAgICByZXR1cm4gISFvcHRpb25zLmFsbG93SW5maW5pdHk7XG4gICAgfVxuICBcbiAgICBpZiAoTnVtYmVyLmlzTmFOKHRhcmdldCkpIHtcbiAgICAgIHJldHVybiAhIW9wdGlvbnMuYWxsb3dOYU47XG4gICAgfVxuICAgIHJldHVybiBOdW1iZXIuaXNGaW5pdGUodGFyZ2V0KTtcbiAgfVxuXG4vKipcbiAqIFV0aWxpdHkgbWV0aG9kIGZvciB0aHJvd2luZyBhbiBlcnJvciBpZiB0aGUge0BsaW5rIGlzTnVtYmVyfSB0ZXN0IGZhaWxzLlxuICogXG4gKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgdmFsdWUgYmVpbmcgY2hlY2tlZFxuICogQHBhcmFtIGZpZWxkIFRoZSBuYW1lIG9mIHRoZSBmaWVsZCBjb250YWluaW5nIHRoZSBudW1iZXJcbiAqIEBwYXJhbSBjb2RlIE9wdGlvbmFsIG5lcnZvdXMgc3lzdGVtIGNvZGVcbiAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbmFsIHtAbGluayBJc051bWJlck9wdGlvbnN9IGluc3RhbmNlLlxuICogQHRocm93cyBJc0Vycm9yIGlmIHRoZSB0YXJnZXQgaXMgbm90IGEgbnVtYmVyXG4gKiBAcmV0dXJucyBmYWxzZSBpZiBhbiB7QGxpbmsgSXNFcnJvcn0gaXMgbm90IHRocm93blxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNOdW1iZXJFcnJvcih0YXJnZXQ6IG51bWJlciwgZmllbGQ6IHN0cmluZywgY29kZT86IHN0cmluZywgb3B0aW9ucz86SXNOdW1iZXJPcHRpb25zKTogYm9vbGVhbiB7XG4gICAgY29uc3QgbyA9IG9wdGlvbnMgPyBvcHRpb25zIDogSVNfTlVNQkVSX09QVElPTlNfREVGQVVMVFNcbiAgXG4gICAgaWYgKCFpc051bWJlcih0YXJnZXQpKSB7XG4gICAgICBjb25zdCBtZXNzYWdlOiBzdHJpbmcgPSBcbiAgICAgICAgICAgIGBUaGUgZmllbGQgJHtmaWVsZH0gaXMgbm90IGEgbnVtYmVyLiAgXG4gICAgICAgICAgICAgVGhlIG9wdGlvbnMgdXNlZCB0byBwZXJmb3JtIHRoZSBjaGVjayB3ZXJlICR7SlNPTi5zdHJpbmdpZnkobyl9LmBcbiAgICAgIHRocm93IG5ldyBJc0Vycm9yKG1lc3NhZ2UsIHRhcmdldCwgZmllbGQsIFZhbGlkYXRpb25Db25zdHJhaW50RW51bS5JU19OVU1CRVIsIFR5cGVzLk5VTUJFUiwgIGNvZGUpXG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxufSJdfQ==