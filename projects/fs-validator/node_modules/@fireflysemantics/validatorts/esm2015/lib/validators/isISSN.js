import { assertString } from '../util/assertString';
const issn = '^\\d{4}-?\\d{3}[\\dX]$';
/**
 * Checks whether the `target` string is a valid ISSN
 *
 * @param target The target string
 * @param options The options
 * @return true if the `target` is a valid ISSN, false otherwise
 */
export function isISSN(str, options = {}) {
    assertString(str);
    let testIssn = issn;
    testIssn = options.require_hyphen ? testIssn.replace('?', '') : testIssn;
    testIssn = options.case_sensitive ? new RegExp(testIssn) : new RegExp(testIssn, 'i');
    if (!testIssn.test(str)) {
        return false;
    }
    const digits = str.replace('-', '').toUpperCase();
    let checksum = 0;
    for (let i = 0; i < digits.length; i++) {
        const digit = digits[i];
        checksum += (digit === 'X' ? 10 : +digit) * (8 - i);
    }
    return checksum % 11 === 0;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNJU1NOLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZpcmVmbHlzZW1hbnRpY3MvdmFsaWRhdG9ydHMvIiwic291cmNlcyI6WyJsaWIvdmFsaWRhdG9ycy9pc0lTU04udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRXBELE1BQU0sSUFBSSxHQUFHLHdCQUF3QixDQUFDO0FBRXRDOzs7Ozs7R0FNRztBQUNILE1BQU0sVUFBVSxNQUFNLENBQUMsR0FBRyxFQUFFLFVBQWUsRUFBRTtJQUMzQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbEIsSUFBSSxRQUFRLEdBQVEsSUFBSSxDQUFDO0lBQ3pCLFFBQVEsR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO0lBQ3pFLFFBQVEsR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxNQUFNLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3JGLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ3ZCLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFDRCxNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNsRCxJQUFJLFFBQVEsR0FBRyxDQUFDLENBQUM7SUFDakIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDdEMsTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hCLFFBQVEsSUFBSSxDQUFDLEtBQUssS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztLQUNyRDtJQUNELE9BQU8sUUFBUSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDN0IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzc2VydFN0cmluZyB9IGZyb20gJy4uL3V0aWwvYXNzZXJ0U3RyaW5nJztcblxuY29uc3QgaXNzbiA9ICdeXFxcXGR7NH0tP1xcXFxkezN9W1xcXFxkWF0kJztcblxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciB0aGUgYHRhcmdldGAgc3RyaW5nIGlzIGEgdmFsaWQgSVNTTlxuICogXG4gKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgc3RyaW5nXG4gKiBAcGFyYW0gb3B0aW9ucyBUaGUgb3B0aW9uc1xuICogQHJldHVybiB0cnVlIGlmIHRoZSBgdGFyZ2V0YCBpcyBhIHZhbGlkIElTU04sIGZhbHNlIG90aGVyd2lzZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNJU1NOKHN0ciwgb3B0aW9uczogYW55ID0ge30pIHtcbiAgYXNzZXJ0U3RyaW5nKHN0cik7XG4gIGxldCB0ZXN0SXNzbjogYW55ID0gaXNzbjtcbiAgdGVzdElzc24gPSBvcHRpb25zLnJlcXVpcmVfaHlwaGVuID8gdGVzdElzc24ucmVwbGFjZSgnPycsICcnKSA6IHRlc3RJc3NuO1xuICB0ZXN0SXNzbiA9IG9wdGlvbnMuY2FzZV9zZW5zaXRpdmUgPyBuZXcgUmVnRXhwKHRlc3RJc3NuKSA6IG5ldyBSZWdFeHAodGVzdElzc24sICdpJyk7XG4gIGlmICghdGVzdElzc24udGVzdChzdHIpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGNvbnN0IGRpZ2l0cyA9IHN0ci5yZXBsYWNlKCctJywgJycpLnRvVXBwZXJDYXNlKCk7XG4gIGxldCBjaGVja3N1bSA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZGlnaXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgZGlnaXQgPSBkaWdpdHNbaV07XG4gICAgY2hlY2tzdW0gKz0gKGRpZ2l0ID09PSAnWCcgPyAxMCA6ICtkaWdpdCkgKiAoOCAtIGkpO1xuICB9XG4gIHJldHVybiBjaGVja3N1bSAlIDExID09PSAwO1xufVxuIl19