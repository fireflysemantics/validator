/**
 * The most commonly used EAN standard is
 * the thirteen-digit EAN-13, while the
 * less commonly used 8-digit EAN-8 barcode was
 * introduced for use on small packages.
 * EAN consists of:
 * GS1 prefix, manufacturer code, product code and check digit
 * Reference: https://en.wikipedia.org/wiki/International_Article_Number
 */
import { assertString } from '../util/assertString';
/**
 * Define EAN Lenghts; 8 for EAN-8; 13 for EAN-13
 * and Regular Expression for valid EANs (EAN-8, EAN-13),
 * with exact numberic matching of 8 or 13 digits [0-9]
 */
const LENGTH_EAN_8 = 8;
const validEanRegex = /^(\d{8}|\d{13})$/;
/**
 * Get position weight given:
 * EAN length and digit index/position
 *
 * @param {number} length
 * @param {number} index
 * @return {number}
 */
function getPositionWeightThroughLengthAndIndex(length, index) {
    if (length === LENGTH_EAN_8) {
        return (index % 2 === 0) ? 3 : 1;
    }
    return (index % 2 === 0) ? 1 : 3;
}
/**
 * Calculate EAN Check Digit
 * Reference: https://en.wikipedia.org/wiki/International_Article_Number#Calculation_of_checksum_digit
 *
 * @param {string} ean
 * @return {number}
 */
function calculateCheckDigit(ean) {
    const checksum = ean
        .slice(0, -1)
        .split('')
        .map((char, index) => Number(char) * getPositionWeightThroughLengthAndIndex(ean.length, index))
        .reduce((acc, partialSum) => acc + partialSum, 0);
    const remainder = 10 - (checksum % 10);
    return remainder < 10 ? remainder : 0;
}
/**
 * Check if string is valid EAN:
 * Matches EAN-8/EAN-13 regex
 * Has valid check digit.
 *
 * @param target The target string
 * @return true if the `target` is a valid EAN, false otherwise
 */
export function isEAN(target) {
    assertString(target);
    const actualCheckDigit = Number(target.slice(-1));
    return validEanRegex.test(target) && actualCheckDigit === calculateCheckDigit(target);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNFQU4uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmlyZWZseXNlbWFudGljcy92YWxpZGF0b3J0cy8iLCJzb3VyY2VzIjpbImxpYi92YWxpZGF0b3JzL2lzRUFOLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztHQVFHO0FBRUgsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRXBEOzs7O0dBSUc7QUFDSCxNQUFNLFlBQVksR0FBRyxDQUFDLENBQUM7QUFDdkIsTUFBTSxhQUFhLEdBQUcsa0JBQWtCLENBQUM7QUFHekM7Ozs7Ozs7R0FPRztBQUNILFNBQVMsc0NBQXNDLENBQUMsTUFBTSxFQUFFLEtBQUs7SUFDM0QsSUFBSSxNQUFNLEtBQUssWUFBWSxFQUFFO1FBQzNCLE9BQU8sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNsQztJQUVELE9BQU8sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNuQyxDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsU0FBUyxtQkFBbUIsQ0FBQyxHQUFHO0lBQzlCLE1BQU0sUUFBUSxHQUFHLEdBQUc7U0FDakIsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNaLEtBQUssQ0FBQyxFQUFFLENBQUM7U0FDVCxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsc0NBQXNDLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztTQUM5RixNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQUUsVUFBVSxFQUFFLEVBQUUsQ0FBQyxHQUFHLEdBQUcsVUFBVSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRXBELE1BQU0sU0FBUyxHQUFHLEVBQUUsR0FBRyxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUMsQ0FBQztJQUV2QyxPQUFPLFNBQVMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3hDLENBQUM7QUFFRDs7Ozs7OztHQU9HO0FBQ0YsTUFBTSxVQUFVLEtBQUssQ0FBQyxNQUFjO0lBQ25DLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNyQixNQUFNLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVsRCxPQUFPLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksZ0JBQWdCLEtBQUssbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUM7QUFDeEYsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhlIG1vc3QgY29tbW9ubHkgdXNlZCBFQU4gc3RhbmRhcmQgaXNcbiAqIHRoZSB0aGlydGVlbi1kaWdpdCBFQU4tMTMsIHdoaWxlIHRoZVxuICogbGVzcyBjb21tb25seSB1c2VkIDgtZGlnaXQgRUFOLTggYmFyY29kZSB3YXNcbiAqIGludHJvZHVjZWQgZm9yIHVzZSBvbiBzbWFsbCBwYWNrYWdlcy5cbiAqIEVBTiBjb25zaXN0cyBvZjpcbiAqIEdTMSBwcmVmaXgsIG1hbnVmYWN0dXJlciBjb2RlLCBwcm9kdWN0IGNvZGUgYW5kIGNoZWNrIGRpZ2l0XG4gKiBSZWZlcmVuY2U6IGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0ludGVybmF0aW9uYWxfQXJ0aWNsZV9OdW1iZXJcbiAqL1xuXG5pbXBvcnQgeyBhc3NlcnRTdHJpbmcgfSBmcm9tICcuLi91dGlsL2Fzc2VydFN0cmluZyc7XG5cbi8qKlxuICogRGVmaW5lIEVBTiBMZW5naHRzOyA4IGZvciBFQU4tODsgMTMgZm9yIEVBTi0xM1xuICogYW5kIFJlZ3VsYXIgRXhwcmVzc2lvbiBmb3IgdmFsaWQgRUFOcyAoRUFOLTgsIEVBTi0xMyksXG4gKiB3aXRoIGV4YWN0IG51bWJlcmljIG1hdGNoaW5nIG9mIDggb3IgMTMgZGlnaXRzIFswLTldXG4gKi9cbmNvbnN0IExFTkdUSF9FQU5fOCA9IDg7XG5jb25zdCB2YWxpZEVhblJlZ2V4ID0gL14oXFxkezh9fFxcZHsxM30pJC87XG5cblxuLyoqXG4gKiBHZXQgcG9zaXRpb24gd2VpZ2h0IGdpdmVuOlxuICogRUFOIGxlbmd0aCBhbmQgZGlnaXQgaW5kZXgvcG9zaXRpb25cbiAqXG4gKiBAcGFyYW0ge251bWJlcn0gbGVuZ3RoXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZnVuY3Rpb24gZ2V0UG9zaXRpb25XZWlnaHRUaHJvdWdoTGVuZ3RoQW5kSW5kZXgobGVuZ3RoLCBpbmRleCkge1xuICBpZiAobGVuZ3RoID09PSBMRU5HVEhfRUFOXzgpIHtcbiAgICByZXR1cm4gKGluZGV4ICUgMiA9PT0gMCkgPyAzIDogMTtcbiAgfVxuXG4gIHJldHVybiAoaW5kZXggJSAyID09PSAwKSA/IDEgOiAzO1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZSBFQU4gQ2hlY2sgRGlnaXRcbiAqIFJlZmVyZW5jZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSW50ZXJuYXRpb25hbF9BcnRpY2xlX051bWJlciNDYWxjdWxhdGlvbl9vZl9jaGVja3N1bV9kaWdpdFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBlYW5cbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuZnVuY3Rpb24gY2FsY3VsYXRlQ2hlY2tEaWdpdChlYW4pIHtcbiAgY29uc3QgY2hlY2tzdW0gPSBlYW5cbiAgICAuc2xpY2UoMCwgLTEpXG4gICAgLnNwbGl0KCcnKVxuICAgIC5tYXAoKGNoYXIsIGluZGV4KSA9PiBOdW1iZXIoY2hhcikgKiBnZXRQb3NpdGlvbldlaWdodFRocm91Z2hMZW5ndGhBbmRJbmRleChlYW4ubGVuZ3RoLCBpbmRleCkpXG4gICAgLnJlZHVjZSgoYWNjLCBwYXJ0aWFsU3VtKSA9PiBhY2MgKyBwYXJ0aWFsU3VtLCAwKTtcblxuICBjb25zdCByZW1haW5kZXIgPSAxMCAtIChjaGVja3N1bSAlIDEwKTtcblxuICByZXR1cm4gcmVtYWluZGVyIDwgMTAgPyByZW1haW5kZXIgOiAwO1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHN0cmluZyBpcyB2YWxpZCBFQU46XG4gKiBNYXRjaGVzIEVBTi04L0VBTi0xMyByZWdleFxuICogSGFzIHZhbGlkIGNoZWNrIGRpZ2l0LlxuICogXG4gKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgc3RyaW5nXG4gKiBAcmV0dXJuIHRydWUgaWYgdGhlIGB0YXJnZXRgIGlzIGEgdmFsaWQgRUFOLCBmYWxzZSBvdGhlcndpc2VcbiAqL1xuIGV4cG9ydCBmdW5jdGlvbiBpc0VBTih0YXJnZXQ6IHN0cmluZykge1xuICBhc3NlcnRTdHJpbmcodGFyZ2V0KTtcbiAgY29uc3QgYWN0dWFsQ2hlY2tEaWdpdCA9IE51bWJlcih0YXJnZXQuc2xpY2UoLTEpKTtcblxuICByZXR1cm4gdmFsaWRFYW5SZWdleC50ZXN0KHRhcmdldCkgJiYgYWN0dWFsQ2hlY2tEaWdpdCA9PT0gY2FsY3VsYXRlQ2hlY2tEaWdpdCh0YXJnZXQpO1xufVxuIl19