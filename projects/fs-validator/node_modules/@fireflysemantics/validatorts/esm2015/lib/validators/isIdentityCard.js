import { assertString } from '../util/assertString';
const ɵ0 = (str) => {
    assertString(str);
    const DNI = /^[0-9X-Z][0-9]{7}[TRWAGMYFPDXBNJZSQVHLCKE]$/;
    const charsValue = {
        X: 0,
        Y: 1,
        Z: 2,
    };
    const controlDigits = [
        'T', 'R', 'W', 'A', 'G', 'M', 'Y', 'F', 'P', 'D', 'X', 'B',
        'N', 'J', 'Z', 'S', 'Q', 'V', 'H', 'L', 'C', 'K', 'E',
    ];
    // sanitize user input
    const sanitized = str.trim().toUpperCase();
    // validate the data structure
    if (!DNI.test(sanitized)) {
        return false;
    }
    // validate the control digit
    const number = sanitized.slice(0, -1).replace(/[X,Y,Z]/g, char => charsValue[char]);
    return sanitized.endsWith(controlDigits[number % 23]);
}, ɵ1 = (str) => {
    const DNI = /^\d{9}$/;
    // sanitize user input
    const sanitized = str.trim();
    // validate the data structure
    if (!DNI.test(sanitized)) {
        return false;
    }
    const id = sanitized;
    let sum = 0, incNum;
    for (let i = 0; i < id.length; i++) {
        incNum = Number(id[i]) * ((i % 2) + 1); // Multiply number by 1 or 2
        sum += incNum > 9 ? incNum - 9 : incNum; // Sum the digits up and add to total
    }
    return sum % 10 === 0;
}, ɵ2 = (str) => {
    const ALPHABET_CODES = {
        A: 10,
        B: 11,
        C: 12,
        D: 13,
        E: 14,
        F: 15,
        G: 16,
        H: 17,
        I: 34,
        J: 18,
        K: 19,
        L: 20,
        M: 21,
        N: 22,
        O: 35,
        P: 23,
        Q: 24,
        R: 25,
        S: 26,
        T: 27,
        U: 28,
        V: 29,
        W: 32,
        X: 30,
        Y: 31,
        Z: 33,
    };
    const sanitized = str.trim().toUpperCase();
    if (!/^[A-Z][0-9]{9}$/.test(sanitized))
        return false;
    return Array.from(sanitized).reduce((sum, num, index) => {
        if (index === 0) {
            const code = ALPHABET_CODES[num];
            return ((code % 10) * 9) + Math.floor(code / 10);
        }
        if (index === 9) {
            return ((10 - (sum % 10)) - Number(num)) % 10 === 0;
        }
        return sum + (Number(num) * (9 - index));
    }, 0);
};
const validators = {
    ES: ɵ0,
    'he-IL': ɵ1,
    'zh-TW': ɵ2,
};
/**
 * Check if the string is an identity card
 * @param target The target string
 * @param arg The arg
 */
export function isIdentityCard(target, arg) {
    assertString(target);
    if (arg in validators) {
        return validators[arg](target);
    }
    else if (arg === 'any') {
        for (const key in validators) {
            // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes
            // istanbul ignore else
            if (validators.hasOwnProperty(key)) {
                const validator = validators[key];
                if (validator(target)) {
                    return true;
                }
            }
        }
        return false;
    }
    throw new Error(`Invalid locale '${arg}'`);
}
export { ɵ0, ɵ1, ɵ2 };
//# sourceMappingURL=data:application/json;base64,