import { merge } from '../util/merge';
import { assertString } from '../util/assertString';
import { includes } from '../util/includes';
import { decimal } from './alpha';
function decimalRegExp(options) {
    const regExp = new RegExp(`^[-+]?([0-9]+)?(\\${decimal[options.locale]}[0-9]{${options.decimal_digits}})${options.force_decimal ? '' : '?'}$`);
    return regExp;
}
/**
 * The default options
 */
const default_decimal_options = {
    force_decimal: false,
    decimal_digits: '1,',
    locale: 'en-US',
};
const blacklist = ['', '-', '+'];
/**
 * Checks whether the `target` string is a decimal
 *
 * @param target The target string
 * @param options The options
 * @return true if the `target` is a decimal, false otherwise
 */
export function isDecimal(target, options) {
    assertString(target);
    options = merge(options, default_decimal_options);
    if (options.locale in decimal) {
        return !includes(blacklist, target.replace(/ /g, '')) && decimalRegExp(options).test(target);
    }
    throw new Error(`Invalid locale '${options.locale}'`);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNEZWNpbWFsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZpcmVmbHlzZW1hbnRpY3MvdmFsaWRhdG9ydHMvIiwic291cmNlcyI6WyJsaWIvdmFsaWRhdG9ycy9pc0RlY2ltYWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN0QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDcEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQzVDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFbEMsU0FBUyxhQUFhLENBQUMsT0FBTztJQUM1QixNQUFNLE1BQU0sR0FBRyxJQUFJLE1BQU0sQ0FBQyxxQkFBcUIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsU0FBUyxPQUFPLENBQUMsY0FBYyxLQUFLLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUMvSSxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLHVCQUF1QixHQUFHO0lBQzlCLGFBQWEsRUFBRSxLQUFLO0lBQ3BCLGNBQWMsRUFBRSxJQUFJO0lBQ3BCLE1BQU0sRUFBRSxPQUFPO0NBQ2hCLENBQUM7QUFFRixNQUFNLFNBQVMsR0FBRyxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFFakM7Ozs7OztHQU1HO0FBQ0gsTUFBTSxVQUFVLFNBQVMsQ0FBQyxNQUFjLEVBQUUsT0FBTztJQUMvQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDckIsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLEVBQUUsdUJBQXVCLENBQUMsQ0FBQztJQUNsRCxJQUFJLE9BQU8sQ0FBQyxNQUFNLElBQUksT0FBTyxFQUFFO1FBQzdCLE9BQU8sQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztLQUM5RjtJQUNELE1BQU0sSUFBSSxLQUFLLENBQUMsbUJBQW1CLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0FBQ3hELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtZXJnZSB9IGZyb20gJy4uL3V0aWwvbWVyZ2UnO1xuaW1wb3J0IHsgYXNzZXJ0U3RyaW5nIH0gZnJvbSAnLi4vdXRpbC9hc3NlcnRTdHJpbmcnO1xuaW1wb3J0IHsgaW5jbHVkZXMgfSBmcm9tICcuLi91dGlsL2luY2x1ZGVzJztcbmltcG9ydCB7IGRlY2ltYWwgfSBmcm9tICcuL2FscGhhJztcblxuZnVuY3Rpb24gZGVjaW1hbFJlZ0V4cChvcHRpb25zKSB7XG4gIGNvbnN0IHJlZ0V4cCA9IG5ldyBSZWdFeHAoYF5bLStdPyhbMC05XSspPyhcXFxcJHtkZWNpbWFsW29wdGlvbnMubG9jYWxlXX1bMC05XXske29wdGlvbnMuZGVjaW1hbF9kaWdpdHN9fSkke29wdGlvbnMuZm9yY2VfZGVjaW1hbCA/ICcnIDogJz8nfSRgKTtcbiAgcmV0dXJuIHJlZ0V4cDtcbn1cblxuLyoqXG4gKiBUaGUgZGVmYXVsdCBvcHRpb25zXG4gKi9cbmNvbnN0IGRlZmF1bHRfZGVjaW1hbF9vcHRpb25zID0ge1xuICBmb3JjZV9kZWNpbWFsOiBmYWxzZSxcbiAgZGVjaW1hbF9kaWdpdHM6ICcxLCcsXG4gIGxvY2FsZTogJ2VuLVVTJyxcbn07XG5cbmNvbnN0IGJsYWNrbGlzdCA9IFsnJywgJy0nLCAnKyddO1xuXG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIHRoZSBgdGFyZ2V0YCBzdHJpbmcgaXMgYSBkZWNpbWFsXG4gKiBcbiAqIEBwYXJhbSB0YXJnZXQgVGhlIHRhcmdldCBzdHJpbmdcbiAqIEBwYXJhbSBvcHRpb25zIFRoZSBvcHRpb25zXG4gKiBAcmV0dXJuIHRydWUgaWYgdGhlIGB0YXJnZXRgIGlzIGEgZGVjaW1hbCwgZmFsc2Ugb3RoZXJ3aXNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0RlY2ltYWwodGFyZ2V0OiBzdHJpbmcsIG9wdGlvbnMpIHtcbiAgYXNzZXJ0U3RyaW5nKHRhcmdldCk7XG4gIG9wdGlvbnMgPSBtZXJnZShvcHRpb25zLCBkZWZhdWx0X2RlY2ltYWxfb3B0aW9ucyk7XG4gIGlmIChvcHRpb25zLmxvY2FsZSBpbiBkZWNpbWFsKSB7XG4gICAgcmV0dXJuICFpbmNsdWRlcyhibGFja2xpc3QsIHRhcmdldC5yZXBsYWNlKC8gL2csICcnKSkgJiYgZGVjaW1hbFJlZ0V4cChvcHRpb25zKS50ZXN0KHRhcmdldCk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGxvY2FsZSAnJHtvcHRpb25zLmxvY2FsZX0nYCk7XG59XG4iXX0=