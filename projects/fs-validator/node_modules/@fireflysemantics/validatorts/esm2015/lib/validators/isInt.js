import { assertString } from '../util/assertString';
const int = /^(?:[-+]?(?:0|[1-9][0-9]*))$/;
const intLeadingZeroes = /^[-+]?[0-9]+$/;
/**
 * Checks whether the `target` string is an int
 *
 * @param target The target string
 * @param options The options
 * @return true if the `target` is an int, false otherwise
 */
export function isInt(str, options) {
    assertString(str);
    options = options || {};
    // Get the regex to use for testing, based on whether
    // leading zeroes are allowed or not.
    let regex = (options.hasOwnProperty('allow_leading_zeroes') && !options.allow_leading_zeroes ?
        int : intLeadingZeroes);
    // Check min/max/lt/gt
    let minCheckPassed = (!options.hasOwnProperty('min') || str >= options.min);
    let maxCheckPassed = (!options.hasOwnProperty('max') || str <= options.max);
    let ltCheckPassed = (!options.hasOwnProperty('lt') || str < options.lt);
    let gtCheckPassed = (!options.hasOwnProperty('gt') || str > options.gt);
    return regex.test(str) && minCheckPassed && maxCheckPassed && ltCheckPassed && gtCheckPassed;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNJbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmlyZWZseXNlbWFudGljcy92YWxpZGF0b3J0cy8iLCJzb3VyY2VzIjpbImxpYi92YWxpZGF0b3JzL2lzSW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUVwRCxNQUFNLEdBQUcsR0FBRyw4QkFBOEIsQ0FBQztBQUMzQyxNQUFNLGdCQUFnQixHQUFHLGVBQWUsQ0FBQztBQUV6Qzs7Ozs7O0dBTUc7QUFDSCxNQUFNLFVBQVUsS0FBSyxDQUFDLEdBQVcsRUFBRSxPQUFPO0lBQ3hDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNsQixPQUFPLEdBQUcsT0FBTyxJQUFJLEVBQUUsQ0FBQztJQUV4QixxREFBcUQ7SUFDckQscUNBQXFDO0lBQ3JDLElBQUksS0FBSyxHQUFHLENBQ1YsT0FBTyxDQUFDLGNBQWMsQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDL0UsR0FBRyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FDekIsQ0FBQztJQUVGLHNCQUFzQjtJQUN0QixJQUFJLGNBQWMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzVFLElBQUksY0FBYyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDNUUsSUFBSSxhQUFhLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUN4RSxJQUFJLGFBQWEsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBRXhFLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxjQUFjLElBQUksY0FBYyxJQUFJLGFBQWEsSUFBSSxhQUFhLENBQUM7QUFDL0YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzc2VydFN0cmluZyB9IGZyb20gJy4uL3V0aWwvYXNzZXJ0U3RyaW5nJztcblxuY29uc3QgaW50ID0gL14oPzpbLStdPyg/OjB8WzEtOV1bMC05XSopKSQvO1xuY29uc3QgaW50TGVhZGluZ1plcm9lcyA9IC9eWy0rXT9bMC05XSskLztcblxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciB0aGUgYHRhcmdldGAgc3RyaW5nIGlzIGFuIGludFxuICogXG4gKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgc3RyaW5nXG4gKiBAcGFyYW0gb3B0aW9ucyBUaGUgb3B0aW9uc1xuICogQHJldHVybiB0cnVlIGlmIHRoZSBgdGFyZ2V0YCBpcyBhbiBpbnQsIGZhbHNlIG90aGVyd2lzZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNJbnQoc3RyOiBzdHJpbmcsIG9wdGlvbnMpIHtcbiAgYXNzZXJ0U3RyaW5nKHN0cik7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIEdldCB0aGUgcmVnZXggdG8gdXNlIGZvciB0ZXN0aW5nLCBiYXNlZCBvbiB3aGV0aGVyXG4gIC8vIGxlYWRpbmcgemVyb2VzIGFyZSBhbGxvd2VkIG9yIG5vdC5cbiAgbGV0IHJlZ2V4ID0gKFxuICAgIG9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2FsbG93X2xlYWRpbmdfemVyb2VzJykgJiYgIW9wdGlvbnMuYWxsb3dfbGVhZGluZ196ZXJvZXMgP1xuICAgICAgaW50IDogaW50TGVhZGluZ1plcm9lc1xuICApO1xuXG4gIC8vIENoZWNrIG1pbi9tYXgvbHQvZ3RcbiAgbGV0IG1pbkNoZWNrUGFzc2VkID0gKCFvcHRpb25zLmhhc093blByb3BlcnR5KCdtaW4nKSB8fCBzdHIgPj0gb3B0aW9ucy5taW4pO1xuICBsZXQgbWF4Q2hlY2tQYXNzZWQgPSAoIW9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ21heCcpIHx8IHN0ciA8PSBvcHRpb25zLm1heCk7XG4gIGxldCBsdENoZWNrUGFzc2VkID0gKCFvcHRpb25zLmhhc093blByb3BlcnR5KCdsdCcpIHx8IHN0ciA8IG9wdGlvbnMubHQpO1xuICBsZXQgZ3RDaGVja1Bhc3NlZCA9ICghb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnZ3QnKSB8fCBzdHIgPiBvcHRpb25zLmd0KTtcblxuICByZXR1cm4gcmVnZXgudGVzdChzdHIpICYmIG1pbkNoZWNrUGFzc2VkICYmIG1heENoZWNrUGFzc2VkICYmIGx0Q2hlY2tQYXNzZWQgJiYgZ3RDaGVja1Bhc3NlZDtcbn1cbiJdfQ==