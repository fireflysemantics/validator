import { assertString } from '../util/assertString';
/* Based on https://tools.ietf.org/html/rfc3339#section-5.6 */
const dateFullYear = /[0-9]{4}/;
const dateMonth = /(0[1-9]|1[0-2])/;
const dateMDay = /([12]\d|0[1-9]|3[01])/;
const timeHour = /([01][0-9]|2[0-3])/;
const timeMinute = /[0-5][0-9]/;
const timeSecond = /([0-5][0-9]|60)/;
const timeSecFrac = /(\.[0-9]+)?/;
const timeNumOffset = new RegExp(`[-+]${timeHour.source}:${timeMinute.source}`);
const timeOffset = new RegExp(`([zZ]|${timeNumOffset.source})`);
const partialTime = new RegExp(`${timeHour.source}:${timeMinute.source}:${timeSecond.source}${timeSecFrac.source}`);
const fullDate = new RegExp(`${dateFullYear.source}-${dateMonth.source}-${dateMDay.source}`);
const fullTime = new RegExp(`${partialTime.source}${timeOffset.source}`);
const rfc3339 = new RegExp(`${fullDate.source}[ tT]${fullTime.source}`);
/**
 * Check if `target` is a valid RFC3339 timestamp
 *
 * @param target The time stamp
 * @return true if the `target` is a valid RFC3339 timestamp, false otherwise
 *
 * @example
```
const isRFC3339:boolean = isRFC3339('2002-10-02T15:00:00Z')
```
 */
export function isRFC3339(target) {
    assertString(target);
    return rfc3339.test(target);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNSRkMzMzM5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZpcmVmbHlzZW1hbnRpY3MvdmFsaWRhdG9ydHMvIiwic291cmNlcyI6WyJsaWIvdmFsaWRhdG9ycy9pc1JGQzMzMzkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRXBELDhEQUE4RDtBQUU5RCxNQUFNLFlBQVksR0FBRyxVQUFVLENBQUM7QUFDaEMsTUFBTSxTQUFTLEdBQUcsaUJBQWlCLENBQUM7QUFDcEMsTUFBTSxRQUFRLEdBQUcsdUJBQXVCLENBQUM7QUFFekMsTUFBTSxRQUFRLEdBQUcsb0JBQW9CLENBQUM7QUFDdEMsTUFBTSxVQUFVLEdBQUcsWUFBWSxDQUFDO0FBQ2hDLE1BQU0sVUFBVSxHQUFHLGlCQUFpQixDQUFDO0FBRXJDLE1BQU0sV0FBVyxHQUFHLGFBQWEsQ0FBQztBQUNsQyxNQUFNLGFBQWEsR0FBRyxJQUFJLE1BQU0sQ0FBQyxPQUFPLFFBQVEsQ0FBQyxNQUFNLElBQUksVUFBVSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7QUFDaEYsTUFBTSxVQUFVLEdBQUcsSUFBSSxNQUFNLENBQUMsU0FBUyxhQUFhLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztBQUVoRSxNQUFNLFdBQVcsR0FBRyxJQUFJLE1BQU0sQ0FBQyxHQUFHLFFBQVEsQ0FBQyxNQUFNLElBQUksVUFBVSxDQUFDLE1BQU0sSUFBSSxVQUFVLENBQUMsTUFBTSxHQUFHLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0FBRXBILE1BQU0sUUFBUSxHQUFHLElBQUksTUFBTSxDQUFDLEdBQUcsWUFBWSxDQUFDLE1BQU0sSUFBSSxTQUFTLENBQUMsTUFBTSxJQUFJLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0FBQzdGLE1BQU0sUUFBUSxHQUFHLElBQUksTUFBTSxDQUFDLEdBQUcsV0FBVyxDQUFDLE1BQU0sR0FBRyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztBQUV6RSxNQUFNLE9BQU8sR0FBRyxJQUFJLE1BQU0sQ0FBQyxHQUFHLFFBQVEsQ0FBQyxNQUFNLFFBQVEsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7QUFFeEU7Ozs7Ozs7Ozs7R0FVRztBQUNILE1BQU0sVUFBVSxTQUFTLENBQUMsTUFBYTtJQUNyQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDckIsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzlCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3NlcnRTdHJpbmcgfSBmcm9tICcuLi91dGlsL2Fzc2VydFN0cmluZyc7XG5cbi8qIEJhc2VkIG9uIGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmMzMzM5I3NlY3Rpb24tNS42ICovXG5cbmNvbnN0IGRhdGVGdWxsWWVhciA9IC9bMC05XXs0fS87XG5jb25zdCBkYXRlTW9udGggPSAvKDBbMS05XXwxWzAtMl0pLztcbmNvbnN0IGRhdGVNRGF5ID0gLyhbMTJdXFxkfDBbMS05XXwzWzAxXSkvO1xuXG5jb25zdCB0aW1lSG91ciA9IC8oWzAxXVswLTldfDJbMC0zXSkvO1xuY29uc3QgdGltZU1pbnV0ZSA9IC9bMC01XVswLTldLztcbmNvbnN0IHRpbWVTZWNvbmQgPSAvKFswLTVdWzAtOV18NjApLztcblxuY29uc3QgdGltZVNlY0ZyYWMgPSAvKFxcLlswLTldKyk/LztcbmNvbnN0IHRpbWVOdW1PZmZzZXQgPSBuZXcgUmVnRXhwKGBbLStdJHt0aW1lSG91ci5zb3VyY2V9OiR7dGltZU1pbnV0ZS5zb3VyY2V9YCk7XG5jb25zdCB0aW1lT2Zmc2V0ID0gbmV3IFJlZ0V4cChgKFt6Wl18JHt0aW1lTnVtT2Zmc2V0LnNvdXJjZX0pYCk7XG5cbmNvbnN0IHBhcnRpYWxUaW1lID0gbmV3IFJlZ0V4cChgJHt0aW1lSG91ci5zb3VyY2V9OiR7dGltZU1pbnV0ZS5zb3VyY2V9OiR7dGltZVNlY29uZC5zb3VyY2V9JHt0aW1lU2VjRnJhYy5zb3VyY2V9YCk7XG5cbmNvbnN0IGZ1bGxEYXRlID0gbmV3IFJlZ0V4cChgJHtkYXRlRnVsbFllYXIuc291cmNlfS0ke2RhdGVNb250aC5zb3VyY2V9LSR7ZGF0ZU1EYXkuc291cmNlfWApO1xuY29uc3QgZnVsbFRpbWUgPSBuZXcgUmVnRXhwKGAke3BhcnRpYWxUaW1lLnNvdXJjZX0ke3RpbWVPZmZzZXQuc291cmNlfWApO1xuXG5jb25zdCByZmMzMzM5ID0gbmV3IFJlZ0V4cChgJHtmdWxsRGF0ZS5zb3VyY2V9WyB0VF0ke2Z1bGxUaW1lLnNvdXJjZX1gKTtcblxuLyoqXG4gKiBDaGVjayBpZiBgdGFyZ2V0YCBpcyBhIHZhbGlkIFJGQzMzMzkgdGltZXN0YW1wXG4gKlxuICogQHBhcmFtIHRhcmdldCBUaGUgdGltZSBzdGFtcFxuICogQHJldHVybiB0cnVlIGlmIHRoZSBgdGFyZ2V0YCBpcyBhIHZhbGlkIFJGQzMzMzkgdGltZXN0YW1wLCBmYWxzZSBvdGhlcndpc2VcbiAqIFxuICogQGV4YW1wbGVcbmBgYFxuY29uc3QgaXNSRkMzMzM5OmJvb2xlYW4gPSBpc1JGQzMzMzkoJzIwMDItMTAtMDJUMTU6MDA6MDBaJylcbmBgYFxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNSRkMzMzM5KHRhcmdldDpzdHJpbmcpIHtcbiAgYXNzZXJ0U3RyaW5nKHRhcmdldCk7XG4gIHJldHVybiByZmMzMzM5LnRlc3QodGFyZ2V0KTtcbn1cbiJdfQ==