import { assertString } from '../util/assertString';
// common patterns
const threeDigit = /^\d{3}$/;
const fourDigit = /^\d{4}$/;
const fiveDigit = /^\d{5}$/;
const sixDigit = /^\d{6}$/;
const patterns = {
    AD: /^AD\d{3}$/,
    AT: fourDigit,
    AU: fourDigit,
    BE: fourDigit,
    BG: fourDigit,
    BR: /^\d{5}-\d{3}$/,
    CA: /^[ABCEGHJKLMNPRSTVXY]\d[ABCEGHJ-NPRSTV-Z][\s\-]?\d[ABCEGHJ-NPRSTV-Z]\d$/i,
    CH: fourDigit,
    CZ: /^\d{3}\s?\d{2}$/,
    DE: fiveDigit,
    DK: fourDigit,
    DZ: fiveDigit,
    EE: fiveDigit,
    ES: fiveDigit,
    FI: fiveDigit,
    FR: /^\d{2}\s?\d{3}$/,
    GB: /^(gir\s?0aa|[a-z]{1,2}\d[\da-z]?\s?(\d[a-z]{2})?)$/i,
    GR: /^\d{3}\s?\d{2}$/,
    HR: /^([1-5]\d{4}$)/,
    HU: fourDigit,
    ID: fiveDigit,
    IE: /^(?!.*(?:o))[A-z]\d[\dw]\s\w{4}$/i,
    IL: fiveDigit,
    IN: /^((?!10|29|35|54|55|65|66|86|87|88|89)[1-9][0-9]{5})$/,
    IS: threeDigit,
    IT: fiveDigit,
    JP: /^\d{3}\-\d{4}$/,
    KE: fiveDigit,
    LI: /^(948[5-9]|949[0-7])$/,
    LT: /^LT\-\d{5}$/,
    LU: fourDigit,
    LV: /^LV\-\d{4}$/,
    MX: fiveDigit,
    MT: /^[A-Za-z]{3}\s{0,1}\d{4}$/,
    NL: /^\d{4}\s?[a-z]{2}$/i,
    NO: fourDigit,
    NZ: fourDigit,
    PL: /^\d{2}\-\d{3}$/,
    PR: /^00[679]\d{2}([ -]\d{4})?$/,
    PT: /^\d{4}\-\d{3}?$/,
    RO: sixDigit,
    RU: sixDigit,
    SA: fiveDigit,
    SE: /^[1-9]\d{2}\s?\d{2}$/,
    SI: fourDigit,
    SK: /^\d{3}\s?\d{2}$/,
    TN: fourDigit,
    TW: /^\d{3}(\d{2})?$/,
    UA: fiveDigit,
    US: /^\d{5}(-\d{4})?$/,
    ZA: fourDigit,
    ZM: fiveDigit,
};
export const postalCodeLocales = Object.keys(patterns);
/**
 * Checks whether the `target` string is a valid postal code
 *
 * @param target The target string
 * @param arg The locale
 * @return true if the `target` is a valid postal code, false otherwise
 */
export function isPostalCode(target, arg) {
    assertString(target);
    if (arg in patterns) {
        return patterns[arg].test(target);
    }
    else if (arg === 'any') {
        for (const key in patterns) {
            // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes
            // istanbul ignore else
            if (patterns.hasOwnProperty(key)) {
                const pattern = patterns[key];
                if (pattern.test(target)) {
                    return true;
                }
            }
        }
        return false;
    }
    throw new Error(`Invalid locale '${arg}'`);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNQb3N0YWxDb2RlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZpcmVmbHlzZW1hbnRpY3MvdmFsaWRhdG9ydHMvIiwic291cmNlcyI6WyJsaWIvdmFsaWRhdG9ycy9pc1Bvc3RhbENvZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRXBELGtCQUFrQjtBQUNsQixNQUFNLFVBQVUsR0FBRyxTQUFTLENBQUM7QUFDN0IsTUFBTSxTQUFTLEdBQUcsU0FBUyxDQUFDO0FBQzVCLE1BQU0sU0FBUyxHQUFHLFNBQVMsQ0FBQztBQUM1QixNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUM7QUFFM0IsTUFBTSxRQUFRLEdBQUc7SUFDZixFQUFFLEVBQUUsV0FBVztJQUNmLEVBQUUsRUFBRSxTQUFTO0lBQ2IsRUFBRSxFQUFFLFNBQVM7SUFDYixFQUFFLEVBQUUsU0FBUztJQUNiLEVBQUUsRUFBRSxTQUFTO0lBQ2IsRUFBRSxFQUFFLGVBQWU7SUFDbkIsRUFBRSxFQUFFLDBFQUEwRTtJQUM5RSxFQUFFLEVBQUUsU0FBUztJQUNiLEVBQUUsRUFBRSxpQkFBaUI7SUFDckIsRUFBRSxFQUFFLFNBQVM7SUFDYixFQUFFLEVBQUUsU0FBUztJQUNiLEVBQUUsRUFBRSxTQUFTO0lBQ2IsRUFBRSxFQUFFLFNBQVM7SUFDYixFQUFFLEVBQUUsU0FBUztJQUNiLEVBQUUsRUFBRSxTQUFTO0lBQ2IsRUFBRSxFQUFFLGlCQUFpQjtJQUNyQixFQUFFLEVBQUUscURBQXFEO0lBQ3pELEVBQUUsRUFBRSxpQkFBaUI7SUFDckIsRUFBRSxFQUFFLGdCQUFnQjtJQUNwQixFQUFFLEVBQUUsU0FBUztJQUNiLEVBQUUsRUFBRSxTQUFTO0lBQ2IsRUFBRSxFQUFFLG1DQUFtQztJQUN2QyxFQUFFLEVBQUUsU0FBUztJQUNiLEVBQUUsRUFBRSx1REFBdUQ7SUFDM0QsRUFBRSxFQUFFLFVBQVU7SUFDZCxFQUFFLEVBQUUsU0FBUztJQUNiLEVBQUUsRUFBRSxnQkFBZ0I7SUFDcEIsRUFBRSxFQUFFLFNBQVM7SUFDYixFQUFFLEVBQUUsdUJBQXVCO0lBQzNCLEVBQUUsRUFBRSxhQUFhO0lBQ2pCLEVBQUUsRUFBRSxTQUFTO0lBQ2IsRUFBRSxFQUFFLGFBQWE7SUFDakIsRUFBRSxFQUFFLFNBQVM7SUFDYixFQUFFLEVBQUUsMkJBQTJCO0lBQy9CLEVBQUUsRUFBRSxxQkFBcUI7SUFDekIsRUFBRSxFQUFFLFNBQVM7SUFDYixFQUFFLEVBQUUsU0FBUztJQUNiLEVBQUUsRUFBRSxnQkFBZ0I7SUFDcEIsRUFBRSxFQUFFLDRCQUE0QjtJQUNoQyxFQUFFLEVBQUUsaUJBQWlCO0lBQ3JCLEVBQUUsRUFBRSxRQUFRO0lBQ1osRUFBRSxFQUFFLFFBQVE7SUFDWixFQUFFLEVBQUUsU0FBUztJQUNiLEVBQUUsRUFBRSxzQkFBc0I7SUFDMUIsRUFBRSxFQUFFLFNBQVM7SUFDYixFQUFFLEVBQUUsaUJBQWlCO0lBQ3JCLEVBQUUsRUFBRSxTQUFTO0lBQ2IsRUFBRSxFQUFFLGlCQUFpQjtJQUNyQixFQUFFLEVBQUUsU0FBUztJQUNiLEVBQUUsRUFBRSxrQkFBa0I7SUFDdEIsRUFBRSxFQUFFLFNBQVM7SUFDYixFQUFFLEVBQUUsU0FBUztDQUNkLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBRXZEOzs7Ozs7R0FNRztBQUNILE1BQU0sVUFBVSxZQUFZLENBQUMsTUFBYSxFQUFFLEdBQVU7SUFDcEQsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3JCLElBQUksR0FBRyxJQUFJLFFBQVEsRUFBRTtRQUNuQixPQUFPLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDbkM7U0FBTSxJQUFJLEdBQUcsS0FBSyxLQUFLLEVBQUU7UUFDeEIsS0FBSyxNQUFNLEdBQUcsSUFBSSxRQUFRLEVBQUU7WUFDMUIsdUhBQXVIO1lBQ3ZILHVCQUF1QjtZQUN2QixJQUFJLFFBQVEsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ2hDLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDOUIsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO29CQUN4QixPQUFPLElBQUksQ0FBQztpQkFDYjthQUNGO1NBQ0Y7UUFDRCxPQUFPLEtBQUssQ0FBQztLQUNkO0lBQ0QsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsR0FBRyxHQUFHLENBQUMsQ0FBQztBQUM3QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXNzZXJ0U3RyaW5nIH0gZnJvbSAnLi4vdXRpbC9hc3NlcnRTdHJpbmcnO1xuXG4vLyBjb21tb24gcGF0dGVybnNcbmNvbnN0IHRocmVlRGlnaXQgPSAvXlxcZHszfSQvO1xuY29uc3QgZm91ckRpZ2l0ID0gL15cXGR7NH0kLztcbmNvbnN0IGZpdmVEaWdpdCA9IC9eXFxkezV9JC87XG5jb25zdCBzaXhEaWdpdCA9IC9eXFxkezZ9JC87XG5cbmNvbnN0IHBhdHRlcm5zID0ge1xuICBBRDogL15BRFxcZHszfSQvLFxuICBBVDogZm91ckRpZ2l0LFxuICBBVTogZm91ckRpZ2l0LFxuICBCRTogZm91ckRpZ2l0LFxuICBCRzogZm91ckRpZ2l0LFxuICBCUjogL15cXGR7NX0tXFxkezN9JC8sXG4gIENBOiAvXltBQkNFR0hKS0xNTlBSU1RWWFldXFxkW0FCQ0VHSEotTlBSU1RWLVpdW1xcc1xcLV0/XFxkW0FCQ0VHSEotTlBSU1RWLVpdXFxkJC9pLFxuICBDSDogZm91ckRpZ2l0LFxuICBDWjogL15cXGR7M31cXHM/XFxkezJ9JC8sXG4gIERFOiBmaXZlRGlnaXQsXG4gIERLOiBmb3VyRGlnaXQsXG4gIERaOiBmaXZlRGlnaXQsXG4gIEVFOiBmaXZlRGlnaXQsXG4gIEVTOiBmaXZlRGlnaXQsXG4gIEZJOiBmaXZlRGlnaXQsXG4gIEZSOiAvXlxcZHsyfVxccz9cXGR7M30kLyxcbiAgR0I6IC9eKGdpclxccz8wYWF8W2Etel17MSwyfVxcZFtcXGRhLXpdP1xccz8oXFxkW2Etel17Mn0pPykkL2ksXG4gIEdSOiAvXlxcZHszfVxccz9cXGR7Mn0kLyxcbiAgSFI6IC9eKFsxLTVdXFxkezR9JCkvLFxuICBIVTogZm91ckRpZ2l0LFxuICBJRDogZml2ZURpZ2l0LFxuICBJRTogL14oPyEuKig/Om8pKVtBLXpdXFxkW1xcZHddXFxzXFx3ezR9JC9pLFxuICBJTDogZml2ZURpZ2l0LFxuICBJTjogL14oKD8hMTB8Mjl8MzV8NTR8NTV8NjV8NjZ8ODZ8ODd8ODh8ODkpWzEtOV1bMC05XXs1fSkkLyxcbiAgSVM6IHRocmVlRGlnaXQsXG4gIElUOiBmaXZlRGlnaXQsXG4gIEpQOiAvXlxcZHszfVxcLVxcZHs0fSQvLFxuICBLRTogZml2ZURpZ2l0LFxuICBMSTogL14oOTQ4WzUtOV18OTQ5WzAtN10pJC8sXG4gIExUOiAvXkxUXFwtXFxkezV9JC8sXG4gIExVOiBmb3VyRGlnaXQsXG4gIExWOiAvXkxWXFwtXFxkezR9JC8sXG4gIE1YOiBmaXZlRGlnaXQsXG4gIE1UOiAvXltBLVphLXpdezN9XFxzezAsMX1cXGR7NH0kLyxcbiAgTkw6IC9eXFxkezR9XFxzP1thLXpdezJ9JC9pLFxuICBOTzogZm91ckRpZ2l0LFxuICBOWjogZm91ckRpZ2l0LFxuICBQTDogL15cXGR7Mn1cXC1cXGR7M30kLyxcbiAgUFI6IC9eMDBbNjc5XVxcZHsyfShbIC1dXFxkezR9KT8kLyxcbiAgUFQ6IC9eXFxkezR9XFwtXFxkezN9PyQvLFxuICBSTzogc2l4RGlnaXQsXG4gIFJVOiBzaXhEaWdpdCxcbiAgU0E6IGZpdmVEaWdpdCxcbiAgU0U6IC9eWzEtOV1cXGR7Mn1cXHM/XFxkezJ9JC8sXG4gIFNJOiBmb3VyRGlnaXQsXG4gIFNLOiAvXlxcZHszfVxccz9cXGR7Mn0kLyxcbiAgVE46IGZvdXJEaWdpdCxcbiAgVFc6IC9eXFxkezN9KFxcZHsyfSk/JC8sXG4gIFVBOiBmaXZlRGlnaXQsXG4gIFVTOiAvXlxcZHs1fSgtXFxkezR9KT8kLyxcbiAgWkE6IGZvdXJEaWdpdCxcbiAgWk06IGZpdmVEaWdpdCxcbn07XG5cbmV4cG9ydCBjb25zdCBwb3N0YWxDb2RlTG9jYWxlcyA9IE9iamVjdC5rZXlzKHBhdHRlcm5zKTtcblxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciB0aGUgYHRhcmdldGAgc3RyaW5nIGlzIGEgdmFsaWQgcG9zdGFsIGNvZGVcbiAqIFxuICogQHBhcmFtIHRhcmdldCBUaGUgdGFyZ2V0IHN0cmluZ1xuICogQHBhcmFtIGFyZyBUaGUgbG9jYWxlXG4gKiBAcmV0dXJuIHRydWUgaWYgdGhlIGB0YXJnZXRgIGlzIGEgdmFsaWQgcG9zdGFsIGNvZGUsIGZhbHNlIG90aGVyd2lzZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNQb3N0YWxDb2RlKHRhcmdldDpzdHJpbmcsIGFyZzpzdHJpbmcpIHtcbiAgYXNzZXJ0U3RyaW5nKHRhcmdldCk7XG4gIGlmIChhcmcgaW4gcGF0dGVybnMpIHtcbiAgICByZXR1cm4gcGF0dGVybnNbYXJnXS50ZXN0KHRhcmdldCk7XG4gIH0gZWxzZSBpZiAoYXJnID09PSAnYW55Jykge1xuICAgIGZvciAoY29uc3Qga2V5IGluIHBhdHRlcm5zKSB7XG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZ290d2FybG9zdC9pc3RhbmJ1bC9ibG9iL21hc3Rlci9pZ25vcmluZy1jb2RlLWZvci1jb3ZlcmFnZS5tZCNpZ25vcmluZy1jb2RlLWZvci1jb3ZlcmFnZS1wdXJwb3Nlc1xuICAgICAgLy8gaXN0YW5idWwgaWdub3JlIGVsc2VcbiAgICAgIGlmIChwYXR0ZXJucy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIGNvbnN0IHBhdHRlcm4gPSBwYXR0ZXJuc1trZXldO1xuICAgICAgICBpZiAocGF0dGVybi50ZXN0KHRhcmdldCkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGxvY2FsZSAnJHthcmd9J2ApO1xufSJdfQ==