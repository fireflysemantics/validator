import { assertString } from '../util/assertString';
const isbn10Maybe = /^(?:[0-9]{9}X|[0-9]{10})$/;
const isbn13Maybe = /^(?:[0-9]{13})$/;
const factor = [1, 3];
/**
 * Test whether the target string is an ISBN number.
 *
 * @param target The string
 * @param arg The ISBN version
 * @return true if the `target` string is an ISBN number, false otherwise
 */
export function isISBN(target, arg = '') {
    assertString(target);
    arg = String(arg);
    if (!arg) {
        return isISBN(target, '10') || isISBN(target, '13');
    }
    const sanitized = target.replace(/[\s-]+/g, '');
    let checksum = 0;
    let i;
    if (arg === '10') {
        if (!isbn10Maybe.test(sanitized)) {
            return false;
        }
        for (i = 0; i < 9; i++) {
            checksum += (i + 1) * parseInt(sanitized.charAt(i));
        }
        if (sanitized.charAt(9) === 'X') {
            checksum += 10 * 10;
        }
        else {
            checksum += 10 * parseInt(sanitized.charAt(9));
        }
        if ((checksum % 11) === 0) {
            return !!sanitized;
        }
    }
    else if (arg === '13') {
        if (!isbn13Maybe.test(sanitized)) {
            return false;
        }
        for (i = 0; i < 12; i++) {
            checksum += factor[i % 2] * parseInt(sanitized.charAt(i));
        }
        if (parseInt(sanitized.charAt(12)) - ((10 - (checksum % 10)) % 10) === 0) {
            return !!sanitized;
        }
    }
    return false;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNJU0JOLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZpcmVmbHlzZW1hbnRpY3MvdmFsaWRhdG9ydHMvIiwic291cmNlcyI6WyJsaWIvdmFsaWRhdG9ycy9pc0lTQk4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRXBELE1BQU0sV0FBVyxHQUFHLDJCQUEyQixDQUFDO0FBQ2hELE1BQU0sV0FBVyxHQUFHLGlCQUFpQixDQUFDO0FBQ3RDLE1BQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBRXRCOzs7Ozs7R0FNRztBQUNILE1BQU0sVUFBVSxNQUFNLENBQUMsTUFBYyxFQUFFLE1BQWMsRUFBRTtJQUNyRCxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDckIsR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNsQixJQUFJLENBQUMsR0FBRyxFQUFFO1FBQ1IsT0FBTyxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7S0FDckQ7SUFDRCxNQUFNLFNBQVMsR0FBVyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN4RCxJQUFJLFFBQVEsR0FBRyxDQUFDLENBQUM7SUFDakIsSUFBSSxDQUFDLENBQUM7SUFDTixJQUFJLEdBQUcsS0FBSyxJQUFJLEVBQUU7UUFDaEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDaEMsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUNELEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3RCLFFBQVEsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3JEO1FBQ0QsSUFBSSxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsRUFBRTtZQUMvQixRQUFRLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FBQztTQUNyQjthQUFNO1lBQ0wsUUFBUSxJQUFJLEVBQUUsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2hEO1FBQ0QsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDekIsT0FBTyxDQUFDLENBQUMsU0FBUyxDQUFDO1NBQ3BCO0tBQ0Y7U0FBTSxJQUFJLEdBQUcsS0FBSyxJQUFJLEVBQUU7UUFDdkIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDaEMsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUNELEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3ZCLFFBQVEsSUFBSSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDM0Q7UUFDRCxJQUFJLFFBQVEsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN4RSxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUM7U0FDcEI7S0FDRjtJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzc2VydFN0cmluZyB9IGZyb20gJy4uL3V0aWwvYXNzZXJ0U3RyaW5nJztcblxuY29uc3QgaXNibjEwTWF5YmUgPSAvXig/OlswLTldezl9WHxbMC05XXsxMH0pJC87XG5jb25zdCBpc2JuMTNNYXliZSA9IC9eKD86WzAtOV17MTN9KSQvO1xuY29uc3QgZmFjdG9yID0gWzEsIDNdO1xuXG4vKipcbiAqIFRlc3Qgd2hldGhlciB0aGUgdGFyZ2V0IHN0cmluZyBpcyBhbiBJU0JOIG51bWJlci5cbiAqIFxuICogQHBhcmFtIHRhcmdldCBUaGUgc3RyaW5nXG4gKiBAcGFyYW0gYXJnIFRoZSBJU0JOIHZlcnNpb25cbiAqIEByZXR1cm4gdHJ1ZSBpZiB0aGUgYHRhcmdldGAgc3RyaW5nIGlzIGFuIElTQk4gbnVtYmVyLCBmYWxzZSBvdGhlcndpc2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzSVNCTih0YXJnZXQ6IHN0cmluZywgYXJnOiBzdHJpbmcgPSAnJykge1xuICBhc3NlcnRTdHJpbmcodGFyZ2V0KTtcbiAgYXJnID0gU3RyaW5nKGFyZyk7XG4gIGlmICghYXJnKSB7XG4gICAgcmV0dXJuIGlzSVNCTih0YXJnZXQsICcxMCcpIHx8IGlzSVNCTih0YXJnZXQsICcxMycpO1xuICB9XG4gIGNvbnN0IHNhbml0aXplZDogc3RyaW5nID0gdGFyZ2V0LnJlcGxhY2UoL1tcXHMtXSsvZywgJycpO1xuICBsZXQgY2hlY2tzdW0gPSAwO1xuICBsZXQgaTtcbiAgaWYgKGFyZyA9PT0gJzEwJykge1xuICAgIGlmICghaXNibjEwTWF5YmUudGVzdChzYW5pdGl6ZWQpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCA5OyBpKyspIHtcbiAgICAgIGNoZWNrc3VtICs9IChpICsgMSkgKiBwYXJzZUludChzYW5pdGl6ZWQuY2hhckF0KGkpKTtcbiAgICB9XG4gICAgaWYgKHNhbml0aXplZC5jaGFyQXQoOSkgPT09ICdYJykge1xuICAgICAgY2hlY2tzdW0gKz0gMTAgKiAxMDtcbiAgICB9IGVsc2Uge1xuICAgICAgY2hlY2tzdW0gKz0gMTAgKiBwYXJzZUludChzYW5pdGl6ZWQuY2hhckF0KDkpKTtcbiAgICB9XG4gICAgaWYgKChjaGVja3N1bSAlIDExKSA9PT0gMCkge1xuICAgICAgcmV0dXJuICEhc2FuaXRpemVkO1xuICAgIH1cbiAgfSBlbHNlIGlmIChhcmcgPT09ICcxMycpIHtcbiAgICBpZiAoIWlzYm4xM01heWJlLnRlc3Qoc2FuaXRpemVkKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgY2hlY2tzdW0gKz0gZmFjdG9yW2kgJSAyXSAqIHBhcnNlSW50KHNhbml0aXplZC5jaGFyQXQoaSkpO1xuICAgIH1cbiAgICBpZiAocGFyc2VJbnQoc2FuaXRpemVkLmNoYXJBdCgxMikpIC0gKCgxMCAtIChjaGVja3N1bSAlIDEwKSkgJSAxMCkgPT09IDApIHtcbiAgICAgIHJldHVybiAhIXNhbml0aXplZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufSJdfQ==