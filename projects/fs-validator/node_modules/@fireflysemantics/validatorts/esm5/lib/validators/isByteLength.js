import { assertString } from '../util/assertString';
/* eslint-disable prefer-rest-params */
/**
 * Checks whether the `target` string's length (in UTF-8 bytes)
 * falls in a range.
 *
 * @param target The target string
 * @param options The option parameters containing the min and max length of the string
 * @return true if the `target` strings conforms to the provided range
 */
export function isByteLength(target, options) {
    assertString(target);
    var min;
    var max;
    if (typeof (options) === 'object') {
        min = options.min || 0;
        max = options.max;
    }
    else { // backwards compatibility: isByteLength(str, min [, max])
        min = arguments[1];
        max = arguments[2];
    }
    var len = encodeURI(target).split(/%..|./).length - 1;
    return len >= min && (typeof max === 'undefined' || len <= max);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNCeXRlTGVuZ3RoLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZpcmVmbHlzZW1hbnRpY3MvdmFsaWRhdG9ydHMvIiwic291cmNlcyI6WyJsaWIvdmFsaWRhdG9ycy9pc0J5dGVMZW5ndGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRXBELHVDQUF1QztBQUV2Qzs7Ozs7OztHQU9HO0FBQ0gsTUFBTSxVQUFVLFlBQVksQ0FBQyxNQUFjLEVBQUUsT0FBYTtJQUN4RCxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDckIsSUFBSSxHQUFHLENBQUM7SUFDUixJQUFJLEdBQUcsQ0FBQztJQUNSLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLFFBQVEsRUFBRTtRQUNqQyxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDdkIsR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUM7S0FDbkI7U0FBTSxFQUFFLDBEQUEwRDtRQUNqRSxHQUFHLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ25CLEdBQUcsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDcEI7SUFDRCxJQUFNLEdBQUcsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDeEQsT0FBTyxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssV0FBVyxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQztBQUNsRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXNzZXJ0U3RyaW5nIH0gZnJvbSAnLi4vdXRpbC9hc3NlcnRTdHJpbmcnO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBwcmVmZXItcmVzdC1wYXJhbXMgKi9cblxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciB0aGUgYHRhcmdldGAgc3RyaW5nJ3MgbGVuZ3RoIChpbiBVVEYtOCBieXRlcykgXG4gKiBmYWxscyBpbiBhIHJhbmdlLlxuICogXG4gKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgc3RyaW5nXG4gKiBAcGFyYW0gb3B0aW9ucyBUaGUgb3B0aW9uIHBhcmFtZXRlcnMgY29udGFpbmluZyB0aGUgbWluIGFuZCBtYXggbGVuZ3RoIG9mIHRoZSBzdHJpbmcgXG4gKiBAcmV0dXJuIHRydWUgaWYgdGhlIGB0YXJnZXRgIHN0cmluZ3MgY29uZm9ybXMgdG8gdGhlIHByb3ZpZGVkIHJhbmdlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0J5dGVMZW5ndGgodGFyZ2V0OiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpIHtcbiAgYXNzZXJ0U3RyaW5nKHRhcmdldCk7XG4gIGxldCBtaW47XG4gIGxldCBtYXg7XG4gIGlmICh0eXBlb2YgKG9wdGlvbnMpID09PSAnb2JqZWN0Jykge1xuICAgIG1pbiA9IG9wdGlvbnMubWluIHx8IDA7XG4gICAgbWF4ID0gb3B0aW9ucy5tYXg7XG4gIH0gZWxzZSB7IC8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5OiBpc0J5dGVMZW5ndGgoc3RyLCBtaW4gWywgbWF4XSlcbiAgICBtaW4gPSBhcmd1bWVudHNbMV07XG4gICAgbWF4ID0gYXJndW1lbnRzWzJdO1xuICB9XG4gIGNvbnN0IGxlbiA9IGVuY29kZVVSSSh0YXJnZXQpLnNwbGl0KC8lLi58Li8pLmxlbmd0aCAtIDE7XG4gIHJldHVybiBsZW4gPj0gbWluICYmICh0eXBlb2YgbWF4ID09PSAndW5kZWZpbmVkJyB8fCBsZW4gPD0gbWF4KTtcbn0iXX0=