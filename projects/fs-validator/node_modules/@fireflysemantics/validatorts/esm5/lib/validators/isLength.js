import { assertString } from '../util/assertString';
/* eslint-disable prefer-rest-params */
/**
 * Checks whether the `target` string length is valid
 *
 * @param target The target string
 * @param options The options
 * @return true if the `target` has a valid length, false otherwise
 */
export function isLength(target, options) {
    assertString(target);
    var min;
    var max;
    if (typeof (options) === 'object') {
        min = options.min || 0;
        max = options.max;
    }
    else { // backwards compatibility: isLength(str, min [, max])
        min = arguments[1] || 0;
        max = arguments[2];
    }
    var surrogatePairs = target.match(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g) || [];
    var len = target.length - surrogatePairs.length;
    return len >= min && (typeof max === 'undefined' || len <= max);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNMZW5ndGguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmlyZWZseXNlbWFudGljcy92YWxpZGF0b3J0cy8iLCJzb3VyY2VzIjpbImxpYi92YWxpZGF0b3JzL2lzTGVuZ3RoLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUVwRCx1Q0FBdUM7QUFFdkM7Ozs7OztHQU1HO0FBQ0gsTUFBTSxVQUFVLFFBQVEsQ0FBQyxNQUFhLEVBQUUsT0FBTztJQUM3QyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDckIsSUFBSSxHQUFHLENBQUM7SUFDUixJQUFJLEdBQUcsQ0FBQztJQUNSLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLFFBQVEsRUFBRTtRQUNqQyxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDdkIsR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUM7S0FDbkI7U0FBTSxFQUFFLHNEQUFzRDtRQUM3RCxHQUFHLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN4QixHQUFHLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3BCO0lBQ0QsSUFBTSxjQUFjLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM3RSxJQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxHQUFHLGNBQWMsQ0FBQyxNQUFNLENBQUM7SUFDbEQsT0FBTyxHQUFHLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssV0FBVyxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQztBQUNsRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXNzZXJ0U3RyaW5nIH0gZnJvbSAnLi4vdXRpbC9hc3NlcnRTdHJpbmcnO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBwcmVmZXItcmVzdC1wYXJhbXMgKi9cblxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciB0aGUgYHRhcmdldGAgc3RyaW5nIGxlbmd0aCBpcyB2YWxpZFxuICogXG4gKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgc3RyaW5nXG4gKiBAcGFyYW0gb3B0aW9ucyBUaGUgb3B0aW9uc1xuICogQHJldHVybiB0cnVlIGlmIHRoZSBgdGFyZ2V0YCBoYXMgYSB2YWxpZCBsZW5ndGgsIGZhbHNlIG90aGVyd2lzZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNMZW5ndGgodGFyZ2V0OnN0cmluZywgb3B0aW9ucykge1xuICBhc3NlcnRTdHJpbmcodGFyZ2V0KTtcbiAgbGV0IG1pbjtcbiAgbGV0IG1heDtcbiAgaWYgKHR5cGVvZiAob3B0aW9ucykgPT09ICdvYmplY3QnKSB7XG4gICAgbWluID0gb3B0aW9ucy5taW4gfHwgMDtcbiAgICBtYXggPSBvcHRpb25zLm1heDtcbiAgfSBlbHNlIHsgLy8gYmFja3dhcmRzIGNvbXBhdGliaWxpdHk6IGlzTGVuZ3RoKHN0ciwgbWluIFssIG1heF0pXG4gICAgbWluID0gYXJndW1lbnRzWzFdIHx8IDA7XG4gICAgbWF4ID0gYXJndW1lbnRzWzJdO1xuICB9XG4gIGNvbnN0IHN1cnJvZ2F0ZVBhaXJzID0gdGFyZ2V0Lm1hdGNoKC9bXFx1RDgwMC1cXHVEQkZGXVtcXHVEQzAwLVxcdURGRkZdL2cpIHx8IFtdO1xuICBjb25zdCBsZW4gPSB0YXJnZXQubGVuZ3RoIC0gc3Vycm9nYXRlUGFpcnMubGVuZ3RoO1xuICByZXR1cm4gbGVuID49IG1pbiAmJiAodHlwZW9mIG1heCA9PT0gJ3VuZGVmaW5lZCcgfHwgbGVuIDw9IG1heCk7XG59XG4iXX0=