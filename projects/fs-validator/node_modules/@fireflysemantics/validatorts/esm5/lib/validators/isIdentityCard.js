import { assertString } from '../util/assertString';
var ɵ0 = function (str) {
    assertString(str);
    var DNI = /^[0-9X-Z][0-9]{7}[TRWAGMYFPDXBNJZSQVHLCKE]$/;
    var charsValue = {
        X: 0,
        Y: 1,
        Z: 2,
    };
    var controlDigits = [
        'T', 'R', 'W', 'A', 'G', 'M', 'Y', 'F', 'P', 'D', 'X', 'B',
        'N', 'J', 'Z', 'S', 'Q', 'V', 'H', 'L', 'C', 'K', 'E',
    ];
    // sanitize user input
    var sanitized = str.trim().toUpperCase();
    // validate the data structure
    if (!DNI.test(sanitized)) {
        return false;
    }
    // validate the control digit
    var number = sanitized.slice(0, -1).replace(/[X,Y,Z]/g, function (char) { return charsValue[char]; });
    return sanitized.endsWith(controlDigits[number % 23]);
}, ɵ1 = function (str) {
    var DNI = /^\d{9}$/;
    // sanitize user input
    var sanitized = str.trim();
    // validate the data structure
    if (!DNI.test(sanitized)) {
        return false;
    }
    var id = sanitized;
    var sum = 0, incNum;
    for (var i = 0; i < id.length; i++) {
        incNum = Number(id[i]) * ((i % 2) + 1); // Multiply number by 1 or 2
        sum += incNum > 9 ? incNum - 9 : incNum; // Sum the digits up and add to total
    }
    return sum % 10 === 0;
}, ɵ2 = function (str) {
    var ALPHABET_CODES = {
        A: 10,
        B: 11,
        C: 12,
        D: 13,
        E: 14,
        F: 15,
        G: 16,
        H: 17,
        I: 34,
        J: 18,
        K: 19,
        L: 20,
        M: 21,
        N: 22,
        O: 35,
        P: 23,
        Q: 24,
        R: 25,
        S: 26,
        T: 27,
        U: 28,
        V: 29,
        W: 32,
        X: 30,
        Y: 31,
        Z: 33,
    };
    var sanitized = str.trim().toUpperCase();
    if (!/^[A-Z][0-9]{9}$/.test(sanitized))
        return false;
    return Array.from(sanitized).reduce(function (sum, num, index) {
        if (index === 0) {
            var code = ALPHABET_CODES[num];
            return ((code % 10) * 9) + Math.floor(code / 10);
        }
        if (index === 9) {
            return ((10 - (sum % 10)) - Number(num)) % 10 === 0;
        }
        return sum + (Number(num) * (9 - index));
    }, 0);
};
var validators = {
    ES: ɵ0,
    'he-IL': ɵ1,
    'zh-TW': ɵ2,
};
/**
 * Check if the string is an identity card
 * @param target The target string
 * @param arg The arg
 */
export function isIdentityCard(target, arg) {
    assertString(target);
    if (arg in validators) {
        return validators[arg](target);
    }
    else if (arg === 'any') {
        for (var key in validators) {
            // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes
            // istanbul ignore else
            if (validators.hasOwnProperty(key)) {
                var validator = validators[key];
                if (validator(target)) {
                    return true;
                }
            }
        }
        return false;
    }
    throw new Error("Invalid locale '" + arg + "'");
}
export { ɵ0, ɵ1, ɵ2 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNJZGVudGl0eUNhcmQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmlyZWZseXNlbWFudGljcy92YWxpZGF0b3J0cy8iLCJzb3VyY2VzIjpbImxpYi92YWxpZGF0b3JzL2lzSWRlbnRpdHlDYXJkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztTQUc5QyxVQUFDLEdBQUc7SUFDTixZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7SUFFbEIsSUFBTSxHQUFHLEdBQUcsNkNBQTZDLENBQUM7SUFFMUQsSUFBTSxVQUFVLEdBQUc7UUFDakIsQ0FBQyxFQUFFLENBQUM7UUFDSixDQUFDLEVBQUUsQ0FBQztRQUNKLENBQUMsRUFBRSxDQUFDO0tBQ0wsQ0FBQztJQUVGLElBQU0sYUFBYSxHQUFHO1FBQ3BCLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRztRQUMxRCxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRztLQUN0RCxDQUFDO0lBRUYsc0JBQXNCO0lBQ3RCLElBQU0sU0FBUyxHQUFHLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUUzQyw4QkFBOEI7SUFDOUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUU7UUFDeEIsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUVELDZCQUE2QjtJQUM3QixJQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVB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QUcsR0FBRyxFQUFFLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDckQ7UUFFRCxPQUFPLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzNDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztBQUNSLENBQUM7QUFsR0gsSUFBTSxVQUFVLEdBQUc7SUFDakIsRUFBRSxJQTRCRDtJQUNELE9BQU8sSUFvQk47SUFDRCxPQUFPLElBK0NOO0NBQ0YsQ0FBQztBQUVGOzs7O0dBSUc7QUFDSCxNQUFNLFVBQVUsY0FBYyxDQUFDLE1BQWMsRUFBRSxHQUFXO0lBQ3hELFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNyQixJQUFJLEdBQUcsSUFBSSxVQUFVLEVBQUU7UUFDckIsT0FBTyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDaEM7U0FBTSxJQUFJLEdBQUcsS0FBSyxLQUFLLEVBQUU7UUFDeEIsS0FBSyxJQUFNLEdBQUcsSUFBSSxVQUFVLEVBQUU7WUFDNUIsdUhBQXVIO1lBQ3ZILHVCQUF1QjtZQUN2QixJQUFJLFVBQVUsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ2xDLElBQU0sU0FBUyxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDbEMsSUFBSSxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQ3JCLE9BQU8sSUFBSSxDQUFDO2lCQUNiO2FBQ0Y7U0FDRjtRQUNELE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLHFCQUFtQixHQUFHLE1BQUcsQ0FBQyxDQUFDO0FBQzdDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3NlcnRTdHJpbmcgfSBmcm9tICcuLi91dGlsL2Fzc2VydFN0cmluZyc7XG5cbmNvbnN0IHZhbGlkYXRvcnMgPSB7XG4gIEVTOiAoc3RyKSA9PiB7XG4gICAgYXNzZXJ0U3RyaW5nKHN0cik7XG5cbiAgICBjb25zdCBETkkgPSAvXlswLTlYLVpdWzAtOV17N31bVFJXQUdNWUZQRFhCTkpaU1FWSExDS0VdJC87XG5cbiAgICBjb25zdCBjaGFyc1ZhbHVlID0ge1xuICAgICAgWDogMCxcbiAgICAgIFk6IDEsXG4gICAgICBaOiAyLFxuICAgIH07XG5cbiAgICBjb25zdCBjb250cm9sRGlnaXRzID0gW1xuICAgICAgJ1QnLCAnUicsICdXJywgJ0EnLCAnRycsICdNJywgJ1knLCAnRicsICdQJywgJ0QnLCAnWCcsICdCJyxcbiAgICAgICdOJywgJ0onLCAnWicsICdTJywgJ1EnLCAnVicsICdIJywgJ0wnLCAnQycsICdLJywgJ0UnLFxuICAgIF07XG5cbiAgICAvLyBzYW5pdGl6ZSB1c2VyIGlucHV0XG4gICAgY29uc3Qgc2FuaXRpemVkID0gc3RyLnRyaW0oKS50b1VwcGVyQ2FzZSgpO1xuXG4gICAgLy8gdmFsaWRhdGUgdGhlIGRhdGEgc3RydWN0dXJlXG4gICAgaWYgKCFETkkudGVzdChzYW5pdGl6ZWQpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gdmFsaWRhdGUgdGhlIGNvbnRyb2wgZGlnaXRcbiAgICBjb25zdCBudW1iZXIgPSBzYW5pdGl6ZWQuc2xpY2UoMCwgLTEpLnJlcGxhY2UoL1tYLFksWl0vZywgY2hhciA9PiBjaGFyc1ZhbHVlW2NoYXJdKTtcblxuICAgIHJldHVybiBzYW5pdGl6ZWQuZW5kc1dpdGgoY29udHJvbERpZ2l0c1tudW1iZXIgJSAyM10pO1xuICB9LFxuICAnaGUtSUwnOiAoc3RyKSA9PiB7XG4gICAgY29uc3QgRE5JID0gL15cXGR7OX0kLztcblxuICAgIC8vIHNhbml0aXplIHVzZXIgaW5wdXRcbiAgICBjb25zdCBzYW5pdGl6ZWQgPSBzdHIudHJpbSgpO1xuXG4gICAgLy8gdmFsaWRhdGUgdGhlIGRhdGEgc3RydWN0dXJlXG4gICAgaWYgKCFETkkudGVzdChzYW5pdGl6ZWQpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3QgaWQgPSBzYW5pdGl6ZWQ7XG5cbiAgICBsZXQgc3VtID0gMCxcbiAgICAgIGluY051bTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlkLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpbmNOdW0gPSBOdW1iZXIoaWRbaV0pICogKChpICUgMikgKyAxKTsgLy8gTXVsdGlwbHkgbnVtYmVyIGJ5IDEgb3IgMlxuICAgICAgc3VtICs9IGluY051bSA+IDkgPyBpbmNOdW0gLSA5IDogaW5jTnVtOyAvLyBTdW0gdGhlIGRpZ2l0cyB1cCBhbmQgYWRkIHRvIHRvdGFsXG4gICAgfVxuICAgIHJldHVybiBzdW0gJSAxMCA9PT0gMDtcbiAgfSxcbiAgJ3poLVRXJzogKHN0cikgPT4ge1xuICAgIGNvbnN0IEFMUEhBQkVUX0NPREVTID0ge1xuICAgICAgQTogMTAsXG4gICAgICBCOiAxMSxcbiAgICAgIEM6IDEyLFxuICAgICAgRDogMTMsXG4gICAgICBFOiAxNCxcbiAgICAgIEY6IDE1LFxuICAgICAgRzogMTYsXG4gICAgICBIOiAxNyxcbiAgICAgIEk6IDM0LFxuICAgICAgSjogMTgsXG4gICAgICBLOiAxOSxcbiAgICAgIEw6IDIwLFxuICAgICAgTTogMjEsXG4gICAgICBOOiAyMixcbiAgICAgIE86IDM1LFxuICAgICAgUDogMjMsXG4gICAgICBROiAyNCxcbiAgICAgIFI6IDI1LFxuICAgICAgUzogMjYsXG4gICAgICBUOiAyNyxcbiAgICAgIFU6IDI4LFxuICAgICAgVjogMjksXG4gICAgICBXOiAzMixcbiAgICAgIFg6IDMwLFxuICAgICAgWTogMzEsXG4gICAgICBaOiAzMyxcbiAgICB9O1xuXG4gICAgY29uc3Qgc2FuaXRpemVkID0gc3RyLnRyaW0oKS50b1VwcGVyQ2FzZSgpO1xuXG4gICAgaWYgKCEvXltBLVpdWzAtOV17OX0kLy50ZXN0KHNhbml0aXplZCkpIHJldHVybiBmYWxzZTtcblxuICAgIHJldHVybiBBcnJheS5mcm9tKHNhbml0aXplZCkucmVkdWNlKChzdW06IG51bWJlciwgbnVtOiBudW1iZXIsIGluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICBjb25zdCBjb2RlID0gQUxQSEFCRVRfQ09ERVNbbnVtXTtcblxuICAgICAgICByZXR1cm4gKChjb2RlICUgMTApICogOSkgKyBNYXRoLmZsb29yKGNvZGUgLyAxMCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChpbmRleCA9PT0gOSkge1xuICAgICAgICByZXR1cm4gKCgxMCAtIChzdW0gJSAxMCkpIC0gTnVtYmVyKG51bSkpICUgMTAgPT09IDA7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBzdW0gKyAoTnVtYmVyKG51bSkgKiAoOSAtIGluZGV4KSk7XG4gICAgfSwgMCk7XG4gIH0sXG59O1xuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBzdHJpbmcgaXMgYW4gaWRlbnRpdHkgY2FyZFxuICogQHBhcmFtIHRhcmdldCBUaGUgdGFyZ2V0IHN0cmluZ1xuICogQHBhcmFtIGFyZyBUaGUgYXJnXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0lkZW50aXR5Q2FyZCh0YXJnZXQ6IHN0cmluZywgYXJnOiBzdHJpbmcpIHtcbiAgYXNzZXJ0U3RyaW5nKHRhcmdldCk7XG4gIGlmIChhcmcgaW4gdmFsaWRhdG9ycykge1xuICAgIHJldHVybiB2YWxpZGF0b3JzW2FyZ10odGFyZ2V0KTtcbiAgfSBlbHNlIGlmIChhcmcgPT09ICdhbnknKSB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gdmFsaWRhdG9ycykge1xuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2dvdHdhcmxvc3QvaXN0YW5idWwvYmxvYi9tYXN0ZXIvaWdub3JpbmctY29kZS1mb3ItY292ZXJhZ2UubWQjaWdub3JpbmctY29kZS1mb3ItY292ZXJhZ2UtcHVycG9zZXNcbiAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBlbHNlXG4gICAgICBpZiAodmFsaWRhdG9ycy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIGNvbnN0IHZhbGlkYXRvciA9IHZhbGlkYXRvcnNba2V5XTtcbiAgICAgICAgaWYgKHZhbGlkYXRvcih0YXJnZXQpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBsb2NhbGUgJyR7YXJnfSdgKTtcbn0iXX0=