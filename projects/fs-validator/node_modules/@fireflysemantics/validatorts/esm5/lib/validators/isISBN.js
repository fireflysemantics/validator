import { assertString } from '../util/assertString';
var isbn10Maybe = /^(?:[0-9]{9}X|[0-9]{10})$/;
var isbn13Maybe = /^(?:[0-9]{13})$/;
var factor = [1, 3];
/**
 * Test whether the target string is an ISBN number.
 *
 * @param target The string
 * @param arg The ISBN version
 * @return true if the `target` string is an ISBN number, false otherwise
 */
export function isISBN(target, arg) {
    if (arg === void 0) { arg = ''; }
    assertString(target);
    arg = String(arg);
    if (!arg) {
        return isISBN(target, '10') || isISBN(target, '13');
    }
    var sanitized = target.replace(/[\s-]+/g, '');
    var checksum = 0;
    var i;
    if (arg === '10') {
        if (!isbn10Maybe.test(sanitized)) {
            return false;
        }
        for (i = 0; i < 9; i++) {
            checksum += (i + 1) * parseInt(sanitized.charAt(i));
        }
        if (sanitized.charAt(9) === 'X') {
            checksum += 10 * 10;
        }
        else {
            checksum += 10 * parseInt(sanitized.charAt(9));
        }
        if ((checksum % 11) === 0) {
            return !!sanitized;
        }
    }
    else if (arg === '13') {
        if (!isbn13Maybe.test(sanitized)) {
            return false;
        }
        for (i = 0; i < 12; i++) {
            checksum += factor[i % 2] * parseInt(sanitized.charAt(i));
        }
        if (parseInt(sanitized.charAt(12)) - ((10 - (checksum % 10)) % 10) === 0) {
            return !!sanitized;
        }
    }
    return false;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNJU0JOLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZpcmVmbHlzZW1hbnRpY3MvdmFsaWRhdG9ydHMvIiwic291cmNlcyI6WyJsaWIvdmFsaWRhdG9ycy9pc0lTQk4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRXBELElBQU0sV0FBVyxHQUFHLDJCQUEyQixDQUFDO0FBQ2hELElBQU0sV0FBVyxHQUFHLGlCQUFpQixDQUFDO0FBQ3RDLElBQU0sTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0FBRXRCOzs7Ozs7R0FNRztBQUNILE1BQU0sVUFBVSxNQUFNLENBQUMsTUFBYyxFQUFFLEdBQWdCO0lBQWhCLG9CQUFBLEVBQUEsUUFBZ0I7SUFDckQsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3JCLEdBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbEIsSUFBSSxDQUFDLEdBQUcsRUFBRTtRQUNSLE9BQU8sTUFBTSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0tBQ3JEO0lBQ0QsSUFBTSxTQUFTLEdBQVcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDeEQsSUFBSSxRQUFRLEdBQUcsQ0FBQyxDQUFDO0lBQ2pCLElBQUksQ0FBQyxDQUFDO0lBQ04sSUFBSSxHQUFHLEtBQUssSUFBSSxFQUFFO1FBQ2hCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQ2hDLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFDRCxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN0QixRQUFRLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNyRDtRQUNELElBQUksU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQUU7WUFDL0IsUUFBUSxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQUM7U0FDckI7YUFBTTtZQUNMLFFBQVEsSUFBSSxFQUFFLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNoRDtRQUNELElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ3pCLE9BQU8sQ0FBQyxDQUFDLFNBQVMsQ0FBQztTQUNwQjtLQUNGO1NBQU0sSUFBSSxHQUFHLEtBQUssSUFBSSxFQUFFO1FBQ3ZCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQ2hDLE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFDRCxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN2QixRQUFRLElBQUksTUFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzNEO1FBQ0QsSUFBSSxRQUFRLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDeEUsT0FBTyxDQUFDLENBQUMsU0FBUyxDQUFDO1NBQ3BCO0tBQ0Y7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3NlcnRTdHJpbmcgfSBmcm9tICcuLi91dGlsL2Fzc2VydFN0cmluZyc7XG5cbmNvbnN0IGlzYm4xME1heWJlID0gL14oPzpbMC05XXs5fVh8WzAtOV17MTB9KSQvO1xuY29uc3QgaXNibjEzTWF5YmUgPSAvXig/OlswLTldezEzfSkkLztcbmNvbnN0IGZhY3RvciA9IFsxLCAzXTtcblxuLyoqXG4gKiBUZXN0IHdoZXRoZXIgdGhlIHRhcmdldCBzdHJpbmcgaXMgYW4gSVNCTiBudW1iZXIuXG4gKiBcbiAqIEBwYXJhbSB0YXJnZXQgVGhlIHN0cmluZ1xuICogQHBhcmFtIGFyZyBUaGUgSVNCTiB2ZXJzaW9uXG4gKiBAcmV0dXJuIHRydWUgaWYgdGhlIGB0YXJnZXRgIHN0cmluZyBpcyBhbiBJU0JOIG51bWJlciwgZmFsc2Ugb3RoZXJ3aXNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0lTQk4odGFyZ2V0OiBzdHJpbmcsIGFyZzogc3RyaW5nID0gJycpIHtcbiAgYXNzZXJ0U3RyaW5nKHRhcmdldCk7XG4gIGFyZyA9IFN0cmluZyhhcmcpO1xuICBpZiAoIWFyZykge1xuICAgIHJldHVybiBpc0lTQk4odGFyZ2V0LCAnMTAnKSB8fCBpc0lTQk4odGFyZ2V0LCAnMTMnKTtcbiAgfVxuICBjb25zdCBzYW5pdGl6ZWQ6IHN0cmluZyA9IHRhcmdldC5yZXBsYWNlKC9bXFxzLV0rL2csICcnKTtcbiAgbGV0IGNoZWNrc3VtID0gMDtcbiAgbGV0IGk7XG4gIGlmIChhcmcgPT09ICcxMCcpIHtcbiAgICBpZiAoIWlzYm4xME1heWJlLnRlc3Qoc2FuaXRpemVkKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBmb3IgKGkgPSAwOyBpIDwgOTsgaSsrKSB7XG4gICAgICBjaGVja3N1bSArPSAoaSArIDEpICogcGFyc2VJbnQoc2FuaXRpemVkLmNoYXJBdChpKSk7XG4gICAgfVxuICAgIGlmIChzYW5pdGl6ZWQuY2hhckF0KDkpID09PSAnWCcpIHtcbiAgICAgIGNoZWNrc3VtICs9IDEwICogMTA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNoZWNrc3VtICs9IDEwICogcGFyc2VJbnQoc2FuaXRpemVkLmNoYXJBdCg5KSk7XG4gICAgfVxuICAgIGlmICgoY2hlY2tzdW0gJSAxMSkgPT09IDApIHtcbiAgICAgIHJldHVybiAhIXNhbml0aXplZDtcbiAgICB9XG4gIH0gZWxzZSBpZiAoYXJnID09PSAnMTMnKSB7XG4gICAgaWYgKCFpc2JuMTNNYXliZS50ZXN0KHNhbml0aXplZCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChpID0gMDsgaSA8IDEyOyBpKyspIHtcbiAgICAgIGNoZWNrc3VtICs9IGZhY3RvcltpICUgMl0gKiBwYXJzZUludChzYW5pdGl6ZWQuY2hhckF0KGkpKTtcbiAgICB9XG4gICAgaWYgKHBhcnNlSW50KHNhbml0aXplZC5jaGFyQXQoMTIpKSAtICgoMTAgLSAoY2hlY2tzdW0gJSAxMCkpICUgMTApID09PSAwKSB7XG4gICAgICByZXR1cm4gISFzYW5pdGl6ZWQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn0iXX0=