/**
 * The most commonly used EAN standard is
 * the thirteen-digit EAN-13, while the
 * less commonly used 8-digit EAN-8 barcode was
 * introduced for use on small packages.
 * EAN consists of:
 * GS1 prefix, manufacturer code, product code and check digit
 * Reference: https://en.wikipedia.org/wiki/International_Article_Number
 */
import { assertString } from '../util/assertString';
/**
 * Define EAN Lenghts; 8 for EAN-8; 13 for EAN-13
 * and Regular Expression for valid EANs (EAN-8, EAN-13),
 * with exact numberic matching of 8 or 13 digits [0-9]
 */
var LENGTH_EAN_8 = 8;
var validEanRegex = /^(\d{8}|\d{13})$/;
/**
 * Get position weight given:
 * EAN length and digit index/position
 *
 * @param {number} length
 * @param {number} index
 * @return {number}
 */
function getPositionWeightThroughLengthAndIndex(length, index) {
    if (length === LENGTH_EAN_8) {
        return (index % 2 === 0) ? 3 : 1;
    }
    return (index % 2 === 0) ? 1 : 3;
}
/**
 * Calculate EAN Check Digit
 * Reference: https://en.wikipedia.org/wiki/International_Article_Number#Calculation_of_checksum_digit
 *
 * @param {string} ean
 * @return {number}
 */
function calculateCheckDigit(ean) {
    var checksum = ean
        .slice(0, -1)
        .split('')
        .map(function (char, index) { return Number(char) * getPositionWeightThroughLengthAndIndex(ean.length, index); })
        .reduce(function (acc, partialSum) { return acc + partialSum; }, 0);
    var remainder = 10 - (checksum % 10);
    return remainder < 10 ? remainder : 0;
}
/**
 * Check if string is valid EAN:
 * Matches EAN-8/EAN-13 regex
 * Has valid check digit.
 *
 * @param target The target string
 * @return true if the `target` is a valid EAN, false otherwise
 */
export function isEAN(target) {
    assertString(target);
    var actualCheckDigit = Number(target.slice(-1));
    return validEanRegex.test(target) && actualCheckDigit === calculateCheckDigit(target);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNFQU4uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmlyZWZseXNlbWFudGljcy92YWxpZGF0b3J0cy8iLCJzb3VyY2VzIjpbImxpYi92YWxpZGF0b3JzL2lzRUFOLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztHQVFHO0FBRUgsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRXBEOzs7O0dBSUc7QUFDSCxJQUFNLFlBQVksR0FBRyxDQUFDLENBQUM7QUFDdkIsSUFBTSxhQUFhLEdBQUcsa0JBQWtCLENBQUM7QUFHekM7Ozs7Ozs7R0FPRztBQUNILFNBQVMsc0NBQXNDLENBQUMsTUFBTSxFQUFFLEtBQUs7SUFDM0QsSUFBSSxNQUFNLEtBQUssWUFBWSxFQUFFO1FBQzNCLE9BQU8sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNsQztJQUVELE9BQU8sQ0FBQyxLQUFLLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNuQyxDQUFDO0FBRUQ7Ozs7OztHQU1HO0FBQ0gsU0FBUyxtQkFBbUIsQ0FBQyxHQUFHO0lBQzlCLElBQU0sUUFBUSxHQUFHLEdBQUc7U0FDakIsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNaLEtBQUssQ0FBQyxFQUFFLENBQUM7U0FDVCxHQUFHLENBQUMsVUFBQyxJQUFJLEVBQUUsS0FBSyxJQUFLLE9BQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLHNDQUFzQyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLEVBQXhFLENBQXdFLENBQUM7U0FDOUYsTUFBTSxDQUFDLFVBQUMsR0FBRyxFQUFFLFVBQVUsSUFBSyxPQUFBLEdBQUcsR0FBRyxVQUFVLEVBQWhCLENBQWdCLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFFcEQsSUFBTSxTQUFTLEdBQUcsRUFBRSxHQUFHLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBRXZDLE9BQU8sU0FBUyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDeEMsQ0FBQztBQUVEOzs7Ozs7O0dBT0c7QUFDRixNQUFNLFVBQVUsS0FBSyxDQUFDLE1BQWM7SUFDbkMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3JCLElBQU0sZ0JBQWdCLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRWxELE9BQU8sYUFBYSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxnQkFBZ0IsS0FBSyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN4RixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGUgbW9zdCBjb21tb25seSB1c2VkIEVBTiBzdGFuZGFyZCBpc1xuICogdGhlIHRoaXJ0ZWVuLWRpZ2l0IEVBTi0xMywgd2hpbGUgdGhlXG4gKiBsZXNzIGNvbW1vbmx5IHVzZWQgOC1kaWdpdCBFQU4tOCBiYXJjb2RlIHdhc1xuICogaW50cm9kdWNlZCBmb3IgdXNlIG9uIHNtYWxsIHBhY2thZ2VzLlxuICogRUFOIGNvbnNpc3RzIG9mOlxuICogR1MxIHByZWZpeCwgbWFudWZhY3R1cmVyIGNvZGUsIHByb2R1Y3QgY29kZSBhbmQgY2hlY2sgZGlnaXRcbiAqIFJlZmVyZW5jZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSW50ZXJuYXRpb25hbF9BcnRpY2xlX051bWJlclxuICovXG5cbmltcG9ydCB7IGFzc2VydFN0cmluZyB9IGZyb20gJy4uL3V0aWwvYXNzZXJ0U3RyaW5nJztcblxuLyoqXG4gKiBEZWZpbmUgRUFOIExlbmdodHM7IDggZm9yIEVBTi04OyAxMyBmb3IgRUFOLTEzXG4gKiBhbmQgUmVndWxhciBFeHByZXNzaW9uIGZvciB2YWxpZCBFQU5zIChFQU4tOCwgRUFOLTEzKSxcbiAqIHdpdGggZXhhY3QgbnVtYmVyaWMgbWF0Y2hpbmcgb2YgOCBvciAxMyBkaWdpdHMgWzAtOV1cbiAqL1xuY29uc3QgTEVOR1RIX0VBTl84ID0gODtcbmNvbnN0IHZhbGlkRWFuUmVnZXggPSAvXihcXGR7OH18XFxkezEzfSkkLztcblxuXG4vKipcbiAqIEdldCBwb3NpdGlvbiB3ZWlnaHQgZ2l2ZW46XG4gKiBFQU4gbGVuZ3RoIGFuZCBkaWdpdCBpbmRleC9wb3NpdGlvblxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleFxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5mdW5jdGlvbiBnZXRQb3NpdGlvbldlaWdodFRocm91Z2hMZW5ndGhBbmRJbmRleChsZW5ndGgsIGluZGV4KSB7XG4gIGlmIChsZW5ndGggPT09IExFTkdUSF9FQU5fOCkge1xuICAgIHJldHVybiAoaW5kZXggJSAyID09PSAwKSA/IDMgOiAxO1xuICB9XG5cbiAgcmV0dXJuIChpbmRleCAlIDIgPT09IDApID8gMSA6IDM7XG59XG5cbi8qKlxuICogQ2FsY3VsYXRlIEVBTiBDaGVjayBEaWdpdFxuICogUmVmZXJlbmNlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JbnRlcm5hdGlvbmFsX0FydGljbGVfTnVtYmVyI0NhbGN1bGF0aW9uX29mX2NoZWNrc3VtX2RpZ2l0XG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGVhblxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5mdW5jdGlvbiBjYWxjdWxhdGVDaGVja0RpZ2l0KGVhbikge1xuICBjb25zdCBjaGVja3N1bSA9IGVhblxuICAgIC5zbGljZSgwLCAtMSlcbiAgICAuc3BsaXQoJycpXG4gICAgLm1hcCgoY2hhciwgaW5kZXgpID0+IE51bWJlcihjaGFyKSAqIGdldFBvc2l0aW9uV2VpZ2h0VGhyb3VnaExlbmd0aEFuZEluZGV4KGVhbi5sZW5ndGgsIGluZGV4KSlcbiAgICAucmVkdWNlKChhY2MsIHBhcnRpYWxTdW0pID0+IGFjYyArIHBhcnRpYWxTdW0sIDApO1xuXG4gIGNvbnN0IHJlbWFpbmRlciA9IDEwIC0gKGNoZWNrc3VtICUgMTApO1xuXG4gIHJldHVybiByZW1haW5kZXIgPCAxMCA/IHJlbWFpbmRlciA6IDA7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgc3RyaW5nIGlzIHZhbGlkIEVBTjpcbiAqIE1hdGNoZXMgRUFOLTgvRUFOLTEzIHJlZ2V4XG4gKiBIYXMgdmFsaWQgY2hlY2sgZGlnaXQuXG4gKiBcbiAqIEBwYXJhbSB0YXJnZXQgVGhlIHRhcmdldCBzdHJpbmdcbiAqIEByZXR1cm4gdHJ1ZSBpZiB0aGUgYHRhcmdldGAgaXMgYSB2YWxpZCBFQU4sIGZhbHNlIG90aGVyd2lzZVxuICovXG4gZXhwb3J0IGZ1bmN0aW9uIGlzRUFOKHRhcmdldDogc3RyaW5nKSB7XG4gIGFzc2VydFN0cmluZyh0YXJnZXQpO1xuICBjb25zdCBhY3R1YWxDaGVja0RpZ2l0ID0gTnVtYmVyKHRhcmdldC5zbGljZSgtMSkpO1xuXG4gIHJldHVybiB2YWxpZEVhblJlZ2V4LnRlc3QodGFyZ2V0KSAmJiBhY3R1YWxDaGVja0RpZ2l0ID09PSBjYWxjdWxhdGVDaGVja0RpZ2l0KHRhcmdldCk7XG59XG4iXX0=