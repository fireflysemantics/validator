import { assertString } from '../util/assertString';
import { alphanumeric } from './alpha';
/**
 * Checks whether `arg` is in alphanumeric and if so validates whether
 * the `target` string conforms to the `arg` locale.
 *
 * @param target The target string
 * @param arg The locale (Defaults to 'en-US')
 * @return true if the `target` string conforms to the `arg` locale, false otherwise
 */
export function isAlphaNumeric(target, arg) {
    if (arg === void 0) { arg = 'en-US'; }
    assertString(target);
    if (arg in alphanumeric) {
        return alphanumeric[arg].test(target);
    }
    throw new Error("Invalid locale '" + arg + "'");
}
/**
 * The alpha numeric locales
 */
export var isAlphaNumericLocales = Object.keys(alphanumeric);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNBbHBoYU51bWVyaWMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmlyZWZseXNlbWFudGljcy92YWxpZGF0b3J0cy8iLCJzb3VyY2VzIjpbImxpYi92YWxpZGF0b3JzL2lzQWxwaGFOdW1lcmljLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRXZDOzs7Ozs7O0dBT0c7QUFDSCxNQUFNLFVBQVUsY0FBYyxDQUFDLE1BQWMsRUFBRSxHQUFxQjtJQUFyQixvQkFBQSxFQUFBLGFBQXFCO0lBQ2xFLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNyQixJQUFJLEdBQUcsSUFBSSxZQUFZLEVBQUU7UUFDdkIsT0FBTyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ3ZDO0lBQ0QsTUFBTSxJQUFJLEtBQUssQ0FBQyxxQkFBbUIsR0FBRyxNQUFHLENBQUMsQ0FBQztBQUM3QyxDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLENBQUMsSUFBTSxxQkFBcUIsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXNzZXJ0U3RyaW5nIH0gZnJvbSAnLi4vdXRpbC9hc3NlcnRTdHJpbmcnO1xuaW1wb3J0IHsgYWxwaGFudW1lcmljIH0gZnJvbSAnLi9hbHBoYSc7XG5cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgYGFyZ2AgaXMgaW4gYWxwaGFudW1lcmljIGFuZCBpZiBzbyB2YWxpZGF0ZXMgd2hldGhlclxuICogdGhlIGB0YXJnZXRgIHN0cmluZyBjb25mb3JtcyB0byB0aGUgYGFyZ2AgbG9jYWxlLlxuICogXG4gKiBAcGFyYW0gdGFyZ2V0IFRoZSB0YXJnZXQgc3RyaW5nXG4gKiBAcGFyYW0gYXJnIFRoZSBsb2NhbGUgKERlZmF1bHRzIHRvICdlbi1VUycpIFxuICogQHJldHVybiB0cnVlIGlmIHRoZSBgdGFyZ2V0YCBzdHJpbmcgY29uZm9ybXMgdG8gdGhlIGBhcmdgIGxvY2FsZSwgZmFsc2Ugb3RoZXJ3aXNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0FscGhhTnVtZXJpYyh0YXJnZXQ6IHN0cmluZywgYXJnOiBzdHJpbmcgPSAnZW4tVVMnKSB7XG4gIGFzc2VydFN0cmluZyh0YXJnZXQpO1xuICBpZiAoYXJnIGluIGFscGhhbnVtZXJpYykge1xuICAgIHJldHVybiBhbHBoYW51bWVyaWNbYXJnXS50ZXN0KHRhcmdldCk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGxvY2FsZSAnJHthcmd9J2ApO1xufVxuXG4vKipcbiAqIFRoZSBhbHBoYSBudW1lcmljIGxvY2FsZXNcbiAqL1xuZXhwb3J0IGNvbnN0IGlzQWxwaGFOdW1lcmljTG9jYWxlcyA9IE9iamVjdC5rZXlzKGFscGhhbnVtZXJpYyk7Il19