import { assertString } from '../util/assertString';
import { decimal } from './alpha';
/**
 * Checks whether the `target` string is a float
 *
 * @param target The target string
 * @param options The options
 * @return true if the `target` is is a float, false otherwise
 */
export function isFloat(str, options) {
    assertString(str);
    options = options || {};
    var float = new RegExp("^(?:[-+])?(?:[0-9]+)?(?:\\" + (options.locale ? decimal[options.locale] : '.') + "[0-9]*)?(?:[eE][\\+\\-]?(?:[0-9]+))?$");
    if (str === '' || str === '.' || str === '-' || str === '+') {
        return false;
    }
    var value = parseFloat(str.replace(',', '.'));
    return float.test(str) &&
        (!options.hasOwnProperty('min') || value >= options.min) &&
        (!options.hasOwnProperty('max') || value <= options.max) &&
        (!options.hasOwnProperty('lt') || value < options.lt) &&
        (!options.hasOwnProperty('gt') || value > options.gt);
}
export var floatLocales = Object.keys(decimal);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNGbG9hdC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmaXJlZmx5c2VtYW50aWNzL3ZhbGlkYXRvcnRzLyIsInNvdXJjZXMiOlsibGliL3ZhbGlkYXRvcnMvaXNGbG9hdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDcEQsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUVsQzs7Ozs7O0dBTUc7QUFDSCxNQUFNLFVBQVUsT0FBTyxDQUFDLEdBQVcsRUFBRSxPQUFRO0lBQzNDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNsQixPQUFPLEdBQUcsT0FBTyxJQUFJLEVBQUUsQ0FBQztJQUN4QixJQUFNLEtBQUssR0FBRyxJQUFJLE1BQU0sQ0FBQyxnQ0FBNkIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRywyQ0FBdUMsQ0FBQyxDQUFDO0lBQzdJLElBQUksR0FBRyxLQUFLLEVBQUUsSUFBSSxHQUFHLEtBQUssR0FBRyxJQUFJLEdBQUcsS0FBSyxHQUFHLElBQUksR0FBRyxLQUFLLEdBQUcsRUFBRTtRQUMzRCxPQUFPLEtBQUssQ0FBQztLQUNkO0lBQ0QsSUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDaEQsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUNwQixDQUFDLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQztRQUN4RCxDQUFDLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQztRQUN4RCxDQUFDLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLEVBQUUsQ0FBQztRQUNyRCxDQUFDLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLEdBQUcsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzFELENBQUM7QUFFRCxNQUFNLENBQUMsSUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzc2VydFN0cmluZyB9IGZyb20gJy4uL3V0aWwvYXNzZXJ0U3RyaW5nJztcbmltcG9ydCB7IGRlY2ltYWwgfSBmcm9tICcuL2FscGhhJztcblxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciB0aGUgYHRhcmdldGAgc3RyaW5nIGlzIGEgZmxvYXRcbiAqIFxuICogQHBhcmFtIHRhcmdldCBUaGUgdGFyZ2V0IHN0cmluZ1xuICogQHBhcmFtIG9wdGlvbnMgVGhlIG9wdGlvbnNcbiAqIEByZXR1cm4gdHJ1ZSBpZiB0aGUgYHRhcmdldGAgaXMgaXMgYSBmbG9hdCwgZmFsc2Ugb3RoZXJ3aXNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc0Zsb2F0KHN0cjogc3RyaW5nLCBvcHRpb25zPykge1xuICBhc3NlcnRTdHJpbmcoc3RyKTtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGNvbnN0IGZsb2F0ID0gbmV3IFJlZ0V4cChgXig/OlstK10pPyg/OlswLTldKyk/KD86XFxcXCR7b3B0aW9ucy5sb2NhbGUgPyBkZWNpbWFsW29wdGlvbnMubG9jYWxlXSA6ICcuJ31bMC05XSopPyg/OltlRV1bXFxcXCtcXFxcLV0/KD86WzAtOV0rKSk/JGApO1xuICBpZiAoc3RyID09PSAnJyB8fCBzdHIgPT09ICcuJyB8fCBzdHIgPT09ICctJyB8fCBzdHIgPT09ICcrJykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCB2YWx1ZSA9IHBhcnNlRmxvYXQoc3RyLnJlcGxhY2UoJywnLCAnLicpKTtcbiAgcmV0dXJuIGZsb2F0LnRlc3Qoc3RyKSAmJlxuICAgICghb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnbWluJykgfHwgdmFsdWUgPj0gb3B0aW9ucy5taW4pICYmXG4gICAgKCFvcHRpb25zLmhhc093blByb3BlcnR5KCdtYXgnKSB8fCB2YWx1ZSA8PSBvcHRpb25zLm1heCkgJiZcbiAgICAoIW9wdGlvbnMuaGFzT3duUHJvcGVydHkoJ2x0JykgfHwgdmFsdWUgPCBvcHRpb25zLmx0KSAmJlxuICAgICghb3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnZ3QnKSB8fCB2YWx1ZSA+IG9wdGlvbnMuZ3QpO1xufVxuXG5leHBvcnQgY29uc3QgZmxvYXRMb2NhbGVzID0gT2JqZWN0LmtleXMoZGVjaW1hbCk7XG4iXX0=