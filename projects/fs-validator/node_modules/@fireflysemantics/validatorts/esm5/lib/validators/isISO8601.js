import { assertString } from '../util/assertString';
/* eslint-disable max-len */
// from http://goo.gl/0ejHHW
var iso8601 = /^([\+-]?\d{4}(?!\d{2}\b))((-?)((0[1-9]|1[0-2])(\3([12]\d|0[1-9]|3[01]))?|W([0-4]\d|5[0-3])(-?[1-7])?|(00[1-9]|0[1-9]\d|[12]\d{2}|3([0-5]\d|6[1-6])))([T\s]((([01]\d|2[0-3])((:?)[0-5]\d)?|24:?00)([\.,]\d+(?!:))?)?(\17[0-5]\d([\.,]\d+)?)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?)?)?$/;
/* eslint-enable max-len */
var isValidDate = function (str) {
    // str must have passed the ISO8601 check
    // this check is meant to catch invalid dates
    // like 2009-02-31
    // first check for ordinal dates
    var ordinalMatch = str.match(/^(\d{4})-?(\d{3})([ T]{1}\.*|$)/);
    if (ordinalMatch) {
        var oYear = Number(ordinalMatch[1]);
        var oDay = Number(ordinalMatch[2]);
        // if is leap year
        if ((oYear % 4 === 0 && oYear % 100 !== 0) || oYear % 400 === 0)
            return oDay <= 366;
        return oDay <= 365;
    }
    var match = str.match(/(\d{4})-?(\d{0,2})-?(\d*)/).map(Number);
    var year = match[1];
    var month = match[2];
    var day = match[3];
    var monthString = month ? ("0" + month).slice(-2) : month;
    var dayString = day ? ("0" + day).slice(-2) : day;
    // create a date object and compare
    var d = new Date(year + "-" + (monthString || '01') + "-" + (dayString || '01'));
    if (month && day) {
        return d.getUTCFullYear() === year
            && (d.getUTCMonth() + 1) === month
            && d.getUTCDate() === day;
    }
    return true;
};
var ɵ0 = isValidDate;
/**
 * Checks whether the `target` string is a valid ISO8601 date
 *
 * @param target The target string
 * @param options The options
 * @return true if the `target` is a valid ISO8601 date, false otherwise
 */
export function isISO8601(str, options) {
    assertString(str);
    var check = iso8601.test(str);
    if (!options)
        return check;
    if (check && options.strict)
        return isValidDate(str);
    return check;
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNJU084NjAxLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZpcmVmbHlzZW1hbnRpY3MvdmFsaWRhdG9ydHMvIiwic291cmNlcyI6WyJsaWIvdmFsaWRhdG9ycy9pc0lTTzg2MDEudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRXBELDRCQUE0QjtBQUM1Qiw0QkFBNEI7QUFDNUIsSUFBTSxPQUFPLEdBQUcsNFJBQTRSLENBQUM7QUFDN1MsMkJBQTJCO0FBQzNCLElBQU0sV0FBVyxHQUFHLFVBQUMsR0FBRztJQUN0Qix5Q0FBeUM7SUFDekMsNkNBQTZDO0lBQzdDLGtCQUFrQjtJQUNsQixnQ0FBZ0M7SUFDaEMsSUFBTSxZQUFZLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO0lBQ2xFLElBQUksWUFBWSxFQUFFO1FBQ2hCLElBQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0QyxJQUFNLElBQUksR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDckMsa0JBQWtCO1FBQ2xCLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLEdBQUcsR0FBRyxLQUFLLENBQUMsQ0FBQyxJQUFJLEtBQUssR0FBRyxHQUFHLEtBQUssQ0FBQztZQUFFLE9BQU8sSUFBSSxJQUFJLEdBQUcsQ0FBQztRQUNwRixPQUFPLElBQUksSUFBSSxHQUFHLENBQUM7S0FDcEI7SUFDRCxJQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLDJCQUEyQixDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2pFLElBQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN0QixJQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdkIsSUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3JCLElBQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQSxNQUFJLEtBQU8sQ0FBQSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDMUQsSUFBTSxTQUFTLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBLE1BQUksR0FBSyxDQUFBLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztJQUVsRCxtQ0FBbUM7SUFDbkMsSUFBTSxDQUFDLEdBQUcsSUFBSSxJQUFJLENBQUksSUFBSSxVQUFJLFdBQVcsSUFBSSxJQUFJLFdBQUksU0FBUyxJQUFJLElBQUksQ0FBRSxDQUFDLENBQUM7SUFDMUUsSUFBSSxLQUFLLElBQUksR0FBRyxFQUFFO1FBQ2hCLE9BQU8sQ0FBQyxDQUFDLGNBQWMsRUFBRSxLQUFLLElBQUk7ZUFDN0IsQ0FBQyxDQUFDLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEtBQUssS0FBSztlQUMvQixDQUFDLENBQUMsVUFBVSxFQUFFLEtBQUssR0FBRyxDQUFDO0tBQzdCO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDLENBQUE7O0FBR0Q7Ozs7OztHQU1HO0FBQ0gsTUFBTSxVQUFVLFNBQVMsQ0FBQyxHQUFHLEVBQUUsT0FBUTtJQUNyQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbEIsSUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNoQyxJQUFJLENBQUMsT0FBTztRQUFFLE9BQU8sS0FBSyxDQUFDO0lBQzNCLElBQUksS0FBSyxJQUFJLE9BQU8sQ0FBQyxNQUFNO1FBQUUsT0FBTyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDckQsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXNzZXJ0U3RyaW5nIH0gZnJvbSAnLi4vdXRpbC9hc3NlcnRTdHJpbmcnO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG4vLyBmcm9tIGh0dHA6Ly9nb28uZ2wvMGVqSEhXXG5jb25zdCBpc284NjAxID0gL14oW1xcKy1dP1xcZHs0fSg/IVxcZHsyfVxcYikpKCgtPykoKDBbMS05XXwxWzAtMl0pKFxcMyhbMTJdXFxkfDBbMS05XXwzWzAxXSkpP3xXKFswLTRdXFxkfDVbMC0zXSkoLT9bMS03XSk/fCgwMFsxLTldfDBbMS05XVxcZHxbMTJdXFxkezJ9fDMoWzAtNV1cXGR8NlsxLTZdKSkpKFtUXFxzXSgoKFswMV1cXGR8MlswLTNdKSgoOj8pWzAtNV1cXGQpP3wyNDo/MDApKFtcXC4sXVxcZCsoPyE6KSk/KT8oXFwxN1swLTVdXFxkKFtcXC4sXVxcZCspPyk/KFt6Wl18KFtcXCstXSkoWzAxXVxcZHwyWzAtM10pOj8oWzAtNV1cXGQpPyk/KT8pPyQvO1xuLyogZXNsaW50LWVuYWJsZSBtYXgtbGVuICovXG5jb25zdCBpc1ZhbGlkRGF0ZSA9IChzdHIpID0+IHtcbiAgLy8gc3RyIG11c3QgaGF2ZSBwYXNzZWQgdGhlIElTTzg2MDEgY2hlY2tcbiAgLy8gdGhpcyBjaGVjayBpcyBtZWFudCB0byBjYXRjaCBpbnZhbGlkIGRhdGVzXG4gIC8vIGxpa2UgMjAwOS0wMi0zMVxuICAvLyBmaXJzdCBjaGVjayBmb3Igb3JkaW5hbCBkYXRlc1xuICBjb25zdCBvcmRpbmFsTWF0Y2ggPSBzdHIubWF0Y2goL14oXFxkezR9KS0/KFxcZHszfSkoWyBUXXsxfVxcLip8JCkvKTtcbiAgaWYgKG9yZGluYWxNYXRjaCkge1xuICAgIGNvbnN0IG9ZZWFyID0gTnVtYmVyKG9yZGluYWxNYXRjaFsxXSk7XG4gICAgY29uc3Qgb0RheSA9IE51bWJlcihvcmRpbmFsTWF0Y2hbMl0pO1xuICAgIC8vIGlmIGlzIGxlYXAgeWVhclxuICAgIGlmICgob1llYXIgJSA0ID09PSAwICYmIG9ZZWFyICUgMTAwICE9PSAwKSB8fCBvWWVhciAlIDQwMCA9PT0gMCkgcmV0dXJuIG9EYXkgPD0gMzY2O1xuICAgIHJldHVybiBvRGF5IDw9IDM2NTtcbiAgfVxuICBjb25zdCBtYXRjaCA9IHN0ci5tYXRjaCgvKFxcZHs0fSktPyhcXGR7MCwyfSktPyhcXGQqKS8pLm1hcChOdW1iZXIpO1xuICBjb25zdCB5ZWFyID0gbWF0Y2hbMV07XG4gIGNvbnN0IG1vbnRoID0gbWF0Y2hbMl07XG4gIGNvbnN0IGRheSA9IG1hdGNoWzNdO1xuICBjb25zdCBtb250aFN0cmluZyA9IG1vbnRoID8gYDAke21vbnRofWAuc2xpY2UoLTIpIDogbW9udGg7XG4gIGNvbnN0IGRheVN0cmluZyA9IGRheSA/IGAwJHtkYXl9YC5zbGljZSgtMikgOiBkYXk7XG5cbiAgLy8gY3JlYXRlIGEgZGF0ZSBvYmplY3QgYW5kIGNvbXBhcmVcbiAgY29uc3QgZCA9IG5ldyBEYXRlKGAke3llYXJ9LSR7bW9udGhTdHJpbmcgfHwgJzAxJ30tJHtkYXlTdHJpbmcgfHwgJzAxJ31gKTtcbiAgaWYgKG1vbnRoICYmIGRheSkge1xuICAgIHJldHVybiBkLmdldFVUQ0Z1bGxZZWFyKCkgPT09IHllYXJcbiAgICAgICYmIChkLmdldFVUQ01vbnRoKCkgKyAxKSA9PT0gbW9udGhcbiAgICAgICYmIGQuZ2V0VVRDRGF0ZSgpID09PSBkYXk7XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cblxuLyoqXG4gKiBDaGVja3Mgd2hldGhlciB0aGUgYHRhcmdldGAgc3RyaW5nIGlzIGEgdmFsaWQgSVNPODYwMSBkYXRlXG4gKiBcbiAqIEBwYXJhbSB0YXJnZXQgVGhlIHRhcmdldCBzdHJpbmdcbiAqIEBwYXJhbSBvcHRpb25zIFRoZSBvcHRpb25zXG4gKiBAcmV0dXJuIHRydWUgaWYgdGhlIGB0YXJnZXRgIGlzIGEgdmFsaWQgSVNPODYwMSBkYXRlLCBmYWxzZSBvdGhlcndpc2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzSVNPODYwMShzdHIsIG9wdGlvbnM/KSB7XG4gIGFzc2VydFN0cmluZyhzdHIpO1xuICBjb25zdCBjaGVjayA9IGlzbzg2MDEudGVzdChzdHIpO1xuICBpZiAoIW9wdGlvbnMpIHJldHVybiBjaGVjaztcbiAgaWYgKGNoZWNrICYmIG9wdGlvbnMuc3RyaWN0KSByZXR1cm4gaXNWYWxpZERhdGUoc3RyKTtcbiAgcmV0dXJuIGNoZWNrO1xufVxuIl19