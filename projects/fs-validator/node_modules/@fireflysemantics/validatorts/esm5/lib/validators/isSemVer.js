import { assertString } from '../util/assertString';
import { multilineRegexp } from '../util/multilineRegex';
/**
 * Regular Expression to match
 * semantic versioning (SemVer)
 * built from multi-line, multi-parts regexp
 * Reference: https://semver.org/
 */
var semanticVersioningRegex = multilineRegexp([
    '^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)',
    '(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))',
    '?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$',
]);
/**
 * Check if `target` is a valid semver version
 *
 * @param target The target
 * @return true if the `target` is a valid semver version, false otherwise
 */
export function isSemVer(target) {
    assertString(target);
    return semanticVersioningRegex.test(target);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXNTZW1WZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmlyZWZseXNlbWFudGljcy92YWxpZGF0b3J0cy8iLCJzb3VyY2VzIjpbImxpYi92YWxpZGF0b3JzL2lzU2VtVmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUNsRCxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFFdkQ7Ozs7O0dBS0c7QUFDSCxJQUFNLHVCQUF1QixHQUFHLGVBQWUsQ0FBQztJQUM5QyxnREFBZ0Q7SUFDaEQscUdBQXFHO0lBQ3JHLGdEQUFnRDtDQUNqRCxDQUFDLENBQUM7QUFFSDs7Ozs7R0FLRztBQUNILE1BQU0sVUFBVSxRQUFRLENBQUMsTUFBYTtJQUNwQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDcEIsT0FBTyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7QUFDN0MsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7YXNzZXJ0U3RyaW5nfSBmcm9tICcuLi91dGlsL2Fzc2VydFN0cmluZyc7XG5pbXBvcnQge211bHRpbGluZVJlZ2V4cH0gZnJvbSAnLi4vdXRpbC9tdWx0aWxpbmVSZWdleCc7XG5cbi8qKlxuICogUmVndWxhciBFeHByZXNzaW9uIHRvIG1hdGNoXG4gKiBzZW1hbnRpYyB2ZXJzaW9uaW5nIChTZW1WZXIpXG4gKiBidWlsdCBmcm9tIG11bHRpLWxpbmUsIG11bHRpLXBhcnRzIHJlZ2V4cFxuICogUmVmZXJlbmNlOiBodHRwczovL3NlbXZlci5vcmcvXG4gKi9cbmNvbnN0IHNlbWFudGljVmVyc2lvbmluZ1JlZ2V4ID0gbXVsdGlsaW5lUmVnZXhwKFtcbiAgJ14oMHxbMS05XVxcXFxkKilcXFxcLigwfFsxLTldXFxcXGQqKVxcXFwuKDB8WzEtOV1cXFxcZCopJyxcbiAgJyg/Oi0oKD86MHxbMS05XVxcXFxkKnxcXFxcZCpbYS16QS1aLV1bMC05YS16QS1aLV0qKSg/OlxcXFwuKD86MHxbMS05XVxcXFxkKnxcXFxcZCpbYS16QS1aLV1bMC05YS16QS1aLV0qKSkqKSknLFxuICAnPyg/OlxcXFwrKFswLTlhLXpBLVotXSsoPzpcXFxcLlswLTlhLXpBLVotXSspKikpPyQnLFxuXSk7XG5cbi8qKlxuICogQ2hlY2sgaWYgYHRhcmdldGAgaXMgYSB2YWxpZCBzZW12ZXIgdmVyc2lvblxuICpcbiAqIEBwYXJhbSB0YXJnZXQgVGhlIHRhcmdldFxuICogQHJldHVybiB0cnVlIGlmIHRoZSBgdGFyZ2V0YCBpcyBhIHZhbGlkIHNlbXZlciB2ZXJzaW9uLCBmYWxzZSBvdGhlcndpc2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzU2VtVmVyKHRhcmdldDpzdHJpbmcpIHtcbiAgYXNzZXJ0U3RyaW5nKHRhcmdldClcbiAgcmV0dXJuIHNlbWFudGljVmVyc2lvbmluZ1JlZ2V4LnRlc3QodGFyZ2V0KVxufVxuIl19