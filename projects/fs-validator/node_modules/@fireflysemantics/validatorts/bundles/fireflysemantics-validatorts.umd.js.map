{"version":3,"file":"fireflysemantics-validatorts.umd.js","sources":["../../../node_modules/tslib/tslib.es6.js","ng://@fireflysemantics/validatorts/lib/validators/alpha.ts","ng://@fireflysemantics/validatorts/lib/util/assertString.ts","ng://@fireflysemantics/validatorts/lib/util/toString.ts","ng://@fireflysemantics/validatorts/lib/validators/contains.ts","ng://@fireflysemantics/validatorts/lib/validators/equals.ts","ng://@fireflysemantics/validatorts/lib/sanitizers/escape.ts","ng://@fireflysemantics/validatorts/lib/sanitizers/toDate.ts","ng://@fireflysemantics/validatorts/lib/validators/isAfter.ts","ng://@fireflysemantics/validatorts/lib/validators/isAlpha.ts","ng://@fireflysemantics/validatorts/lib/validators/isAlphaNumeric.ts","ng://@fireflysemantics/validatorts/lib/validators/isAscii.ts","ng://@fireflysemantics/validatorts/lib/validators/isBase32.ts","ng://@fireflysemantics/validatorts/lib/validators/isBase64.ts","ng://@fireflysemantics/validatorts/lib/validators/isBefore.ts","ng://@fireflysemantics/validatorts/lib/validators/isBIC.ts","ng://@fireflysemantics/validatorts/lib/validators/isBoolean.ts","ng://@fireflysemantics/validatorts/lib/validators/isBtcAddress.ts","ng://@fireflysemantics/validatorts/lib/validators/isByteLength.ts","ng://@fireflysemantics/validatorts/lib/validators/isCreditCard.ts","ng://@fireflysemantics/validatorts/lib/util/merge.ts","ng://@fireflysemantics/validatorts/lib/validators/isCurrency.ts","ng://@fireflysemantics/validatorts/lib/validators/isDataURI.ts","ng://@fireflysemantics/validatorts/lib/util/includes.ts","ng://@fireflysemantics/validatorts/lib/validators/isDecimal.ts","ng://@fireflysemantics/validatorts/lib/validators/isFloat.ts","ng://@fireflysemantics/validatorts/lib/sanitizers/toFloat.ts","ng://@fireflysemantics/validatorts/lib/validators/isDivisibleBy.ts","ng://@fireflysemantics/validatorts/lib/validators/isEAN.ts","ng://@fireflysemantics/validatorts/lib/validators/isFQDN.ts","ng://@fireflysemantics/validatorts/lib/validators/isIP.ts","ng://@fireflysemantics/validatorts/lib/validators/isEmail.ts","ng://@fireflysemantics/validatorts/lib/validators/isEmpty.ts","ng://@fireflysemantics/validatorts/lib/validators/isEthereumAddress.ts","ng://@fireflysemantics/validatorts/lib/validators/isFullWidth.ts","ng://@fireflysemantics/validatorts/lib/validators/isHalfWidth.ts","ng://@fireflysemantics/validatorts/lib/validators/isHash.ts","ng://@fireflysemantics/validatorts/lib/validators/isHexadecimal.ts","ng://@fireflysemantics/validatorts/lib/validators/isHexColor.ts","ng://@fireflysemantics/validatorts/lib/validators/isHSL.ts","ng://@fireflysemantics/validatorts/lib/validators/isIBAN.ts","ng://@fireflysemantics/validatorts/lib/validators/isIdentityCard.ts","ng://@fireflysemantics/validatorts/lib/validators/isIn.ts","ng://@fireflysemantics/validatorts/lib/validators/isInt.ts","ng://@fireflysemantics/validatorts/lib/validators/isISBN.ts","ng://@fireflysemantics/validatorts/lib/validators/isISIN.ts","ng://@fireflysemantics/validatorts/lib/validators/isISO8601.ts","ng://@fireflysemantics/validatorts/lib/validators/isISO31661Alpha2.ts","ng://@fireflysemantics/validatorts/lib/validators/isISO31661Alpha3.ts","ng://@fireflysemantics/validatorts/lib/validators/isISRC.ts","ng://@fireflysemantics/validatorts/lib/validators/isISSN.ts","ng://@fireflysemantics/validatorts/lib/validators/isJSON.ts","ng://@fireflysemantics/validatorts/lib/validators/isJWT.ts","ng://@fireflysemantics/validatorts/lib/validators/isLatLong.ts","ng://@fireflysemantics/validatorts/lib/validators/isLength.ts","ng://@fireflysemantics/validatorts/lib/validators/isLocale.ts","ng://@fireflysemantics/validatorts/lib/validators/isLowercase.ts","ng://@fireflysemantics/validatorts/lib/validators/isMACAddress.ts","ng://@fireflysemantics/validatorts/lib/validators/isMagnetURI.ts","ng://@fireflysemantics/validatorts/lib/validators/isMD5.ts","ng://@fireflysemantics/validatorts/lib/validators/isMimeType.ts","ng://@fireflysemantics/validatorts/lib/validators/isMobilePhone.ts","ng://@fireflysemantics/validatorts/lib/validators/isMongoId.ts","ng://@fireflysemantics/validatorts/lib/validators/isMultibyte.ts","ng://@fireflysemantics/validatorts/lib/validators/isNumeric.ts","ng://@fireflysemantics/validatorts/lib/validators/isOctal.ts","ng://@fireflysemantics/validatorts/lib/validators/isPassportNumber.ts","ng://@fireflysemantics/validatorts/lib/validators/isPort.ts","ng://@fireflysemantics/validatorts/lib/validators/isPostalCode.ts","ng://@fireflysemantics/validatorts/lib/validators/isRFC3339.ts","ng://@fireflysemantics/validatorts/lib/validators/isRgbColor.ts","ng://@fireflysemantics/validatorts/lib/util/multilineRegex.ts","ng://@fireflysemantics/validatorts/lib/validators/isSemVer.ts","ng://@fireflysemantics/validatorts/lib/validators/isSlug.ts","ng://@fireflysemantics/validatorts/lib/validators/isSurrogatePair.ts","ng://@fireflysemantics/validatorts/lib/validators/isUppercase.ts","ng://@fireflysemantics/validatorts/lib/validators/isURL.ts","ng://@fireflysemantics/validatorts/lib/validators/isUUID.ts","ng://@fireflysemantics/validatorts/lib/validators/isVariableWidth.ts","ng://@fireflysemantics/validatorts/lib/validators/isWhitelisted.ts","ng://@fireflysemantics/validatorts/lib/validators/matches.ts","ng://@fireflysemantics/validatorts/lib/sanitizers/blacklist.ts","ng://@fireflysemantics/validatorts/lib/sanitizers/ltrim.ts","ng://@fireflysemantics/validatorts/lib/sanitizers/rtrim.ts","ng://@fireflysemantics/validatorts/lib/sanitizers/stripLow.ts","ng://@fireflysemantics/validatorts/lib/sanitizers/toBoolean.ts","ng://@fireflysemantics/validatorts/lib/sanitizers/toInt.ts","ng://@fireflysemantics/validatorts/lib/sanitizers/trim.ts","ng://@fireflysemantics/validatorts/lib/sanitizers/unescape.ts","ng://@fireflysemantics/validatorts/lib/sanitizers/whitelist.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export const alpha = {\n  'en-US': /^[A-Z]+$/i,\n  'bg-BG': /^[А-Я]+$/i,\n  'cs-CZ': /^[A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]+$/i,\n  'da-DK': /^[A-ZÆØÅ]+$/i,\n  'de-DE': /^[A-ZÄÖÜß]+$/i,\n  'el-GR': /^[Α-ώ]+$/i,\n  'es-ES': /^[A-ZÁÉÍÑÓÚÜ]+$/i,\n  'fr-FR': /^[A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]+$/i,\n  'it-IT': /^[A-ZÀÉÈÌÎÓÒÙ]+$/i,\n  'nb-NO': /^[A-ZÆØÅ]+$/i,\n  'nl-NL': /^[A-ZÁÉËÏÓÖÜÚ]+$/i,\n  'nn-NO': /^[A-ZÆØÅ]+$/i,\n  'hu-HU': /^[A-ZÁÉÍÓÖŐÚÜŰ]+$/i,\n  'pl-PL': /^[A-ZĄĆĘŚŁŃÓŻŹ]+$/i,\n  'pt-PT': /^[A-ZÃÁÀÂÄÇÉÊËÍÏÕÓÔÖÚÜ]+$/i,\n  'ru-RU': /^[А-ЯЁ]+$/i,\n  'sl-SI': /^[A-ZČĆĐŠŽ]+$/i,\n  'sk-SK': /^[A-ZÁČĎÉÍŇÓŠŤÚÝŽĹŔĽÄÔ]+$/i,\n  'sr-RS@latin': /^[A-ZČĆŽŠĐ]+$/i,\n  'sr-RS': /^[А-ЯЂЈЉЊЋЏ]+$/i,\n  'sv-SE': /^[A-ZÅÄÖ]+$/i,\n  'tr-TR': /^[A-ZÇĞİıÖŞÜ]+$/i,\n  'uk-UA': /^[А-ЩЬЮЯЄIЇҐі]+$/i,\n  'ku-IQ': /^[ئابپتجچحخدرڕزژسشعغفڤقکگلڵمنوۆھەیێيطؤثآإأكضصةظذ]+$/i,\n  ar: /^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]+$/,\n  he: /^[א-ת]+$/,\n  'fa-IR': /^['آابپتثجچهخدذرزژسشصضطظعغفقکگلمنوهی']+$/i,\n};\n\nexport const alphanumeric = {\n  'en-US': /^[0-9A-Z]+$/i,\n  'bg-BG': /^[0-9А-Я]+$/i,\n  'cs-CZ': /^[0-9A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]+$/i,\n  'da-DK': /^[0-9A-ZÆØÅ]+$/i,\n  'de-DE': /^[0-9A-ZÄÖÜß]+$/i,\n  'el-GR': /^[0-9Α-ω]+$/i,\n  'es-ES': /^[0-9A-ZÁÉÍÑÓÚÜ]+$/i,\n  'fr-FR': /^[0-9A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]+$/i,\n  'it-IT': /^[0-9A-ZÀÉÈÌÎÓÒÙ]+$/i,\n  'hu-HU': /^[0-9A-ZÁÉÍÓÖŐÚÜŰ]+$/i,\n  'nb-NO': /^[0-9A-ZÆØÅ]+$/i,\n  'nl-NL': /^[0-9A-ZÁÉËÏÓÖÜÚ]+$/i,\n  'nn-NO': /^[0-9A-ZÆØÅ]+$/i,\n  'pl-PL': /^[0-9A-ZĄĆĘŚŁŃÓŻŹ]+$/i,\n  'pt-PT': /^[0-9A-ZÃÁÀÂÄÇÉÊËÍÏÕÓÔÖÚÜ]+$/i,\n  'ru-RU': /^[0-9А-ЯЁ]+$/i,\n  'sl-SI': /^[0-9A-ZČĆĐŠŽ]+$/i,\n  'sk-SK': /^[0-9A-ZÁČĎÉÍŇÓŠŤÚÝŽĹŔĽÄÔ]+$/i,\n  'sr-RS@latin': /^[0-9A-ZČĆŽŠĐ]+$/i,\n  'sr-RS': /^[0-9А-ЯЂЈЉЊЋЏ]+$/i,\n  'sv-SE': /^[0-9A-ZÅÄÖ]+$/i,\n  'tr-TR': /^[0-9A-ZÇĞİıÖŞÜ]+$/i,\n  'uk-UA': /^[0-9А-ЩЬЮЯЄIЇҐі]+$/i,\n  'ku-IQ': /^[٠١٢٣٤٥٦٧٨٩0-9ئابپتجچحخدرڕزژسشعغفڤقکگلڵمنوۆھەیێيطؤثآإأكضصةظذ]+$/i,\n  ar: /^[٠١٢٣٤٥٦٧٨٩0-9ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]+$/,\n  he: /^[0-9א-ת]+$/,\n  'fa-IR': /^['0-9آابپتثجچهخدذرزژسشصضطظعغفقکگلمنوهی۱۲۳۴۵۶۷۸۹۰']+$/i,\n};\n\nexport const decimal = {\n  'en-US': '.',\n  ar: '٫',\n};\n\n\nexport const englishLocales = ['AU', 'GB', 'HK', 'IN', 'NZ', 'ZA', 'ZM'];\n\nfor (let locale, i = 0; i < englishLocales.length; i++) {\n  locale = `en-${englishLocales[i]}`;\n  alpha[locale] = alpha['en-US'];\n  alphanumeric[locale] = alphanumeric['en-US'];\n  decimal[locale] = decimal['en-US'];\n}\n\n// Source: http://www.localeplanet.com/java/\nexport const arabicLocales = [\n  'AE', 'BH', 'DZ', 'EG', 'IQ', 'JO', 'KW', 'LB', 'LY',\n  'MA', 'QM', 'QA', 'SA', 'SD', 'SY', 'TN', 'YE',\n];\n\nfor (let locale, i = 0; i < arabicLocales.length; i++) {\n  locale = `ar-${arabicLocales[i]}`;\n  alpha[locale] = alpha.ar;\n  alphanumeric[locale] = alphanumeric.ar;\n  decimal[locale] = decimal.ar;\n}\n\n// Source: https://en.wikipedia.org/wiki/Decimal_mark\nexport const dotDecimal = ['ar-EG', 'ar-LB', 'ar-LY'];\nexport const commaDecimal = [\n  'bg-BG', 'cs-CZ', 'da-DK', 'de-DE', 'el-GR', 'en-ZM', 'es-ES', 'fr-FR', 'it-IT', 'ku-IQ', 'hu-HU', 'nb-NO',\n  'nn-NO', 'nl-NL', 'pl-PL', 'pt-PT', 'ru-RU', 'sl-SI', 'sr-RS@latin',\n  'sr-RS', 'sv-SE', 'tr-TR', 'uk-UA',\n];\n\nfor (let i = 0; i < dotDecimal.length; i++) {\n  decimal[dotDecimal[i]] = decimal['en-US'];\n}\n\nfor (let i = 0; i < commaDecimal.length; i++) {\n  decimal[commaDecimal[i]] = ',';\n}\n\nalpha['pt-BR'] = alpha['pt-PT'];\nalphanumeric['pt-BR'] = alphanumeric['pt-PT'];\ndecimal['pt-BR'] = decimal['pt-PT'];\n\n// see #862\nalpha['pl-Pl'] = alpha['pl-PL'];\nalphanumeric['pl-Pl'] = alphanumeric['pl-PL'];\ndecimal['pl-Pl'] = decimal['pl-PL'];\n","/**\n * Tests whether `input` is of type string\n * @param input The value that should be a string\n * @throws TypeError if the value is not a string \n */\nexport function assertString(input:any) {\n  const isString = (typeof input === 'string' || input instanceof String);\n\n  if (!isString) {\n    let invalidType;\n    if (input === null) {\n      invalidType = 'null';\n    } else {\n      invalidType = typeof input;\n      if (invalidType === 'object' && input.constructor && input.constructor.hasOwnProperty('name')) {\n        invalidType = input.constructor.name;\n      } else {\n        invalidType = `a ${invalidType}`;\n      }\n    }\n    throw new TypeError(`Expected string but received ${invalidType}.`);\n  }\n}\n","/**\n * Convert the `input` argument into a string\n * @param input The input that should be converted to a string\n * @return The string value for the `input` argument\n */\nexport function toString(input) {\n  if (typeof input === 'object' && input !== null) {\n    if (typeof input.toString === 'function') {\n      input = input.toString();\n    } else {\n      input = '[object Object]';\n    }\n  } else if (input === null || typeof input === 'undefined' || (isNaN(input) && !input.length)) {\n    input = '';\n  }\n  return String(input);\n}\n","import { assertString } from '../util/assertString';\nimport { toString } from '../util/toString';\n\n/**\n * Test whether the target string contains the arg.\n * \n * @param target The string that should contains the element\n * @param arg The contained string\n * @return true if the `target` string contains the `arg` string, false otherwise\n */\nexport function contains(target: string, arg: string) {\n  assertString(target);\n  return target.indexOf(toString(arg)) >= 0;\n}\n","import { assertString } from '../util/assertString'\n\n/**\n * Compares the `target` and `arg` strings for strict (`===`) equality\n * \n * @param target The target string to compare to\n * @param arg The argument to perform the comparison with \n * @return true if the `target` is strictly equal to the `arg`, false otherwise\n */\nexport function equals(target: string, arg: string) {\n  assertString(target)\n  return target === arg\n}","import { assertString } from '../util/assertString';\n\n/**\n * Replaces <, >, &, ', \" and / with HTML entities. \n * @param str The string to perform the `escape` operation on.\n */\nexport function escape(str:string) {\n  assertString(str);\n  return (str.replace(/&/g, '&amp;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#x27;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\\//g, '&#x2F;')\n    .replace(/\\\\/g, '&#x5C;')\n    .replace(/`/g, '&#96;'))\n}","import { assertString } from '../util/assertString';\n\nexport function toDate(date: string) {\n  assertString(date);\n  const millis: number = Date.parse(date);\n  return !isNaN(millis) ? new Date(date) : null;\n}\n","import { assertString } from '../util/assertString';\nimport { toDate } from '../sanitizers/toDate';\n\n/**\n * Checks whether the `target` date comes after the `arg` date\n * \n * @param target The target date\n * @param arg The argument to perform the comparison with \n * @return true if the `target` date comes after the `arg` date, false otherwise\n */\nexport function isAfter(target: string, arg: string = String(new Date())) {\n  assertString(target);\n  const comparison = toDate(arg);\n  const original = toDate(target);\n  return !!(original && comparison && original > comparison);\n}","import { assertString } from '../util/assertString';\nimport { alpha } from './alpha';\n\n/**\n * Checks whether `arg` is in alpha and if so validates whether\n * the `target` string conforms to the `arg` locale.\n * \n * @param target The target string to compare to\n * @param arg The argument that might equal the target \n * @return true if the `target` date comes after the `arg` date, false otherwise\n */\nexport function isAlpha(target: string, arg: string = 'en-US') {\n  assertString(target);\n  if (arg in alpha) {\n    return alpha[arg].test(target);\n  }\n  throw new Error(`Invalid locale '${arg}'`);\n}\n\n/**\n * The alpha locales\n */\nexport const isAlphaLocales = Object.keys(alpha);","import { assertString } from '../util/assertString';\nimport { alphanumeric } from './alpha';\n\n/**\n * Checks whether `arg` is in alphanumeric and if so validates whether\n * the `target` string conforms to the `arg` locale.\n * \n * @param target The target string\n * @param arg The locale (Defaults to 'en-US') \n * @return true if the `target` string conforms to the `arg` locale, false otherwise\n */\nexport function isAlphaNumeric(target: string, arg: string = 'en-US') {\n  assertString(target);\n  if (arg in alphanumeric) {\n    return alphanumeric[arg].test(target);\n  }\n  throw new Error(`Invalid locale '${arg}'`);\n}\n\n/**\n * The alpha numeric locales\n */\nexport const isAlphaNumericLocales = Object.keys(alphanumeric);","import { assertString } from '../util/assertString';\n\n/* eslint-disable no-control-regex */\nconst ascii = /^[\\x00-\\x7F]+$/;\n/* eslint-enable no-control-regex */\n\n/**\n * Checks whether the `target` conforms to the ascii standard\n * \n * @param target The target string\n * @return true if the `target` conforms to the ascii standard, false otherwise\n */\nexport function isAscii(target: string) {\n  assertString(target);\n  return ascii.test(target);\n}","import { assertString } from '../util/assertString';\n\nconst base32 = /^[A-Z2-7]+=*$/;\n\n/**\n * Checks whether the `target` is base32 encoded\n * \n * @param target The target string\n * @return true if the `target` is base32 encoded, false otherwise\n */\nexport function isBase32(str: string) {\n  assertString(str);\n  const len = str.length;\n  if (len > 0 && len % 8 === 0 && base32.test(str)) {\n    return true;\n  }\n  return false;\n}\n","import { assertString } from '../util/assertString';\n\nconst notBase64 = /[^A-Z0-9+\\/=]/i;\n\n/**\n * Checks whether the `target` is base64 encoded\n * \n * @param target The target string\n * @return true if the `target` is base64 encoded, false otherwise\n */\nexport function isBase64(str: string) {\n  assertString(str);\n  const len = str.length;\n  if (!len || len % 4 !== 0 || notBase64.test(str)) {\n    return false;\n  }\n  const firstPaddingChar = str.indexOf('=');\n  return firstPaddingChar === -1 ||\n    firstPaddingChar === len - 1 ||\n    (firstPaddingChar === len - 2 && str[len - 1] === '=');\n}\n","import { assertString } from '../util/assertString';\nimport { toDate } from '../sanitizers/toDate';\n\n/**\n * Checks whether the `target` date comes before the `arg` date\n * \n * @param target The target date\n * @param arg The argument  \n * @return true if the `target` date comes before the `arg` date, false otherwise\n */\nexport function isBefore(target: string, arg: string = String(new Date())) {\n  assertString(target);\n  const comparison = toDate(arg);\n  const original = toDate(target);\n  return !!(original && comparison && original < comparison);\n}\n","import { assertString } from '../util/assertString';\n\nconst isBICReg = /^[A-z]{4}[A-z]{2}\\w{2}(\\w{3})?$/;\n\n\n/**\n * Checks whether the `target` is BIC encoded\n * \n * @param target The target string\n * @return true if the `target` is BIC encoded, false otherwise\n */\nexport function isBIC(str: string) {\n  assertString(str);\n  return isBICReg.test(str);\n}\n","import { assertString } from '../util/assertString';\n\n/**\n * Checks whether the `target` is a boolean value\n * meaning it contains of of `['true', 'false', '1', '0']` \n * \n * @param target The target string\n * @return true if the `target` is a boolean value, false otherwise\n */\nexport function isBoolean(str: string) {\n  assertString(str);\n  return (['true', 'false', '1', '0'].indexOf(str) >= 0);\n}\n","import { assertString } from '../util/assertString';\n\n// supports Bech32 addresses\nconst btc = /^(bc1|[13])[a-zA-HJ-NP-Z0-9]{25,39}$/;\n\n/**\n * Checks whether the `target` is a btc address \n * \n * @param target The target string\n * @return true if the `target` is a btc address, false otherwise\n */\nexport function isBtcAddress(str: string) {\n  assertString(str);\n  return btc.test(str);\n}\n","import { assertString } from '../util/assertString';\n\n/* eslint-disable prefer-rest-params */\n\n/**\n * Checks whether the `target` string's length (in UTF-8 bytes) \n * falls in a range.\n * \n * @param target The target string\n * @param options The option parameters containing the min and max length of the string \n * @return true if the `target` strings conforms to the provided range\n */\nexport function isByteLength(target: string, options?: any) {\n  assertString(target);\n  let min;\n  let max;\n  if (typeof (options) === 'object') {\n    min = options.min || 0;\n    max = options.max;\n  } else { // backwards compatibility: isByteLength(str, min [, max])\n    min = arguments[1];\n    max = arguments[2];\n  }\n  const len = encodeURI(target).split(/%..|./).length - 1;\n  return len >= min && (typeof max === 'undefined' || len <= max);\n}","import { assertString } from '../util/assertString';\n\n/* eslint-disable max-len */\nconst creditCard = /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|(222[1-9]|22[3-9][0-9]|2[3-6][0-9]{2}|27[01][0-9]|2720)[0-9]{12}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11}|6[27][0-9]{14})$/;\n/* eslint-enable max-len */\n\n/**\n * Checks whether the `target` string is a credit card number\n * \n * @param target The target string\n * @return true if the `target` is a credit card number, false otherwise\n */\nexport function isCreditCard(target: string) {\n  assertString(target);\n  const sanitized = target.replace(/[- ]+/g, '');\n  if (!creditCard.test(sanitized)) {\n    return false;\n  }\n  let sum = 0;\n  let digit;\n  let tmpNum;\n  let shouldDouble;\n  for (let i = sanitized.length - 1; i >= 0; i--) {\n    digit = sanitized.substring(i, (i + 1));\n    tmpNum = parseInt(digit, 10);\n    if (shouldDouble) {\n      tmpNum *= 2;\n      if (tmpNum >= 10) {\n        sum += ((tmpNum % 10) + 1);\n      } else {\n        sum += tmpNum;\n      }\n    } else {\n      sum += tmpNum;\n    }\n    shouldDouble = !shouldDouble;\n  }\n  return !!((sum % 10) === 0 ? sanitized : false);\n}\n","export function merge(obj = { }, defaults) {\n  for (const key in defaults) {\n    if (typeof obj[key] === 'undefined') {\n      obj[key] = defaults[key];\n    }\n  }\n  return obj;\n}\n","import { merge } from '../util/merge';\nimport { assertString } from '../util/assertString';\n\nfunction currencyRegex(options) {\n  let decimal_digits = `\\\\d{${options.digits_after_decimal[0]}}`;\n  options.digits_after_decimal.forEach((digit, index) => { if (index !== 0) decimal_digits = `${decimal_digits}|\\\\d{${digit}}`; });\n  const symbol =\n    `(\\\\${options.symbol.replace(/\\./g, '\\\\.')})${(options.require_symbol ? '' : '?')}`,\n    negative = '-?',\n    whole_dollar_amount_without_sep = '[1-9]\\\\d*',\n    whole_dollar_amount_with_sep = `[1-9]\\\\d{0,2}(\\\\${options.thousands_separator}\\\\d{3})*`,\n    valid_whole_dollar_amounts = [\n      '0', whole_dollar_amount_without_sep, whole_dollar_amount_with_sep],\n    whole_dollar_amount = `(${valid_whole_dollar_amounts.join('|')})?`,\n    decimal_amount = `(\\\\${options.decimal_separator}(${decimal_digits}))${options.require_decimal ? '' : '?'}`;\n  let pattern = whole_dollar_amount + (options.allow_decimal || options.require_decimal ? decimal_amount : '');\n\n  // default is negative sign before symbol, but there are two other options (besides parens)\n  if (options.allow_negatives && !options.parens_for_negatives) {\n    if (options.negative_sign_after_digits) {\n      pattern += negative;\n    } else if (options.negative_sign_before_digits) {\n      pattern = negative + pattern;\n    }\n  }\n\n  // South African Rand, for example, uses R 123 (space) and R-123 (no space)\n  if (options.allow_negative_sign_placeholder) {\n    pattern = `( (?!\\\\-))?${pattern}`;\n  } else if (options.allow_space_after_symbol) {\n    pattern = ` ?${pattern}`;\n  } else if (options.allow_space_after_digits) {\n    pattern += '( (?!$))?';\n  }\n\n  if (options.symbol_after_digits) {\n    pattern += symbol;\n  } else {\n    pattern = symbol + pattern;\n  }\n\n  if (options.allow_negatives) {\n    if (options.parens_for_negatives) {\n      pattern = `(\\\\(${pattern}\\\\)|${pattern})`;\n    } else if (!(options.negative_sign_before_digits || options.negative_sign_after_digits)) {\n      pattern = negative + pattern;\n    }\n  }\n\n  // ensure there's a dollar and/or decimal amount, and that\n  // it doesn't start with a space or a negative sign followed by a space\n  return new RegExp(`^(?!-? )(?=.*\\\\d)${pattern}$`);\n}\n\n/**\n * IsCurrency Options.\n */\nexport interface IsCurrencyOptions {\n  symbol?: string\n  require_symbol?: boolean\n  allow_space_after_symbol?: boolean\n  symbol_after_digits?: boolean\n  allow_negatives?: boolean\n  parens_for_negatives?: boolean\n  negative_sign_before_digits?: boolean\n  negative_sign_after_digits?: boolean\n  allow_negative_sign_placeholder?: boolean\n  thousands_separator?: string\n  decimal_separator?: string\n  allow_decimal: boolean\n  require_decimal: boolean\n  digits_after_decimal: number[]\n  allow_space_after_digits?: boolean\n}\n\n\n/**\n * The currency default options\n */\nconst default_currency_options:IsCurrencyOptions = {\n  symbol: '$',\n  require_symbol: false,\n  allow_space_after_symbol: false,\n  symbol_after_digits: false,\n  allow_negatives: true,\n  parens_for_negatives: false,\n  negative_sign_before_digits: false,\n  negative_sign_after_digits: false,\n  allow_negative_sign_placeholder: false,\n  thousands_separator: ',',\n  decimal_separator: '.',\n  allow_decimal: true,\n  require_decimal: false,\n  digits_after_decimal: [2],\n  allow_space_after_digits: false,\n};\n\n/**\n * Checks whether the `target` string is a currency\n * \n * @param target The target string\n * @param options The options\n * @return true if the `target` is a currency, false otherwise\n */\nexport function isCurrency(str: string, options) {\n  assertString(str);\n  options = merge(options, default_currency_options);\n  return currencyRegex(options).test(str);\n}\n","import { assertString } from '../util/assertString';\n\nconst validMediaType = /^[a-z]+\\/[a-z0-9\\-\\+]+$/i;\n\nconst validAttribute = /^[a-z\\-]+=[a-z0-9\\-]+$/i;\n\nconst validData = /^[a-z0-9!\\$&'\\(\\)\\*\\+,;=\\-\\._~:@\\/\\?%\\s]*$/i;\n\n/**\n * Checks whether the `target` string is a data URI\n * \n * @param target The target string\n * @param options The options\n * @return true if the `target` is a data URI, false otherwise\n */\nexport function isDataURI(target: string) {\n  assertString(target);\n  let data = target.split(',');\n  if (data.length < 2) {\n    return false;\n  }\n  const attributes = data.shift().trim().split(';');\n  const schemeAndMediaType = attributes.shift();\n  if (schemeAndMediaType.substr(0, 5) !== 'data:') {\n    return false;\n  }\n  const mediaType = schemeAndMediaType.substr(5);\n  if (mediaType !== '' && !validMediaType.test(mediaType)) {\n    return false;\n  }\n  for (let i = 0; i < attributes.length; i++) {\n    if (i === attributes.length - 1 && attributes[i].toLowerCase() === 'base64') {\n      // ok\n    } else if (!validAttribute.test(attributes[i])) {\n      return false;\n    }\n  }\n  for (let i = 0; i < data.length; i++) {\n    if (!validData.test(data[i])) {\n      return false;\n    }\n  }\n  return true;\n}","export const includes = (arr, val) => arr.some(arrVal => val === arrVal);","import { merge } from '../util/merge';\nimport { assertString } from '../util/assertString';\nimport { includes } from '../util/includes';\nimport { decimal } from './alpha';\n\nfunction decimalRegExp(options) {\n  const regExp = new RegExp(`^[-+]?([0-9]+)?(\\\\${decimal[options.locale]}[0-9]{${options.decimal_digits}})${options.force_decimal ? '' : '?'}$`);\n  return regExp;\n}\n\n/**\n * The default options\n */\nconst default_decimal_options = {\n  force_decimal: false,\n  decimal_digits: '1,',\n  locale: 'en-US',\n};\n\nconst blacklist = ['', '-', '+'];\n\n/**\n * Checks whether the `target` string is a decimal\n * \n * @param target The target string\n * @param options The options\n * @return true if the `target` is a decimal, false otherwise\n */\nexport function isDecimal(target: string, options) {\n  assertString(target);\n  options = merge(options, default_decimal_options);\n  if (options.locale in decimal) {\n    return !includes(blacklist, target.replace(/ /g, '')) && decimalRegExp(options).test(target);\n  }\n  throw new Error(`Invalid locale '${options.locale}'`);\n}\n","import { assertString } from '../util/assertString';\nimport { decimal } from './alpha';\n\n/**\n * Checks whether the `target` string is a float\n * \n * @param target The target string\n * @param options The options\n * @return true if the `target` is is a float, false otherwise\n */\nexport function isFloat(str: string, options?) {\n  assertString(str);\n  options = options || {};\n  const float = new RegExp(`^(?:[-+])?(?:[0-9]+)?(?:\\\\${options.locale ? decimal[options.locale] : '.'}[0-9]*)?(?:[eE][\\\\+\\\\-]?(?:[0-9]+))?$`);\n  if (str === '' || str === '.' || str === '-' || str === '+') {\n    return false;\n  }\n  const value = parseFloat(str.replace(',', '.'));\n  return float.test(str) &&\n    (!options.hasOwnProperty('min') || value >= options.min) &&\n    (!options.hasOwnProperty('max') || value <= options.max) &&\n    (!options.hasOwnProperty('lt') || value < options.lt) &&\n    (!options.hasOwnProperty('gt') || value > options.gt);\n}\n\nexport const floatLocales = Object.keys(decimal);\n","import { isFloat } from '../validators/isFloat';\n\nexport function toFloat(str) {\n  if (!isFloat(str)) return NaN;\n\n  return parseFloat(str);\n}\n","import { assertString } from '../util/assertString';\nimport { toFloat } from '../sanitizers/toFloat';\n\n/**\n * Checks whether the `target` is divisible by the arg\n * \n * @param target The target string\n * @param arg The divisor\n * @return true if the `target` is divisible by the `arg`, false otherwise\n */\nexport function isDivisibleBy(target: string, arg: string) {\n  assertString(target);\n  return toFloat(target) % parseInt(arg, 10) === 0;\n}\n","/**\n * The most commonly used EAN standard is\n * the thirteen-digit EAN-13, while the\n * less commonly used 8-digit EAN-8 barcode was\n * introduced for use on small packages.\n * EAN consists of:\n * GS1 prefix, manufacturer code, product code and check digit\n * Reference: https://en.wikipedia.org/wiki/International_Article_Number\n */\n\nimport { assertString } from '../util/assertString';\n\n/**\n * Define EAN Lenghts; 8 for EAN-8; 13 for EAN-13\n * and Regular Expression for valid EANs (EAN-8, EAN-13),\n * with exact numberic matching of 8 or 13 digits [0-9]\n */\nconst LENGTH_EAN_8 = 8;\nconst validEanRegex = /^(\\d{8}|\\d{13})$/;\n\n\n/**\n * Get position weight given:\n * EAN length and digit index/position\n *\n * @param {number} length\n * @param {number} index\n * @return {number}\n */\nfunction getPositionWeightThroughLengthAndIndex(length, index) {\n  if (length === LENGTH_EAN_8) {\n    return (index % 2 === 0) ? 3 : 1;\n  }\n\n  return (index % 2 === 0) ? 1 : 3;\n}\n\n/**\n * Calculate EAN Check Digit\n * Reference: https://en.wikipedia.org/wiki/International_Article_Number#Calculation_of_checksum_digit\n *\n * @param {string} ean\n * @return {number}\n */\nfunction calculateCheckDigit(ean) {\n  const checksum = ean\n    .slice(0, -1)\n    .split('')\n    .map((char, index) => Number(char) * getPositionWeightThroughLengthAndIndex(ean.length, index))\n    .reduce((acc, partialSum) => acc + partialSum, 0);\n\n  const remainder = 10 - (checksum % 10);\n\n  return remainder < 10 ? remainder : 0;\n}\n\n/**\n * Check if string is valid EAN:\n * Matches EAN-8/EAN-13 regex\n * Has valid check digit.\n * \n * @param target The target string\n * @return true if the `target` is a valid EAN, false otherwise\n */\n export function isEAN(target: string) {\n  assertString(target);\n  const actualCheckDigit = Number(target.slice(-1));\n\n  return validEanRegex.test(target) && actualCheckDigit === calculateCheckDigit(target);\n}\n","import { assertString } from '../util/assertString';\nimport { merge } from '../util/merge';\n\n/**\n *  IsFQDN Options\n */\nexport interface IsFQDNOptions {\n  require_tld?: boolean;\n  allow_underscores?: boolean;\n  allow_trailing_dot?: boolean;\n}\n\nconst default_fqdn_options:IsFQDNOptions = {\n  require_tld: true,\n  allow_underscores: false,\n  allow_trailing_dot: false,\n};\n\n/**\n * Checks whether the `target` string is a FQDN\n * \n * @param target The target string\n * @param options The options\n * @return true if the `target` is a FQDN, false otherwise\n */\nexport function isFQDN(str: string, options) {\n  assertString(str);\n  options = merge(options, default_fqdn_options);\n\n  /* Remove the optional trailing dot before checking validity */\n  if (options.allow_trailing_dot && str[str.length - 1] === '.') {\n    str = str.substring(0, str.length - 1);\n  }\n  const parts = str.split('.');\n  for (let i = 0; i < parts.length; i++) {\n    if (parts[i].length > 63) {\n      return false;\n    }\n  }\n  if (options.require_tld) {\n    const tld = parts.pop();\n    if (!parts.length || !/^([a-z\\u00a1-\\uffff]{2,}|xn[a-z0-9-]{2,})$/i.test(tld)) {\n      return false;\n    }\n    // disallow spaces\n    if (/[\\s\\u2002-\\u200B\\u202F\\u205F\\u3000\\uFEFF\\uDB40\\uDC20]/.test(tld)) {\n      return false;\n    }\n  }\n  for (let part, i = 0; i < parts.length; i++) {\n    part = parts[i];\n    if (options.allow_underscores) {\n      part = part.replace(/_/g, '');\n    }\n    if (!/^[a-z\\u00a1-\\uffff0-9-]+$/i.test(part)) {\n      return false;\n    }\n    // disallow full-width chars\n    if (/[\\uff01-\\uff5e]/.test(part)) {\n      return false;\n    }\n    if (part[0] === '-' || part[part.length - 1] === '-') {\n      return false;\n    }\n  }\n  return true;\n}\n","import { assertString } from '../util/assertString';\n/**\n11.3.  Examples\n\n   The following addresses\n\n             fe80::1234 (on the 1st link of the node)\n             ff02::5678 (on the 5th link of the node)\n             ff08::9abc (on the 10th organization of the node)\n\n   would be represented as follows:\n\n             fe80::1234%1\n             ff02::5678%5\n             ff08::9abc%10\n\n   (Here we assume a natural translation from a zone index to the\n   <zone_id> part, where the Nth zone of any scope is translated into\n   \"N\".)\n\n   If we use interface names as <zone_id>, those addresses could also be\n   represented as follows:\n\n            fe80::1234%ne0\n            ff02::5678%pvc1.3\n            ff08::9abc%interface10\n\n   where the interface \"ne0\" belongs to the 1st link, \"pvc1.3\" belongs\n   to the 5th link, and \"interface10\" belongs to the 10th organization.\n * * */\nconst ipv4Maybe = /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/;\nconst ipv6Block = /^[0-9A-F]{1,4}$/i;\n\n/**\n * Checks whether the `target` string is an int\n * \n * @param target The target string\n * @param version The version\n * @return true if the `target` is an int, false otherwise\n */\nexport function isIP(str: string, version: string = '4') {\n  assertString(str);\n  version = String(version);\n  if (!version) {\n    return isIP(str, '4') || isIP(str, '6');\n  } else if (version === '4') {\n    if (!ipv4Maybe.test(str)) {\n      return false;\n    }\n    const parts = str.split('.').sort((a: any, b: any) => a - b);\n    return parseInt(parts[3]) <= 255;\n  } else if (version === '6') {\n    let addressAndZone = [str];\n    // ipv6 addresses could have scoped architecture\n    // according to https://tools.ietf.org/html/rfc4007#section-11\n    if (str.includes('%')) {\n      addressAndZone = str.split('%');\n      if (addressAndZone.length !== 2) {\n        // it must be just two parts\n        return false;\n      }\n      if (!addressAndZone[0].includes(':')) {\n        // the first part must be the address\n        return false;\n      }\n\n      if (addressAndZone[1] === '') {\n        // the second part must not be empty\n        return false;\n      }\n    }\n\n    const blocks = addressAndZone[0].split(':');\n    let foundOmissionBlock = false; // marker to indicate ::\n\n    // At least some OS accept the last 32 bits of an IPv6 address\n    // (i.e. 2 of the blocks) in IPv4 notation, and RFC 3493 says\n    // that '::ffff:a.b.c.d' is valid for IPv4-mapped IPv6 addresses,\n    // and '::a.b.c.d' is deprecated, but also valid.\n    const foundIPv4TransitionBlock = isIP(blocks[blocks.length - 1], '4');\n    const expectedNumberOfBlocks = foundIPv4TransitionBlock ? 7 : 8;\n\n    if (blocks.length > expectedNumberOfBlocks) {\n      return false;\n    }\n    // initial or final ::\n    if (str === '::') {\n      return true;\n    } else if (str.substr(0, 2) === '::') {\n      blocks.shift();\n      blocks.shift();\n      foundOmissionBlock = true;\n    } else if (str.substr(str.length - 2) === '::') {\n      blocks.pop();\n      blocks.pop();\n      foundOmissionBlock = true;\n    }\n\n    for (let i = 0; i < blocks.length; ++i) {\n      // test for a :: which can not be at the string start/end\n      // since those cases have been handled above\n      if (blocks[i] === '' && i > 0 && i < blocks.length - 1) {\n        if (foundOmissionBlock) {\n          return false; // multiple :: in address\n        }\n        foundOmissionBlock = true;\n      } else if (foundIPv4TransitionBlock && i === blocks.length - 1) {\n        // it has been checked before that the last\n        // block is a valid IPv4 address\n      } else if (!ipv6Block.test(blocks[i])) {\n        return false;\n      }\n    }\n    if (foundOmissionBlock) {\n      return blocks.length >= 1;\n    }\n    return blocks.length === expectedNumberOfBlocks;\n  }\n  return false;\n}\n","import { assertString } from '../util/assertString';\n\nimport { merge } from '../util/merge';\nimport { isByteLength } from './isByteLength';\nimport { isFQDN } from './isFQDN';\nimport { isIP } from './isIP';\n\n/**\n * IsEmail Options.\n */\nexport interface IsEmailOptions {\n  require_display_name?:boolean\n  allow_display_name?: boolean\n  allow_utf8_local_part?: boolean\n  require_tld?: boolean\n}\n\nexport const default_email_options:IsEmailOptions = {\n  require_display_name: false,\n  allow_display_name: false,\n  allow_utf8_local_part: true,\n  require_tld: true,\n}\n\n/* eslint-disable max-len */\n/* eslint-disable no-control-regex */\nconst splitNameAddress = /^([^\\x00-\\x1F\\x7F-\\x9F\\cX]+)<(.+)>$/i;\nconst emailUserPart = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]+$/i;\nconst gmailUserPart = /^[a-z\\d]+$/;\nconst quotedEmailUser = /^([\\s\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e]|(\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]))*$/i;\nconst emailUserUtf8Part = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+$/i;\nconst quotedEmailUserUtf8 = /^([\\s\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|(\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))*$/i;\nconst defaultMaxEmailLength = 254;\n/* eslint-enable max-len */\n/* eslint-enable no-control-regex */\n\n/**\n * Validate display name according to the RFC2822: https://tools.ietf.org/html/rfc2822#appendix-A.1.2\n * @param {String} display_name\n */\nfunction validateDisplayName(display_name) {\n  const trim_quotes = display_name.match(/^\"(.+)\"$/i);\n  const display_name_without_quotes = trim_quotes ? trim_quotes[1] : display_name;\n\n  // display name with only spaces is not valid\n  if (!display_name_without_quotes.trim()) {\n    return false;\n  }\n\n  // check whether display name contains illegal character\n  const contains_illegal = /[\\.\";<>]/.test(display_name_without_quotes);\n  if (contains_illegal) {\n    // if contains illegal characters,\n    // must to be enclosed in double-quotes, otherwise it's not a valid display name\n    if (!trim_quotes) {\n      return false;\n    }\n\n    // the quotes in display name must start with character symbol \\\n    const all_start_with_back_slash =\n      display_name_without_quotes.split('\"').length === display_name_without_quotes.split('\\\\\"').length;\n    if (!all_start_with_back_slash) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n\n/**\n * Checks whether the `target` string is a valid email address\n * \n * @param target The target string\n * @param options The options\n * @return true if the `target` is a valid email address, false otherwise\n */\nexport function isEmail(str: string, options) {\n  assertString(str);\n  options = merge(options, default_email_options);\n\n  if (options.require_display_name || options.allow_display_name) {\n    const display_email = str.match(splitNameAddress);\n    if (display_email) {\n      let display_name;\n      [, display_name, str] = display_email;\n      // sometimes need to trim the last space to get the display name\n      // because there may be a space between display name and email address\n      // eg. myname <address@gmail.com>\n      // the display name is `myname` instead of `myname `, so need to trim the last space\n      if (display_name.endsWith(' ')) {\n        display_name = display_name.substr(0, display_name.length - 1);\n      }\n\n      if (!validateDisplayName(display_name)) {\n        return false;\n      }\n    } else if (options.require_display_name) {\n      return false;\n    }\n  }\n  if (!options.ignore_max_length && str.length > defaultMaxEmailLength) {\n    return false;\n  }\n\n  const parts = str.split('@');\n  const domain = parts.pop();\n  let user = parts.join('@');\n\n  const lower_domain = domain.toLowerCase();\n\n  if (options.domain_specific_validation && (lower_domain === 'gmail.com' || lower_domain === 'googlemail.com')) {\n    /*\n      Previously we removed dots for gmail addresses before validating.\n      This was removed because it allows `multiple..dots@gmail.com`\n      to be reported as valid, but it is not.\n      Gmail only normalizes single dots, removing them from here is pointless,\n      should be done in normalizeEmail\n    */\n    user = user.toLowerCase();\n\n    // Removing sub-address from username before gmail validation\n    const username = user.split('+')[0];\n\n    // Dots are not included in gmail length restriction\n    if (!isByteLength(username.replace('.', ''), { min: 6, max: 30 })) {\n      return false;\n    }\n\n    const user_parts = username.split('.');\n    for (let i = 0; i < user_parts.length; i++) {\n      if (!gmailUserPart.test(user_parts[i])) {\n        return false;\n      }\n    }\n  }\n\n  if (!isByteLength(user, { max: 64 }) ||\n    !isByteLength(domain, { max: 254 })) {\n    return false;\n  }\n\n  if (!isFQDN(domain, { require_tld: options.require_tld })) {\n    if (!options.allow_ip_domain) {\n      return false;\n    }\n\n    if (!isIP(domain)) {\n      if (!domain.startsWith('[') || !domain.endsWith(']')) {\n        return false;\n      }\n\n      let noBracketdomain = domain.substr(1, domain.length - 2);\n\n      if (noBracketdomain.length === 0 || !isIP(noBracketdomain)) {\n        return false;\n      }\n    }\n  }\n\n  if (user[0] === '\"') {\n    user = user.slice(1, user.length - 1);\n    return options.allow_utf8_local_part ?\n      quotedEmailUserUtf8.test(user) :\n      quotedEmailUser.test(user);\n  }\n\n  const pattern = options.allow_utf8_local_part ?\n    emailUserUtf8Part : emailUserPart;\n\n  const user_parts = user.split('.');\n  for (let i = 0; i < user_parts.length; i++) {\n    if (!pattern.test(user_parts[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n","import { assertString } from '../util/assertString';\nimport { merge } from '../util/merge';\n\nconst default_is_empty_options = {\n  ignore_whitespace: false,\n};\n\n/**\n * Checks whether the `target` string is empty\n * \n * Note that `ignore_whitespace` is false by default.\n * \n * @param target The target string\n * @param options The options\n * @return true if the `target` is empty\n */\nexport function isEmpty(str: string, options) {\n  assertString(str);\n  options = merge(options, default_is_empty_options);\n\n  return (options.ignore_whitespace ? str.trim().length : str.length) === 0;\n}\n","import { assertString } from '../util/assertString';\n\nconst eth = /^(0x)[0-9a-f]{40}$/i;\n\n/**\n * Checks whether the `target` is an ethereum address\n * \n * @param target The target string\n * @return true if the `target` is an ethereum address\n */\nexport function isEthereumAddress(str: string) {\n  assertString(str);\n  return eth.test(str);\n}","import { assertString } from '../util/assertString';\n\nexport const fullWidth = /[^\\u0020-\\u007E\\uFF61-\\uFF9F\\uFFA0-\\uFFDC\\uFFE8-\\uFFEE0-9a-zA-Z]/;\n\n/**\n * Checks whether the `target` is full width\n * \n * @param target The target string\n * @return true if the `target` is full width, false otherwise\n */\nexport function isFullWidth(str: string) {\n  assertString(str);\n  return fullWidth.test(str);\n}\n","import { assertString } from '../util/assertString';\n\nexport const halfWidth = /[\\u0020-\\u007E\\uFF61-\\uFF9F\\uFFA0-\\uFFDC\\uFFE8-\\uFFEE0-9a-zA-Z]/;\n\n/**\n * Checks whether the `target` is half width\n * \n * @param target The target string\n * @return true if the `target` is half width, false otherwise\n */\nexport function isHalfWidth(str: string) {\n  assertString(str);\n  return halfWidth.test(str);\n}\n","import { assertString } from '../util/assertString';\n\nconst lengths = {\n  md5: 32,\n  md4: 32,\n  sha1: 40,\n  sha256: 64,\n  sha384: 96,\n  sha512: 128,\n  ripemd128: 32,\n  ripemd160: 40,\n  tiger128: 32,\n  tiger160: 40,\n  tiger192: 48,\n  crc32: 8,\n  crc32b: 8,\n};\n\n/**\n * Checks whether the `target` string is hashed using the `arg` algorithm\n * \n * @param target The target string\n * @param arg The arg\n * @return true if the `target` is hashed using the `arg` algorithm, false otherwise\n */\nexport function isHash(target: string, arg:string) {\n  assertString(target);\n  const hash = new RegExp(`^[a-fA-F0-9]{${lengths[arg]}}$`);\n  return hash.test(target);\n}\n","import { assertString } from '../util/assertString';\n\nconst hexadecimal = /^(0x|0h)?[0-9A-F]+$/i;\n\n/**\n * Checks whether the `target` is hexadecimal\n * \n * @param target The target string\n * @return true if the `target` is hexadecimal, false otherwise\n */\nexport function isHexadecimal(str: string) {\n  assertString(str);\n  return hexadecimal.test(str);\n}\n","import { assertString } from '../util/assertString';\n\nconst hexcolor = /^#?([0-9A-F]{3}|[0-9A-F]{4}|[0-9A-F]{6}|[0-9A-F]{8})$/i;\n\n/**\n * Checks whether the `target` is hexcolor\n * \n * @param target The target string\n * @return true if the `target` is hexcolor, false otherwise\n */\nexport function isHexColor(str) {\n  assertString(str);\n  return hexcolor.test(str);\n}\n","import { assertString } from '../util/assertString';\n\n\nconst hslcomma = /^(hsl)a?\\(\\s*((\\+|\\-)?([0-9]+(\\.[0-9]+)?(e(\\+|\\-)?[0-9]+)?|\\.[0-9]+(e(\\+|\\-)?[0-9]+)?))(deg|grad|rad|turn|\\s*)(\\s*,\\s*(\\+|\\-)?([0-9]+(\\.[0-9]+)?(e(\\+|\\-)?[0-9]+)?|\\.[0-9]+(e(\\+|\\-)?[0-9]+)?)%){2}\\s*(,\\s*((\\+|\\-)?([0-9]+(\\.[0-9]+)?(e(\\+|\\-)?[0-9]+)?|\\.[0-9]+(e(\\+|\\-)?[0-9]+)?)%?)\\s*)?\\)$/i;\nconst hslspace = /^(hsl)a?\\(\\s*((\\+|\\-)?([0-9]+(\\.[0-9]+)?(e(\\+|\\-)?[0-9]+)?|\\.[0-9]+(e(\\+|\\-)?[0-9]+)?))(deg|grad|rad|turn|\\s)(\\s*(\\+|\\-)?([0-9]+(\\.[0-9]+)?(e(\\+|\\-)?[0-9]+)?|\\.[0-9]+(e(\\+|\\-)?[0-9]+)?)%){2}\\s*(\\/\\s*((\\+|\\-)?([0-9]+(\\.[0-9]+)?(e(\\+|\\-)?[0-9]+)?|\\.[0-9]+(e(\\+|\\-)?[0-9]+)?)%?)\\s*)?\\)$/i;\n\n\n/**\n * Checks whether the `target` is HSL color\n * \n * @param target The target string\n * @return true if the `target` is HSL color, false otherwise\n */\nexport function isHSL(str: string) {\n  assertString(str);\n  return hslcomma.test(str) || hslspace.test(str);\n}\n","import { assertString } from '../util/assertString';\n\n/**\n * List of country codes with\n * corresponding IBAN regular expression\n * Reference: https://en.wikipedia.org/wiki/International_Bank_Account_Number\n */\nconst ibanRegexThroughCountryCode = {\n  AD: /^(AD[0-9]{2})\\d{8}[A-Z0-9]{12}$/,\n  AE: /^(AE[0-9]{2})\\d{3}\\d{16}$/,\n  AL: /^(AL[0-9]{2})\\d{8}[A-Z0-9]{16}$/,\n  AT: /^(AT[0-9]{2})\\d{16}$/,\n  AZ: /^(AZ[0-9]{2})[A-Z0-9]{4}\\d{20}$/,\n  BA: /^(BA[0-9]{2})\\d{16}$/,\n  BE: /^(BE[0-9]{2})\\d{12}$/,\n  BG: /^(BG[0-9]{2})[A-Z]{4}\\d{6}[A-Z0-9]{8}$/,\n  BH: /^(BH[0-9]{2})[A-Z]{4}[A-Z0-9]{14}$/,\n  BR: /^(BR[0-9]{2})\\d{23}[A-Z]{1}[A-Z0-9]{1}$/,\n  BY: /^(BY[0-9]{2})[A-Z0-9]{4}\\d{20}$/,\n  CH: /^(CH[0-9]{2})\\d{5}[A-Z0-9]{12}$/,\n  CR: /^(CR[0-9]{2})\\d{18}$/,\n  CY: /^(CY[0-9]{2})\\d{8}[A-Z0-9]{16}$/,\n  CZ: /^(CZ[0-9]{2})\\d{20}$/,\n  DE: /^(DE[0-9]{2})\\d{18}$/,\n  DK: /^(DK[0-9]{2})\\d{14}$/,\n  DO: /^(DO[0-9]{2})[A-Z]{4}\\d{20}$/,\n  EE: /^(EE[0-9]{2})\\d{16}$/,\n  ES: /^(ES[0-9]{2})\\d{20}$/,\n  FI: /^(FI[0-9]{2})\\d{14}$/,\n  FO: /^(FO[0-9]{2})\\d{14}$/,\n  FR: /^(FR[0-9]{2})\\d{10}[A-Z0-9]{11}\\d{2}$/,\n  GB: /^(GB[0-9]{2})[A-Z]{4}\\d{14}$/,\n  GE: /^(GE[0-9]{2})[A-Z0-9]{2}\\d{16}$/,\n  GI: /^(GI[0-9]{2})[A-Z]{4}[A-Z0-9]{15}$/,\n  GL: /^(GL[0-9]{2})\\d{14}$/,\n  GR: /^(GR[0-9]{2})\\d{7}[A-Z0-9]{16}$/,\n  GT: /^(GT[0-9]{2})[A-Z0-9]{4}[A-Z0-9]{20}$/,\n  HR: /^(HR[0-9]{2})\\d{17}$/,\n  HU: /^(HU[0-9]{2})\\d{24}$/,\n  IE: /^(IE[0-9]{2})[A-Z0-9]{4}\\d{14}$/,\n  IL: /^(IL[0-9]{2})\\d{19}$/,\n  IQ: /^(IQ[0-9]{2})[A-Z]{4}\\d{15}$/,\n  IS: /^(IS[0-9]{2})\\d{22}$/,\n  IT: /^(IT[0-9]{2})[A-Z]{1}\\d{10}[A-Z0-9]{12}$/,\n  JO: /^(JO[0-9]{2})[A-Z]{4}\\d{22}$/,\n  KW: /^(KW[0-9]{2})[A-Z]{4}[A-Z0-9]{22}$/,\n  KZ: /^(KZ[0-9]{2})\\d{3}[A-Z0-9]{13}$/,\n  LB: /^(LB[0-9]{2})\\d{4}[A-Z0-9]{20}$/,\n  LC: /^(LC[0-9]{2})[A-Z]{4}[A-Z0-9]{24}$/,\n  LI: /^(LI[0-9]{2})\\d{5}[A-Z0-9]{12}$/,\n  LT: /^(LT[0-9]{2})\\d{16}$/,\n  LU: /^(LU[0-9]{2})\\d{3}[A-Z0-9]{13}$/,\n  LV: /^(LV[0-9]{2})[A-Z]{4}[A-Z0-9]{13}$/,\n  MC: /^(MC[0-9]{2})\\d{10}[A-Z0-9]{11}\\d{2}$/,\n  MD: /^(MD[0-9]{2})[A-Z0-9]{20}$/,\n  ME: /^(ME[0-9]{2})\\d{18}$/,\n  MK: /^(MK[0-9]{2})\\d{3}[A-Z0-9]{10}\\d{2}$/,\n  MR: /^(MR[0-9]{2})\\d{23}$/,\n  MT: /^(MT[0-9]{2})[A-Z]{4}\\d{5}[A-Z0-9]{18}$/,\n  MU: /^(MU[0-9]{2})[A-Z]{4}\\d{19}[A-Z]{3}$/,\n  NL: /^(NL[0-9]{2})[A-Z]{4}\\d{10}$/,\n  NO: /^(NO[0-9]{2})\\d{11}$/,\n  PK: /^(PK[0-9]{2})[A-Z0-9]{4}\\d{16}$/,\n  PL: /^(PL[0-9]{2})\\d{24}$/,\n  PS: /^(PS[0-9]{2})[A-Z0-9]{4}\\d{21}$/,\n  PT: /^(PT[0-9]{2})\\d{21}$/,\n  QA: /^(QA[0-9]{2})[A-Z]{4}[A-Z0-9]{21}$/,\n  RO: /^(RO[0-9]{2})[A-Z]{4}[A-Z0-9]{16}$/,\n  RS: /^(RS[0-9]{2})\\d{18}$/,\n  SA: /^(SA[0-9]{2})\\d{2}[A-Z0-9]{18}$/,\n  SC: /^(SC[0-9]{2})[A-Z]{4}\\d{20}[A-Z]{3}$/,\n  SE: /^(SE[0-9]{2})\\d{20}$/,\n  SI: /^(SI[0-9]{2})\\d{15}$/,\n  SK: /^(SK[0-9]{2})\\d{20}$/,\n  SM: /^(SM[0-9]{2})[A-Z]{1}\\d{10}[A-Z0-9]{12}$/,\n  TL: /^(TL[0-9]{2})\\d{19}$/,\n  TN: /^(TN[0-9]{2})\\d{20}$/,\n  TR: /^(TR[0-9]{2})\\d{5}[A-Z0-9]{17}$/,\n  UA: /^(UA[0-9]{2})\\d{6}[A-Z0-9]{19}$/,\n  VA: /^(VA[0-9]{2})\\d{18}$/,\n  VG: /^(VG[0-9]{2})[A-Z0-9]{4}\\d{16}$/,\n  XK: /^(XK[0-9]{2})\\d{16}$/,\n};\n\n/**\n * Check whether string has correct universal IBAN format\n * The IBAN consists of up to 34 alphanumeric characters, as follows:\n * Country Code using ISO 3166-1 alpha-2, two letters\n * check digits, two digits and\n * Basic Bank Account Number (BBAN), up to 30 alphanumeric characters.\n * NOTE: Permitted IBAN characters are: digits [0-9] and the 26 latin alphabetic [A-Z]\n *\n * @param {string} str - string under validation\n * @return {boolean}\n */\nfunction hasValidIbanFormat(str) {\n  // Strip white spaces and hyphens, keep only digits and A-Z latin alphabetic\n  const strippedStr = str.replace(/[^A-Z0-9]+/gi, '').toUpperCase();\n  const isoCountryCode = strippedStr.slice(0, 2).toUpperCase();\n\n  return (isoCountryCode in ibanRegexThroughCountryCode) &&\n    ibanRegexThroughCountryCode[isoCountryCode].test(strippedStr);\n}\n\n/**\n   * Check whether string has valid IBAN Checksum\n   * by performing basic mod-97 operation and\n   * the remainder should equal 1\n   * -- Start by rearranging the IBAN by moving the four initial characters to the end of the string\n   * -- Replace each letter in the string with two digits, A -> 10, B = 11, Z = 35\n   * -- Interpret the string as a decimal integer and\n   * -- compute the remainder on division by 97 (mod 97)\n   * Reference: https://en.wikipedia.org/wiki/International_Bank_Account_Number\n   *\n   * @param target The target string\n   * @return true if the string has a valid IBAN checksum, false otherwise\n   */\nfunction hasValidIbanChecksum(target) {\n  const strippedStr = target.replace(/[^A-Z0-9]+/gi, '').toUpperCase(); // Keep only digits and A-Z latin alphabetic\n  const rearranged = strippedStr.slice(4) + strippedStr.slice(0, 4);\n  const alphaCapsReplacedWithDigits = rearranged.replace(/[A-Z]/g, char => char.charCodeAt(0) - 55);\n\n  const remainder = alphaCapsReplacedWithDigits.match(/\\d{1,7}/g)\n    .reduce((acc, value) => Number(acc + value) % 97, '');\n\n  return remainder === 1;\n}\n/**\n * Checks whether the IBAN number has a valid format and checksum.\n * \n * @param target The target string\n * @return true if the target has a valid format and checksum, false otherwise\n */\nexport function isIBAN(target: string) {\n  assertString(target);\n\n  return hasValidIbanFormat(target) && hasValidIbanChecksum(target);\n}\n","import { assertString } from '../util/assertString';\n\nconst validators = {\n  ES: (str) => {\n    assertString(str);\n\n    const DNI = /^[0-9X-Z][0-9]{7}[TRWAGMYFPDXBNJZSQVHLCKE]$/;\n\n    const charsValue = {\n      X: 0,\n      Y: 1,\n      Z: 2,\n    };\n\n    const controlDigits = [\n      'T', 'R', 'W', 'A', 'G', 'M', 'Y', 'F', 'P', 'D', 'X', 'B',\n      'N', 'J', 'Z', 'S', 'Q', 'V', 'H', 'L', 'C', 'K', 'E',\n    ];\n\n    // sanitize user input\n    const sanitized = str.trim().toUpperCase();\n\n    // validate the data structure\n    if (!DNI.test(sanitized)) {\n      return false;\n    }\n\n    // validate the control digit\n    const number = sanitized.slice(0, -1).replace(/[X,Y,Z]/g, char => charsValue[char]);\n\n    return sanitized.endsWith(controlDigits[number % 23]);\n  },\n  'he-IL': (str) => {\n    const DNI = /^\\d{9}$/;\n\n    // sanitize user input\n    const sanitized = str.trim();\n\n    // validate the data structure\n    if (!DNI.test(sanitized)) {\n      return false;\n    }\n\n    const id = sanitized;\n\n    let sum = 0,\n      incNum;\n    for (let i = 0; i < id.length; i++) {\n      incNum = Number(id[i]) * ((i % 2) + 1); // Multiply number by 1 or 2\n      sum += incNum > 9 ? incNum - 9 : incNum; // Sum the digits up and add to total\n    }\n    return sum % 10 === 0;\n  },\n  'zh-TW': (str) => {\n    const ALPHABET_CODES = {\n      A: 10,\n      B: 11,\n      C: 12,\n      D: 13,\n      E: 14,\n      F: 15,\n      G: 16,\n      H: 17,\n      I: 34,\n      J: 18,\n      K: 19,\n      L: 20,\n      M: 21,\n      N: 22,\n      O: 35,\n      P: 23,\n      Q: 24,\n      R: 25,\n      S: 26,\n      T: 27,\n      U: 28,\n      V: 29,\n      W: 32,\n      X: 30,\n      Y: 31,\n      Z: 33,\n    };\n\n    const sanitized = str.trim().toUpperCase();\n\n    if (!/^[A-Z][0-9]{9}$/.test(sanitized)) return false;\n\n    return Array.from(sanitized).reduce((sum: number, num: number, index: number) => {\n      if (index === 0) {\n        const code = ALPHABET_CODES[num];\n\n        return ((code % 10) * 9) + Math.floor(code / 10);\n      }\n\n      if (index === 9) {\n        return ((10 - (sum % 10)) - Number(num)) % 10 === 0;\n      }\n\n      return sum + (Number(num) * (9 - index));\n    }, 0);\n  },\n};\n\n/**\n * Check if the string is an identity card\n * @param target The target string\n * @param arg The arg\n */\nexport function isIdentityCard(target: string, arg: string) {\n  assertString(target);\n  if (arg in validators) {\n    return validators[arg](target);\n  } else if (arg === 'any') {\n    for (const key in validators) {\n      // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes\n      // istanbul ignore else\n      if (validators.hasOwnProperty(key)) {\n        const validator = validators[key];\n        if (validator(target)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  throw new Error(`Invalid locale '${arg}'`);\n}","import { assertString } from '../util/assertString';\nimport { toString } from '../util/toString';\n/**\n * Checks whether the `target` string is in the array of allowed values\n * \n * @param target The target string\n * @param options The options\n * @return true if the `target` is in the array of allowed values, false otherwise\n */\nexport function isIn(str: string, options) {\n  assertString(str);\n  let i;\n  if (Object.prototype.toString.call(options) === '[object Array]') {\n    const array = [];\n    for (i in options) {\n      // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes\n      // istanbul ignore else\n      if ({}.hasOwnProperty.call(options, i)) {\n        array[i] = toString(options[i]);\n      }\n    }\n    return array.indexOf(str) >= 0;\n  } else if (typeof options === 'object') {\n    return options.hasOwnProperty(str);\n  } else if (options && typeof options.indexOf === 'function') {\n    return options.indexOf(str) >= 0;\n  }\n  return false;\n}","import { assertString } from '../util/assertString';\n\nconst int = /^(?:[-+]?(?:0|[1-9][0-9]*))$/;\nconst intLeadingZeroes = /^[-+]?[0-9]+$/;\n\n/**\n * Checks whether the `target` string is an int\n * \n * @param target The target string\n * @param options The options\n * @return true if the `target` is an int, false otherwise\n */\nexport function isInt(str: string, options) {\n  assertString(str);\n  options = options || {};\n\n  // Get the regex to use for testing, based on whether\n  // leading zeroes are allowed or not.\n  let regex = (\n    options.hasOwnProperty('allow_leading_zeroes') && !options.allow_leading_zeroes ?\n      int : intLeadingZeroes\n  );\n\n  // Check min/max/lt/gt\n  let minCheckPassed = (!options.hasOwnProperty('min') || str >= options.min);\n  let maxCheckPassed = (!options.hasOwnProperty('max') || str <= options.max);\n  let ltCheckPassed = (!options.hasOwnProperty('lt') || str < options.lt);\n  let gtCheckPassed = (!options.hasOwnProperty('gt') || str > options.gt);\n\n  return regex.test(str) && minCheckPassed && maxCheckPassed && ltCheckPassed && gtCheckPassed;\n}\n","import { assertString } from '../util/assertString';\n\nconst isbn10Maybe = /^(?:[0-9]{9}X|[0-9]{10})$/;\nconst isbn13Maybe = /^(?:[0-9]{13})$/;\nconst factor = [1, 3];\n\n/**\n * Test whether the target string is an ISBN number.\n * \n * @param target The string\n * @param arg The ISBN version\n * @return true if the `target` string is an ISBN number, false otherwise\n */\nexport function isISBN(target: string, arg: string = '') {\n  assertString(target);\n  arg = String(arg);\n  if (!arg) {\n    return isISBN(target, '10') || isISBN(target, '13');\n  }\n  const sanitized: string = target.replace(/[\\s-]+/g, '');\n  let checksum = 0;\n  let i;\n  if (arg === '10') {\n    if (!isbn10Maybe.test(sanitized)) {\n      return false;\n    }\n    for (i = 0; i < 9; i++) {\n      checksum += (i + 1) * parseInt(sanitized.charAt(i));\n    }\n    if (sanitized.charAt(9) === 'X') {\n      checksum += 10 * 10;\n    } else {\n      checksum += 10 * parseInt(sanitized.charAt(9));\n    }\n    if ((checksum % 11) === 0) {\n      return !!sanitized;\n    }\n  } else if (arg === '13') {\n    if (!isbn13Maybe.test(sanitized)) {\n      return false;\n    }\n    for (i = 0; i < 12; i++) {\n      checksum += factor[i % 2] * parseInt(sanitized.charAt(i));\n    }\n    if (parseInt(sanitized.charAt(12)) - ((10 - (checksum % 10)) % 10) === 0) {\n      return !!sanitized;\n    }\n  }\n  return false;\n}","import { assertString } from '../util/assertString';\n\nconst isin = /^[A-Z]{2}[0-9A-Z]{9}[0-9]$/;\n\n\n/**\n * Test whether the target string is an ISBN number.\n * \n * @param target The string\n * @return true if the `target` string is an ISIN number, false otherwise\n */\nexport function isISIN(target:string) {\n  assertString(target);\n  if (!isin.test(target)) {\n    return false;\n  }\n\n  const checksumStr = target.replace(/[A-Z]/g, character => {\n    const intValue = (parseInt(character, 36))\n    return intValue ? intValue.toString() : ''\n  });\n\n  let sum = 0;\n  let digit;\n  let tmpNum;\n  let shouldDouble = true;\n  for (let i = checksumStr.length - 2; i >= 0; i--) {\n    digit = checksumStr.substring(i, (i + 1));\n    tmpNum = parseInt(digit, 10);\n    if (shouldDouble) {\n      tmpNum *= 2;\n      if (tmpNum >= 10) {\n        sum += tmpNum + 1;\n      } else {\n        sum += tmpNum;\n      }\n    } else {\n      sum += tmpNum;\n    }\n    shouldDouble = !shouldDouble;\n  }\n\n  return parseInt(target.substr(target.length - 1), 10) === (10000 - sum) % 10;\n}\n","import { assertString } from '../util/assertString';\n\n/* eslint-disable max-len */\n// from http://goo.gl/0ejHHW\nconst iso8601 = /^([\\+-]?\\d{4}(?!\\d{2}\\b))((-?)((0[1-9]|1[0-2])(\\3([12]\\d|0[1-9]|3[01]))?|W([0-4]\\d|5[0-3])(-?[1-7])?|(00[1-9]|0[1-9]\\d|[12]\\d{2}|3([0-5]\\d|6[1-6])))([T\\s]((([01]\\d|2[0-3])((:?)[0-5]\\d)?|24:?00)([\\.,]\\d+(?!:))?)?(\\17[0-5]\\d([\\.,]\\d+)?)?([zZ]|([\\+-])([01]\\d|2[0-3]):?([0-5]\\d)?)?)?)?$/;\n/* eslint-enable max-len */\nconst isValidDate = (str) => {\n  // str must have passed the ISO8601 check\n  // this check is meant to catch invalid dates\n  // like 2009-02-31\n  // first check for ordinal dates\n  const ordinalMatch = str.match(/^(\\d{4})-?(\\d{3})([ T]{1}\\.*|$)/);\n  if (ordinalMatch) {\n    const oYear = Number(ordinalMatch[1]);\n    const oDay = Number(ordinalMatch[2]);\n    // if is leap year\n    if ((oYear % 4 === 0 && oYear % 100 !== 0) || oYear % 400 === 0) return oDay <= 366;\n    return oDay <= 365;\n  }\n  const match = str.match(/(\\d{4})-?(\\d{0,2})-?(\\d*)/).map(Number);\n  const year = match[1];\n  const month = match[2];\n  const day = match[3];\n  const monthString = month ? `0${month}`.slice(-2) : month;\n  const dayString = day ? `0${day}`.slice(-2) : day;\n\n  // create a date object and compare\n  const d = new Date(`${year}-${monthString || '01'}-${dayString || '01'}`);\n  if (month && day) {\n    return d.getUTCFullYear() === year\n      && (d.getUTCMonth() + 1) === month\n      && d.getUTCDate() === day;\n  }\n  return true;\n}\n\n\n/**\n * Checks whether the `target` string is a valid ISO8601 date\n * \n * @param target The target string\n * @param options The options\n * @return true if the `target` is a valid ISO8601 date, false otherwise\n */\nexport function isISO8601(str, options?) {\n  assertString(str);\n  const check = iso8601.test(str);\n  if (!options) return check;\n  if (check && options.strict) return isValidDate(str);\n  return check;\n}\n","import { assertString } from '../util/assertString';\nimport { includes } from '../util/includes';\n\n// from https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2\nconst validISO31661Alpha2CountriesCodes = [\n  'AD', 'AE', 'AF', 'AG', 'AI', 'AL', 'AM', 'AO', 'AQ', 'AR', 'AS', 'AT', 'AU', 'AW', 'AX', 'AZ',\n  'BA', 'BB', 'BD', 'BE', 'BF', 'BG', 'BH', 'BI', 'BJ', 'BL', 'BM', 'BN', 'BO', 'BQ', 'BR', 'BS', 'BT', 'BV', 'BW', 'BY', 'BZ',\n  'CA', 'CC', 'CD', 'CF', 'CG', 'CH', 'CI', 'CK', 'CL', 'CM', 'CN', 'CO', 'CR', 'CU', 'CV', 'CW', 'CX', 'CY', 'CZ',\n  'DE', 'DJ', 'DK', 'DM', 'DO', 'DZ',\n  'EC', 'EE', 'EG', 'EH', 'ER', 'ES', 'ET',\n  'FI', 'FJ', 'FK', 'FM', 'FO', 'FR',\n  'GA', 'GB', 'GD', 'GE', 'GF', 'GG', 'GH', 'GI', 'GL', 'GM', 'GN', 'GP', 'GQ', 'GR', 'GS', 'GT', 'GU', 'GW', 'GY',\n  'HK', 'HM', 'HN', 'HR', 'HT', 'HU',\n  'ID', 'IE', 'IL', 'IM', 'IN', 'IO', 'IQ', 'IR', 'IS', 'IT',\n  'JE', 'JM', 'JO', 'JP',\n  'KE', 'KG', 'KH', 'KI', 'KM', 'KN', 'KP', 'KR', 'KW', 'KY', 'KZ',\n  'LA', 'LB', 'LC', 'LI', 'LK', 'LR', 'LS', 'LT', 'LU', 'LV', 'LY',\n  'MA', 'MC', 'MD', 'ME', 'MF', 'MG', 'MH', 'MK', 'ML', 'MM', 'MN', 'MO', 'MP', 'MQ', 'MR', 'MS', 'MT', 'MU', 'MV', 'MW', 'MX', 'MY', 'MZ',\n  'NA', 'NC', 'NE', 'NF', 'NG', 'NI', 'NL', 'NO', 'NP', 'NR', 'NU', 'NZ',\n  'OM',\n  'PA', 'PE', 'PF', 'PG', 'PH', 'PK', 'PL', 'PM', 'PN', 'PR', 'PS', 'PT', 'PW', 'PY',\n  'QA',\n  'RE', 'RO', 'RS', 'RU', 'RW',\n  'SA', 'SB', 'SC', 'SD', 'SE', 'SG', 'SH', 'SI', 'SJ', 'SK', 'SL', 'SM', 'SN', 'SO', 'SR', 'SS', 'ST', 'SV', 'SX', 'SY', 'SZ',\n  'TC', 'TD', 'TF', 'TG', 'TH', 'TJ', 'TK', 'TL', 'TM', 'TN', 'TO', 'TR', 'TT', 'TV', 'TW', 'TZ',\n  'UA', 'UG', 'UM', 'US', 'UY', 'UZ',\n  'VA', 'VC', 'VE', 'VG', 'VI', 'VN', 'VU',\n  'WF', 'WS',\n  'YE', 'YT',\n  'ZA', 'ZM', 'ZW',\n];\n\n/**\n * Check whether the `target` string is a valid \n * ISO 3166-1 alpha-2 officially assigned country code\n * \n * @param target The target string\n * @return true if the `target` is a valid is a valid ISO 3166-1 alpha-2 officially assigned country code, false otherwise\n */\nexport function isISO31661Alpha2(target:string) {\n  assertString(target);\n  return includes(validISO31661Alpha2CountriesCodes, target.toUpperCase());\n}\n","import { assertString } from '../util/assertString';\nimport { includes } from '../util/includes';\n\n// from https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3\nconst validISO31661Alpha3CountriesCodes = [\n  'AFG', 'ALA', 'ALB', 'DZA', 'ASM', 'AND', 'AGO', 'AIA', 'ATA', 'ATG', 'ARG', 'ARM', 'ABW', 'AUS', 'AUT', 'AZE',\n  'BHS', 'BHR', 'BGD', 'BRB', 'BLR', 'BEL', 'BLZ', 'BEN', 'BMU', 'BTN', 'BOL', 'BES', 'BIH', 'BWA', 'BVT', 'BRA',\n  'IOT', 'BRN', 'BGR', 'BFA', 'BDI', 'KHM', 'CMR', 'CAN', 'CPV', 'CYM', 'CAF', 'TCD', 'CHL', 'CHN', 'CXR', 'CCK',\n  'COL', 'COM', 'COG', 'COD', 'COK', 'CRI', 'CIV', 'HRV', 'CUB', 'CUW', 'CYP', 'CZE', 'DNK', 'DJI', 'DMA', 'DOM',\n  'ECU', 'EGY', 'SLV', 'GNQ', 'ERI', 'EST', 'ETH', 'FLK', 'FRO', 'FJI', 'FIN', 'FRA', 'GUF', 'PYF', 'ATF', 'GAB',\n  'GMB', 'GEO', 'DEU', 'GHA', 'GIB', 'GRC', 'GRL', 'GRD', 'GLP', 'GUM', 'GTM', 'GGY', 'GIN', 'GNB', 'GUY', 'HTI',\n  'HMD', 'VAT', 'HND', 'HKG', 'HUN', 'ISL', 'IND', 'IDN', 'IRN', 'IRQ', 'IRL', 'IMN', 'ISR', 'ITA', 'JAM', 'JPN',\n  'JEY', 'JOR', 'KAZ', 'KEN', 'KIR', 'PRK', 'KOR', 'KWT', 'KGZ', 'LAO', 'LVA', 'LBN', 'LSO', 'LBR', 'LBY', 'LIE',\n  'LTU', 'LUX', 'MAC', 'MKD', 'MDG', 'MWI', 'MYS', 'MDV', 'MLI', 'MLT', 'MHL', 'MTQ', 'MRT', 'MUS', 'MYT', 'MEX',\n  'FSM', 'MDA', 'MCO', 'MNG', 'MNE', 'MSR', 'MAR', 'MOZ', 'MMR', 'NAM', 'NRU', 'NPL', 'NLD', 'NCL', 'NZL', 'NIC',\n  'NER', 'NGA', 'NIU', 'NFK', 'MNP', 'NOR', 'OMN', 'PAK', 'PLW', 'PSE', 'PAN', 'PNG', 'PRY', 'PER', 'PHL', 'PCN',\n  'POL', 'PRT', 'PRI', 'QAT', 'REU', 'ROU', 'RUS', 'RWA', 'BLM', 'SHN', 'KNA', 'LCA', 'MAF', 'SPM', 'VCT', 'WSM',\n  'SMR', 'STP', 'SAU', 'SEN', 'SRB', 'SYC', 'SLE', 'SGP', 'SXM', 'SVK', 'SVN', 'SLB', 'SOM', 'ZAF', 'SGS', 'SSD',\n  'ESP', 'LKA', 'SDN', 'SUR', 'SJM', 'SWZ', 'SWE', 'CHE', 'SYR', 'TWN', 'TJK', 'TZA', 'THA', 'TLS', 'TGO', 'TKL',\n  'TON', 'TTO', 'TUN', 'TUR', 'TKM', 'TCA', 'TUV', 'UGA', 'UKR', 'ARE', 'GBR', 'USA', 'UMI', 'URY', 'UZB', 'VUT',\n  'VEN', 'VNM', 'VGB', 'VIR', 'WLF', 'ESH', 'YEM', 'ZMB', 'ZWE',\n];\n\n/**\n * Check whether the `target` string is a valid \n * ISO 3166-1 alpha-3 officially assigned country code\n * \n * @param target The target string\n * @return true if the `target` is a valid is a valid ISO 3166-1 alpha-2 officially assigned country code, false otherwise\n */\nexport function isISO31661Alpha3(target:string) {\n  assertString(target);\n  return includes(validISO31661Alpha3CountriesCodes, target.toUpperCase());\n}\n","import { assertString } from '../util/assertString';\n\n// see http://isrc.ifpi.org/en/isrc-standard/code-syntax\nconst isrc = /^[A-Z]{2}[0-9A-Z]{3}\\d{2}\\d{5}$/;\n\n\n/**\n * Checks whether the `target` string is a valid ISRC\n * \n * @param target The target string\n * @return true if the `target` is a valid ISRC, false otherwise\n */\nexport function isISRC(target:string) {\n  assertString(target);\n  return isrc.test(target);\n}\n","import { assertString } from '../util/assertString';\n\nconst issn = '^\\\\d{4}-?\\\\d{3}[\\\\dX]$';\n\n/**\n * Checks whether the `target` string is a valid ISSN\n * \n * @param target The target string\n * @param options The options\n * @return true if the `target` is a valid ISSN, false otherwise\n */\nexport function isISSN(str, options: any = {}) {\n  assertString(str);\n  let testIssn: any = issn;\n  testIssn = options.require_hyphen ? testIssn.replace('?', '') : testIssn;\n  testIssn = options.case_sensitive ? new RegExp(testIssn) : new RegExp(testIssn, 'i');\n  if (!testIssn.test(str)) {\n    return false;\n  }\n  const digits = str.replace('-', '').toUpperCase();\n  let checksum = 0;\n  for (let i = 0; i < digits.length; i++) {\n    const digit = digits[i];\n    checksum += (digit === 'X' ? 10 : +digit) * (8 - i);\n  }\n  return checksum % 11 === 0;\n}\n","import { assertString } from '../util/assertString';\n\n/**\n * Checks whether the `target` string is valid JSON\n * \n * @param target The target string\n * @return true if the `target` is a valid ISSN, false otherwise\n */\nexport function isJSON(target:string) {\n  assertString(target);\n  try {\n    const obj = JSON.parse(target);\n    return !!obj && typeof obj === 'object';\n  } catch (e) { /* ignore */ }\n  return false;\n}\n","import { assertString } from '../util/assertString';\n\nconst jwt = /^([A-Za-z0-9\\-_~+\\/]+[=]{0,2})\\.([A-Za-z0-9\\-_~+\\/]+[=]{0,2})(?:\\.([A-Za-z0-9\\-_~+\\/]+[=]{0,2}))?$/;\n\n/**\n * Checks whether the `target` string is a valid JWT\n * \n * @param target The target string\n * @return true if the `target` is a valid JWT, false otherwise\n */\nexport function isJWT(target:string) {\n  assertString(target);\n  return jwt.test(target);\n}\n","import { assertString } from '../util/assertString';\n\nconst lat = /^\\(?[+-]?(90(\\.0+)?|[1-8]?\\d(\\.\\d+)?)$/;\nconst long = /^\\s?[+-]?(180(\\.0+)?|1[0-7]\\d(\\.\\d+)?|\\d{1,2}(\\.\\d+)?)\\)?$/;\n\n/**\n * Checks whether the `target` string is a valid LatLong\n * \n * @param target The target string\n * @return true if the `target` is a valid LatLong, false otherwise\n */\nexport function isLatLong(target:string) {\n  assertString(target);\n  if (!target.includes(',')) return false;\n  const pair = target.split(',');\n  if ((pair[0].startsWith('(') && !pair[1].endsWith(')'))\n    || (pair[1].endsWith(')') && !pair[0].startsWith('('))) return false;\n  return lat.test(pair[0]) && long.test(pair[1]);\n}\n","import { assertString } from '../util/assertString';\n\n/* eslint-disable prefer-rest-params */\n\n/**\n * Checks whether the `target` string length is valid\n * \n * @param target The target string\n * @param options The options\n * @return true if the `target` has a valid length, false otherwise\n */\nexport function isLength(target:string, options) {\n  assertString(target);\n  let min;\n  let max;\n  if (typeof (options) === 'object') {\n    min = options.min || 0;\n    max = options.max;\n  } else { // backwards compatibility: isLength(str, min [, max])\n    min = arguments[1] || 0;\n    max = arguments[2];\n  }\n  const surrogatePairs = target.match(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g) || [];\n  const len = target.length - surrogatePairs.length;\n  return len >= min && (typeof max === 'undefined' || len <= max);\n}\n","import { assertString } from '../util/assertString';\n\nconst localeReg = /^[A-z]{2,4}([_-]([A-z]{4}|[\\d]{3}))?([_-]([A-z]{2}|[\\d]{3}))?$/;\n\n/**\n * Checks whether the `target` string is a valid locale\n * \n * @param target The target string\n * @return true if the `target` is a valid locale, false otherwise\n */\nexport function isLocale(target:string) {\n  assertString(target);\n  if (target === 'en_US_POSIX' || target === 'ca_ES_VALENCIA') {\n    return true;\n  }\n  return localeReg.test(target);\n}\n","import { assertString } from '../util/assertString';\n\n/**\n * Checks whether the `target` string is lowercase\n * \n * @param target The target string\n * @return true if the `target` is lowercase, false otherwise\n */\nexport function isLowercase(target:string) {\n  assertString(target);\n  return target === target.toLowerCase();\n}\n","import { assertString } from '../util/assertString';\n\nconst macAddress = /^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$/;\nconst macAddressNoColons = /^([0-9a-fA-F]){12}$/;\nconst macAddressWithHyphen = /^([0-9a-fA-F][0-9a-fA-F]-){5}([0-9a-fA-F][0-9a-fA-F])$/;\nconst macAddressWithSpaces = /^([0-9a-fA-F][0-9a-fA-F]\\s){5}([0-9a-fA-F][0-9a-fA-F])$/;\n\n/**\n * Checks whether the `target` string is a valid MAC Address\n * \n * @param target The target string\n * @param options The options\n * @return true if the `target` is a valid Mac Address, false otherwise\n */\nexport function isMACAddress(target:string, options) {\n  assertString(target);\n  if (options && options.no_colons) {\n    return macAddressNoColons.test(target);\n  }\n  return macAddress.test(target) || macAddressWithHyphen.test(target) || macAddressWithSpaces.test(target);\n}\n","import { assertString } from '../util/assertString';\n\nconst magnetURI = /^magnet:\\?xt=urn:[a-z0-9]+:[a-z0-9]{32,40}&dn=.+&tr=.+$/i;\n\n/**\n * Checks whether the `target` string is a valid Magnet URI\n * \n * @param target The target string\n * @return true if the `target` is a valid Magnet URI, false otherwise\n */\nexport function isMagnetURI(target:string) {\n  assertString(target);\n  return magnetURI.test(target.trim());\n}\n","import { assertString } from '../util/assertString';\n\nconst md5 = /^[a-f0-9]{32}$/;\n\n/**\n * Checks whether the `target` string is a valid MD5 checksum\n * \n * @param target The target string\n * @return true if the `target` is a valid MD5 checksum, false otherwise\n */\nexport function isMD5(target:string) {\n  assertString(target);\n  return md5.test(target);\n}\n","import { assertString } from '../util/assertString';\n\n/*\n  Checks if the provided string matches to a correct Media type format (MIME type)\n\n  This function only checks is the string format follows the\n  etablished rules by the according RFC specifications.\n  This function supports 'charset' in textual media types\n  (https://tools.ietf.org/html/rfc6657).\n\n  This function does not check against all the media types listed\n  by the IANA (https://www.iana.org/assignments/media-types/media-types.xhtml)\n  because of lightness purposes : it would require to include\n  all these MIME types in this librairy, which would weigh it\n  significantly. This kind of effort maybe is not worth for the use that\n  this function has in this entire librairy.\n\n  More informations in the RFC specifications :\n  - https://tools.ietf.org/html/rfc2045\n  - https://tools.ietf.org/html/rfc2046\n  - https://tools.ietf.org/html/rfc7231#section-3.1.1.1\n  - https://tools.ietf.org/html/rfc7231#section-3.1.1.5\n*/\n\n// Match simple MIME types\n// NB :\n//   Subtype length must not exceed 100 characters.\n//   This rule does not comply to the RFC specs (what is the max length ?).\nconst mimeTypeSimple = /^(application|audio|font|image|message|model|multipart|text|video)\\/[a-zA-Z0-9\\.\\-\\+]{1,100}$/i; // eslint-disable-line max-len\n\n// Handle \"charset\" in \"text/*\"\nconst mimeTypeText = /^text\\/[a-zA-Z0-9\\.\\-\\+]{1,100};\\s?charset=(\"[a-zA-Z0-9\\.\\-\\+\\s]{0,70}\"|[a-zA-Z0-9\\.\\-\\+]{0,70})(\\s?\\([a-zA-Z0-9\\.\\-\\+\\s]{1,20}\\))?$/i; // eslint-disable-line max-len\n\n// Handle \"boundary\" in \"multipart/*\"\nconst mimeTypeMultipart = /^multipart\\/[a-zA-Z0-9\\.\\-\\+]{1,100}(;\\s?(boundary|charset)=(\"[a-zA-Z0-9\\.\\-\\+\\s]{0,70}\"|[a-zA-Z0-9\\.\\-\\+]{0,70})(\\s?\\([a-zA-Z0-9\\.\\-\\+\\s]{1,20}\\))?){0,2}$/i; // eslint-disable-line max-len\n\n/**\n * Checks whether the `target` string is a valid Mime Type\n * \n * @param target The target string\n * @return true if the `target` is a valid Mime Type, false otherwise\n */\nexport function isMimeType(str) {\n  assertString(str);\n  return mimeTypeSimple.test(str) || mimeTypeText.test(str) || mimeTypeMultipart.test(str);\n}","import { assertString } from '../util/assertString'\n\n/**\n * Mobile Phone Local Type.\n * \n * TODO: \n * We added \n * 'en-CA'\n * 'fr-BE'\n * 'zh-HK'\n * And these don't have regex support yet.\n */\nexport type MobilePhoneLocale =\n| 'am-AM'\n| 'ar-AE'\n| 'ar-BH'\n| 'ar-DZ'\n| 'ar-EG'\n| 'ar-IQ'\n| 'ar-JO'\n| 'ar-KW'\n| 'ar-SA'\n| 'ar-SY'\n| 'ar-TN'\n| 'be-BY'\n| 'bg-BG'\n| 'bn-BD'\n| 'cs-CZ'\n| 'da-DK'\n| 'de-DE'\n| 'de-AT'\n| 'el-GR'\n| 'en-AU'\n| 'en-GB'\n| 'en-GG'\n| 'en-GH'\n| 'en-HK'\n| 'en-IE'\n| 'en-MO'\n| 'en-IN'\n| 'en-KE'\n| 'en-MT'\n| 'en-MU'\n| 'en-NG'\n| 'en-NZ'\n| 'en-PK'\n| 'en-RW'\n| 'en-SG'\n| 'en-TZ'\n| 'en-UG'\n| 'en-US'\n| 'en-ZA'\n| 'en-ZM'\n| 'es-CL'\n| 'es-ES'\n| 'es-MX'\n| 'es-PA'\n| 'es-PY'\n| 'es-UY'\n| 'et-EE'\n| 'fa-IR'\n| 'fi-FI'\n| 'fj-FJ'\n| 'fo-FO'\n| 'fr-FR'\n| 'fr-GF'\n| 'fr-GP'\n| 'fr-MQ'\n| 'fr-RE'\n| 'he-IL'\n| 'hu-HU'\n| 'id-ID'\n| 'it-IT'\n| 'ja-JP'\n| 'kk-KZ'\n| 'kl-GL'\n| 'ko-KR'\n| 'lt-LT'\n| 'ms-MY'\n| 'nb-NO'\n| 'nl-BE'\n| 'ne-NP'\n| 'nl-NL'\n| 'nn-NO'\n| 'pl-PL'\n| 'pt-BR'\n| 'pt-PT'\n| 'ro-RO'\n| 'ru-RU'\n| 'sl-SI'\n| 'sk-SK'\n| 'sr-RS'\n| 'sv-SE'\n| 'th-TH'\n| 'tr-TR'\n| 'uk-UA'\n| 'vi-VN'\n| 'zh-CN'\n| 'zh-TW'\n| 'en-CA'\n| 'fr-BE'\n| 'zh-HK'\n\n/* eslint-disable max-len */\nconst phones = {\n  'am-AM': /^(\\+?374|0)((10|[9|7][0-9])\\d{6}$|[2-4]\\d{7}$)/,\n  'ar-AE': /^((\\+?971)|0)?5[024568]\\d{7}$/,\n  'ar-BH': /^(\\+?973)?(3|6)\\d{7}$/,\n  'ar-DZ': /^(\\+?213|0)(5|6|7)\\d{8}$/,\n  'ar-EG': /^((\\+?20)|0)?1[0125]\\d{8}$/,\n  'ar-IQ': /^(\\+?964|0)?7[0-9]\\d{8}$/,\n  'ar-JO': /^(\\+?962|0)?7[789]\\d{7}$/,\n  'ar-KW': /^(\\+?965)[569]\\d{7}$/,\n  'ar-SA': /^(!?(\\+?966)|0)?5\\d{8}$/,\n  'ar-SY': /^(!?(\\+?963)|0)?9\\d{8}$/,\n  'ar-TN': /^(\\+?216)?[2459]\\d{7}$/,\n  'be-BY': /^(\\+?375)?(24|25|29|33|44)\\d{7}$/,\n  'bg-BG': /^(\\+?359|0)?8[789]\\d{7}$/,\n  'bn-BD': /^(\\+?880|0)1[13456789][0-9]{8}$/,\n  'cs-CZ': /^(\\+?420)? ?[1-9][0-9]{2} ?[0-9]{3} ?[0-9]{3}$/,\n  'da-DK': /^(\\+?45)?\\s?\\d{2}\\s?\\d{2}\\s?\\d{2}\\s?\\d{2}$/,\n  'de-DE': /^(\\+49)?0?1(5[0-25-9]\\d|6([23]|0\\d?)|7([0-57-9]|6\\d))\\d{7}$/,\n  'de-AT': /^(\\+43|0)\\d{1,4}\\d{3,12}$/,\n  'el-GR': /^(\\+?30|0)?(69\\d{8})$/,\n  'en-AU': /^(\\+?61|0)4\\d{8}$/,\n  'en-GB': /^(\\+?44|0)7\\d{9}$/,\n  'en-GG': /^(\\+?44|0)1481\\d{6}$/,\n  'en-GH': /^(\\+233|0)(20|50|24|54|27|57|26|56|23|28)\\d{7}$/,\n  'en-HK': /^(\\+?852[-\\s]?)?[456789]\\d{3}[-\\s]?\\d{4}$/,\n  'en-MO': /^(\\+?853[-\\s]?)?[6]\\d{3}[-\\s]?\\d{4}$/,\n  'en-IE': /^(\\+?353|0)8[356789]\\d{7}$/,\n  'en-IN': /^(\\+?91|0)?[6789]\\d{9}$/,\n  'en-KE': /^(\\+?254|0)(7|1)\\d{8}$/,\n  'en-MT': /^(\\+?356|0)?(99|79|77|21|27|22|25)[0-9]{6}$/,\n  'en-MU': /^(\\+?230|0)?\\d{8}$/,\n  'en-NG': /^(\\+?234|0)?[789]\\d{9}$/,\n  'en-NZ': /^(\\+?64|0)[28]\\d{7,9}$/,\n  'en-PK': /^((\\+92)|(0092))-{0,1}\\d{3}-{0,1}\\d{7}$|^\\d{11}$|^\\d{4}-\\d{7}$/,\n  'en-RW': /^(\\+?250|0)?[7]\\d{8}$/,\n  'en-SG': /^(\\+65)?[89]\\d{7}$/,\n  'en-TZ': /^(\\+?255|0)?[67]\\d{8}$/,\n  'en-UG': /^(\\+?256|0)?[7]\\d{8}$/,\n  'en-US': /^((\\+1|1)?( |-)?)?(\\([2-9][0-9]{2}\\)|[2-9][0-9]{2})( |-)?([2-9][0-9]{2}( |-)?[0-9]{4})$/,\n  'en-ZA': /^(\\+?27|0)\\d{9}$/,\n  'en-ZM': /^(\\+?26)?09[567]\\d{7}$/,\n  'es-CL': /^(\\+?56|0)[2-9]\\d{1}\\d{7}$/,\n  'es-EC': /^(\\+?593|0)([2-7]|9[2-9])\\d{7}$/,\n  'es-ES': /^(\\+?34)?(6\\d{1}|7[1234])\\d{7}$/,\n  'es-MX': /^(\\+?52)?(1|01)?\\d{10,11}$/,\n  'es-PA': /^(\\+?507)\\d{7,8}$/,\n  'es-PY': /^(\\+?595|0)9[9876]\\d{7}$/,\n  'es-UY': /^(\\+598|0)9[1-9][\\d]{6}$/,\n  'et-EE': /^(\\+?372)?\\s?(5|8[1-4])\\s?([0-9]\\s?){6,7}$/,\n  'fa-IR': /^(\\+?98[\\-\\s]?|0)9[0-39]\\d[\\-\\s]?\\d{3}[\\-\\s]?\\d{4}$/,\n  'fi-FI': /^(\\+?358|0)\\s?(4(0|1|2|4|5|6)?|50)\\s?(\\d\\s?){4,8}\\d$/,\n  'fj-FJ': /^(\\+?679)?\\s?\\d{3}\\s?\\d{4}$/,\n  'fo-FO': /^(\\+?298)?\\s?\\d{2}\\s?\\d{2}\\s?\\d{2}$/,\n  'fr-FR': /^(\\+?33|0)[67]\\d{8}$/,\n  'fr-GF': /^(\\+?594|0|00594)[67]\\d{8}$/,\n  'fr-GP': /^(\\+?590|0|00590)[67]\\d{8}$/,\n  'fr-MQ': /^(\\+?596|0|00596)[67]\\d{8}$/,\n  'fr-RE': /^(\\+?262|0|00262)[67]\\d{8}$/,\n  'he-IL': /^(\\+972|0)([23489]|5[012345689]|77)[1-9]\\d{6}$/,\n  'hu-HU': /^(\\+?36)(20|30|70)\\d{7}$/,\n  'id-ID': /^(\\+?62|0)8(1[123456789]|2[1238]|3[1238]|5[12356789]|7[78]|9[56789]|8[123456789])([\\s?|\\d]{5,11})$/,\n  'it-IT': /^(\\+?39)?\\s?3\\d{2} ?\\d{6,7}$/,\n  'ja-JP': /^(\\+81[ \\-]?(\\(0\\))?|0)[6789]0[ \\-]?\\d{4}[ \\-]?\\d{4}$/,\n  'kk-KZ': /^(\\+?7|8)?7\\d{9}$/,\n  'kl-GL': /^(\\+?299)?\\s?\\d{2}\\s?\\d{2}\\s?\\d{2}$/,\n  'ko-KR': /^((\\+?82)[ \\-]?)?0?1([0|1|6|7|8|9]{1})[ \\-]?\\d{3,4}[ \\-]?\\d{4}$/,\n  'lt-LT': /^(\\+370|8)\\d{8}$/,\n  'ms-MY': /^(\\+?6?01){1}(([0145]{1}(\\-|\\s)?\\d{7,8})|([236789]{1}(\\s|\\-)?\\d{7}))$/,\n  'nb-NO': /^(\\+?47)?[49]\\d{7}$/,\n  'ne-NP': /^(\\+?977)?9[78]\\d{8}$/,\n  'nl-BE': /^(\\+?32|0)4?\\d{8}$/,\n  'nl-NL': /^(\\+?31|0)6?\\d{8}$/,\n  'nn-NO': /^(\\+?47)?[49]\\d{7}$/,\n  'pl-PL': /^(\\+?48)? ?[5-8]\\d ?\\d{3} ?\\d{2} ?\\d{2}$/,\n  'pt-BR': /(?=^(\\+?5{2}\\-?|0)[1-9]{2}\\-?\\d{4}\\-?\\d{4}$)(^(\\+?5{2}\\-?|0)[1-9]{2}\\-?[6-9]{1}\\d{3}\\-?\\d{4}$)|(^(\\+?5{2}\\-?|0)[1-9]{2}\\-?9[6-9]{1}\\d{3}\\-?\\d{4}$)/,\n  'pt-PT': /^(\\+?351)?9[1236]\\d{7}$/,\n  'ro-RO': /^(\\+?4?0)\\s?7\\d{2}(\\/|\\s|\\.|\\-)?\\d{3}(\\s|\\.|\\-)?\\d{3}$/,\n  'ru-RU': /^(\\+?7|8)?9\\d{9}$/,\n  'sl-SI': /^(\\+386\\s?|0)(\\d{1}\\s?\\d{3}\\s?\\d{2}\\s?\\d{2}|\\d{2}\\s?\\d{3}\\s?\\d{3})$/,\n  'sk-SK': /^(\\+?421)? ?[1-9][0-9]{2} ?[0-9]{3} ?[0-9]{3}$/,\n  'sr-RS': /^(\\+3816|06)[- \\d]{5,9}$/,\n  'sv-SE': /^(\\+?46|0)[\\s\\-]?7[\\s\\-]?[02369]([\\s\\-]?\\d){7}$/,\n  'th-TH': /^(\\+66|66|0)\\d{9}$/,\n  'tr-TR': /^(\\+?90|0)?5\\d{9}$/,\n  'uk-UA': /^(\\+?38|8)?0\\d{9}$/,\n  'vi-VN': /^(\\+?84|0)((3([2-9]))|(5([2689]))|(7([0|6-9]))|(8([1-6|89]))|(9([0-9])))([0-9]{7})$/,\n  'zh-CN': /^((\\+|00)86)?1([358][0-9]|4[579]|6[67]|7[01235678]|9[189])[0-9]{8}$/,\n  'zh-TW': /^(\\+?886\\-?|0)?9\\d{8}$/,\n};\n/* eslint-enable max-len */\n\n// aliases\nphones['en-CA'] = phones['en-US'];\nphones['fr-BE'] = phones['nl-BE'];\nphones['zh-HK'] = phones['en-HK'];\nphones['zh-MO'] = phones['en-MO'];\n\n\n/**\n * Optional configuration \n * If `strictMode` is set to true, \n * the mobile phone number must be supplied \n * with the country code and therefore must start with +. \n * The supported localelist is exported via isMobilePhoneLocales.\n */\nexport interface IsMobilePhoneOptions {\n  strictMode:boolean\n}\n\n/**\n * Checks whether the `target` string is a valid Mobile Phone Number\n * \n * @param target The target string\n * @param locale The locale\n * @param options The options\n * @throws Error If the local passed in is not supported.\n * @return true if the `target` is a valid Mobile Phone Number, false otherwise\n */\nexport function isMobilePhone(target:string, locale:string, options?:IsMobilePhoneOptions) {\n  assertString(target);\n  if (options && options.strictMode && !target.startsWith('+')) {\n    return false;\n  }\n  if (Array.isArray(locale)) {\n    return locale.some((key) => {\n      // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes\n      // istanbul ignore else\n      if (phones.hasOwnProperty(key)) {\n        const phone = phones[key];\n        if (phone.test(target)) {\n          return true;\n        }\n      }\n      return false;\n    });\n  } else if (locale in phones) {\n    return phones[locale].test(target);\n    // alias falsey locale as 'any'\n  } else if (!locale || locale === 'any') {\n    for (const key in phones) {\n      // istanbul ignore else\n      if (phones.hasOwnProperty(key)) {\n        const phone = phones[key];\n        if (phone.test(target)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  throw new Error(`Invalid locale '${locale}'`);\n}\n\n/**\n * The supported locale list.\n */\nexport const isMobilePhoneLocales = Object.keys(phones);\n","import { assertString } from '../util/assertString';\n\nimport { isHexadecimal } from './isHexadecimal';\n\n/**\n * Checks whether the `target` string is a valid MongoID\n * \n * @param target The target string\n * @return true if the `target` is a valid MongoID, false otherwise\n */\nexport function isMongoId(target:string) {\n  assertString(target);\n  return isHexadecimal(target) && target.length === 24;\n}\n","import { assertString } from '../util/assertString';\n\n/* eslint-disable no-control-regex */\nconst multibyte = /[^\\x00-\\x7F]/;\n/* eslint-enable no-control-regex */\n\n/**\n * Checks whether the `target` string contains one or more multibyte characters\n * \n * @param target The target string\n * @return true if the `target` contains one or more multibyte characters, false otherwise\n */\nexport function isMultibyte(target:string) {\n  assertString(target);\n  return multibyte.test(target);\n}\n","import { assertString } from '../util/assertString';\n\nconst numeric = /^[+-]?([0-9]*[.])?[0-9]+$/;\nconst numericNoSymbols = /^[0-9]+$/;\n\n/**\n * Checks whether the `target` string contains only numbers\n * \n * @param target The target string\n * @param options The options\n * @return true if the `target` contains only numbers, false otherwise\n */\nexport function isNumeric(str, options) {\n  assertString(str);\n  if (options && options.no_symbols) {\n    return numericNoSymbols.test(str);\n  }\n  return numeric.test(str);\n}\n","import { assertString } from '../util/assertString';\n\nconst octal = /^(0o)?[0-7]+$/i;\n\n/**\n * Checks whether the `target` string is a valid Octal number\n * \n * @param target The target string\n * @return true if the `target` is a valid Octal number, false otherwise\n */\nexport function isOctal(target:string) {\n  assertString(target);\n  return octal.test(target);\n}\n","/**\n * Reference:\n * https://en.wikipedia.org/ -- Wikipedia\n * https://docs.microsoft.com/en-us/microsoft-365/compliance/eu-passport-number -- EU Passport Number\n * https://countrycode.org/ -- Country Codes\n */\nconst passportRegexByCountryCode = {\n  AM: /^[A-Z]{2}\\d{7}$/, // ARMENIA\n  AR: /^[A-Z]{3}\\d{6}$/, // ARGENTINA\n  AT: /^[A-Z]\\d{7}$/, // AUSTRIA\n  AU: /^[A-Z]\\d{7}$/, // AUSTRALIA\n  BE: /^[A-Z]{2}\\d{6}$/, // BELGIUM\n  BG: /^\\d{9}$/, // BULGARIA\n  CA: /^[A-Z]{2}\\d{6}$/, // CANADA\n  CH: /^[A-Z]\\d{7}$/, // SWITZERLAND\n  CN: /^[GE]\\d{8}$/, // CHINA [G=Ordinary, E=Electronic] followed by 8-digits\n  CY: /^[A-Z](\\d{6}|\\d{8})$/, // CYPRUS\n  CZ: /^\\d{8}$/, // CZECH REPUBLIC\n  DE: /^[CFGHJKLMNPRTVWXYZ0-9]{9}$/, // GERMANY\n  DK: /^\\d{9}$/, // DENMARK\n  EE: /^([A-Z]\\d{7}|[A-Z]{2}\\d{7})$/, // ESTONIA (K followed by 7-digits), e-passports have 2 UPPERCASE followed by 7 digits\n  ES: /^[A-Z0-9]{2}([A-Z0-9]?)\\d{6}$/, // SPAIN\n  FI: /^[A-Z]{2}\\d{7}$/, // FINLAND\n  FR: /^\\d{2}[A-Z]{2}\\d{5}$/, // FRANCE\n  GB: /^\\d{9}$/, // UNITED KINGDOM\n  GR: /^[A-Z]{2}\\d{7}$/, // GREECE\n  HR: /^\\d{9}$/, // CROATIA\n  HU: /^[A-Z]{2}(\\d{6}|\\d{7})$/, // HUNGARY\n  IE: /^[A-Z0-9]{2}\\d{7}$/, // IRELAND\n  IS: /^(A)\\d{7}$/, // ICELAND\n  IT: /^[A-Z0-9]{2}\\d{7}$/, // ITALY\n  JP: /^[A-Z]{2}\\d{7}$/, // JAPAN\n  KR: /^[MS]\\d{8}$/, // SOUTH KOREA, REPUBLIC OF KOREA, [S=PS Passports, M=PM Passports]\n  LT: /^[A-Z0-9]{8}$/, // LITHUANIA\n  LU: /^[A-Z0-9]{8}$/, // LUXEMBURG\n  LV: /^[A-Z0-9]{2}\\d{7}$/, // LATVIA\n  MT: /^\\d{7}$/, // MALTA\n  NL: /^[A-Z]{2}[A-Z0-9]{6}\\d$/, // NETHERLANDS\n  PO: /^[A-Z]{2}\\d{7}$/, // POLAND\n  PT: /^[A-Z]\\d{6}$/, // PORTUGAL\n  RO: /^\\d{8,9}$/, // ROMANIA\n  SE: /^\\d{8}$/, // SWEDEN\n  SL: /^(P)[A-Z]\\d{7}$/, // SLOVANIA\n  SK: /^[0-9A-Z]\\d{7}$/, // SLOVAKIA\n  TR: /^[A-Z]\\d{8}$/, // TURKEY\n  UA: /^[A-Z]{2}\\d{6}$/, // UKRAINE\n  US: /^\\d{9}$/, // UNITED STATES\n};\n\n/**\n * Check if `target` is a valid passport number\n * relative to provided `arg` ISO Country Code.\n *\n * @param target The passport number\n * @param arg The country code\n * @return true if the `target` is a passport number, false otherwise\n */\nexport function isPassportNumber(target:string, arg:string) {\n  /** Remove All Whitespaces, Convert to UPPERCASE */\n  const normalizedStr = target.replace(/\\s/g, '').toUpperCase();\n\n  return (arg.toUpperCase() in passportRegexByCountryCode) &&\n    passportRegexByCountryCode[arg].test(normalizedStr);\n}","import { isInt } from './isInt';\n\n/**\n * Check if `target` is a valid port number\n *\n * @param target The port number\n * @return true if the `target` is a port number, false otherwise\n * \n * @example\n```\nconst isPortNumber:boolean = isPort('4200')\n```\n */\nexport function isPort(target:string) {\n  return isInt(target, { min: 0, max: 65535 });\n}\n","import { assertString } from '../util/assertString';\n\n// common patterns\nconst threeDigit = /^\\d{3}$/;\nconst fourDigit = /^\\d{4}$/;\nconst fiveDigit = /^\\d{5}$/;\nconst sixDigit = /^\\d{6}$/;\n\nconst patterns = {\n  AD: /^AD\\d{3}$/,\n  AT: fourDigit,\n  AU: fourDigit,\n  BE: fourDigit,\n  BG: fourDigit,\n  BR: /^\\d{5}-\\d{3}$/,\n  CA: /^[ABCEGHJKLMNPRSTVXY]\\d[ABCEGHJ-NPRSTV-Z][\\s\\-]?\\d[ABCEGHJ-NPRSTV-Z]\\d$/i,\n  CH: fourDigit,\n  CZ: /^\\d{3}\\s?\\d{2}$/,\n  DE: fiveDigit,\n  DK: fourDigit,\n  DZ: fiveDigit,\n  EE: fiveDigit,\n  ES: fiveDigit,\n  FI: fiveDigit,\n  FR: /^\\d{2}\\s?\\d{3}$/,\n  GB: /^(gir\\s?0aa|[a-z]{1,2}\\d[\\da-z]?\\s?(\\d[a-z]{2})?)$/i,\n  GR: /^\\d{3}\\s?\\d{2}$/,\n  HR: /^([1-5]\\d{4}$)/,\n  HU: fourDigit,\n  ID: fiveDigit,\n  IE: /^(?!.*(?:o))[A-z]\\d[\\dw]\\s\\w{4}$/i,\n  IL: fiveDigit,\n  IN: /^((?!10|29|35|54|55|65|66|86|87|88|89)[1-9][0-9]{5})$/,\n  IS: threeDigit,\n  IT: fiveDigit,\n  JP: /^\\d{3}\\-\\d{4}$/,\n  KE: fiveDigit,\n  LI: /^(948[5-9]|949[0-7])$/,\n  LT: /^LT\\-\\d{5}$/,\n  LU: fourDigit,\n  LV: /^LV\\-\\d{4}$/,\n  MX: fiveDigit,\n  MT: /^[A-Za-z]{3}\\s{0,1}\\d{4}$/,\n  NL: /^\\d{4}\\s?[a-z]{2}$/i,\n  NO: fourDigit,\n  NZ: fourDigit,\n  PL: /^\\d{2}\\-\\d{3}$/,\n  PR: /^00[679]\\d{2}([ -]\\d{4})?$/,\n  PT: /^\\d{4}\\-\\d{3}?$/,\n  RO: sixDigit,\n  RU: sixDigit,\n  SA: fiveDigit,\n  SE: /^[1-9]\\d{2}\\s?\\d{2}$/,\n  SI: fourDigit,\n  SK: /^\\d{3}\\s?\\d{2}$/,\n  TN: fourDigit,\n  TW: /^\\d{3}(\\d{2})?$/,\n  UA: fiveDigit,\n  US: /^\\d{5}(-\\d{4})?$/,\n  ZA: fourDigit,\n  ZM: fiveDigit,\n};\n\nexport const postalCodeLocales = Object.keys(patterns);\n\n/**\n * Checks whether the `target` string is a valid postal code\n * \n * @param target The target string\n * @param arg The locale\n * @return true if the `target` is a valid postal code, false otherwise\n */\nexport function isPostalCode(target:string, arg:string) {\n  assertString(target);\n  if (arg in patterns) {\n    return patterns[arg].test(target);\n  } else if (arg === 'any') {\n    for (const key in patterns) {\n      // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes\n      // istanbul ignore else\n      if (patterns.hasOwnProperty(key)) {\n        const pattern = patterns[key];\n        if (pattern.test(target)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  throw new Error(`Invalid locale '${arg}'`);\n}","import { assertString } from '../util/assertString';\n\n/* Based on https://tools.ietf.org/html/rfc3339#section-5.6 */\n\nconst dateFullYear = /[0-9]{4}/;\nconst dateMonth = /(0[1-9]|1[0-2])/;\nconst dateMDay = /([12]\\d|0[1-9]|3[01])/;\n\nconst timeHour = /([01][0-9]|2[0-3])/;\nconst timeMinute = /[0-5][0-9]/;\nconst timeSecond = /([0-5][0-9]|60)/;\n\nconst timeSecFrac = /(\\.[0-9]+)?/;\nconst timeNumOffset = new RegExp(`[-+]${timeHour.source}:${timeMinute.source}`);\nconst timeOffset = new RegExp(`([zZ]|${timeNumOffset.source})`);\n\nconst partialTime = new RegExp(`${timeHour.source}:${timeMinute.source}:${timeSecond.source}${timeSecFrac.source}`);\n\nconst fullDate = new RegExp(`${dateFullYear.source}-${dateMonth.source}-${dateMDay.source}`);\nconst fullTime = new RegExp(`${partialTime.source}${timeOffset.source}`);\n\nconst rfc3339 = new RegExp(`${fullDate.source}[ tT]${fullTime.source}`);\n\n/**\n * Check if `target` is a valid RFC3339 timestamp\n *\n * @param target The time stamp\n * @return true if the `target` is a valid RFC3339 timestamp, false otherwise\n * \n * @example\n```\nconst isRFC3339:boolean = isRFC3339('2002-10-02T15:00:00Z')\n```\n */\nexport function isRFC3339(target:string) {\n  assertString(target);\n  return rfc3339.test(target);\n}\n","import { assertString } from '../util/assertString';\n\nconst rgbColor = /^rgb\\((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]),){2}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\)$/;\nconst rgbaColor = /^rgba\\((([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]),){3}(0?\\.\\d|1(\\.0)?|0(\\.0)?)\\)$/;\nconst rgbColorPercent = /^rgb\\((([0-9]%|[1-9][0-9]%|100%),){2}([0-9]%|[1-9][0-9]%|100%)\\)/;\nconst rgbaColorPercent = /^rgba\\((([0-9]%|[1-9][0-9]%|100%),){3}(0?\\.\\d|1(\\.0)?|0(\\.0)?)\\)/;\n\n/**\n * Check if `target` is a valid RGB color\n *\n * @param target The RGB color\n * @return true if the `target` is a valid RGB color, false otherwise\n * \n */\nexport function isRgbColor(target:string, includePercentValues:string = `true`) {\n  assertString(target);\n\n  if (!includePercentValues) {\n    return rgbColor.test(target) || rgbaColor.test(target);\n  }\n\n  return rgbColor.test(target) ||\n    rgbaColor.test(target) ||\n    rgbColorPercent.test(target) ||\n    rgbaColorPercent.test(target);\n}\n","/**\n * Build RegExp object from an array\n * of multiple/multi-line regexp parts\n *\n * @param {string[]} parts\n * @param {string} flags\n * @return {object} - RegExp object\n */\nexport function multilineRegexp(parts, flags = '') {\n  const regexpAsStringLiteral = parts.join('');\n\n  return new RegExp(regexpAsStringLiteral, flags);\n}\n","import {assertString} from '../util/assertString';\nimport {multilineRegexp} from '../util/multilineRegex';\n\n/**\n * Regular Expression to match\n * semantic versioning (SemVer)\n * built from multi-line, multi-parts regexp\n * Reference: https://semver.org/\n */\nconst semanticVersioningRegex = multilineRegexp([\n  '^(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)\\\\.(0|[1-9]\\\\d*)',\n  '(?:-((?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\\\.(?:0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))',\n  '?(?:\\\\+([0-9a-zA-Z-]+(?:\\\\.[0-9a-zA-Z-]+)*))?$',\n]);\n\n/**\n * Check if `target` is a valid semver version\n *\n * @param target The target\n * @return true if the `target` is a valid semver version, false otherwise\n */\nexport function isSemVer(target:string) {\n  assertString(target)\n  return semanticVersioningRegex.test(target)\n}\n","import { assertString } from '../util/assertString';\n\nlet charsetRegex = /^[^-_](?!.*?[-_]{2,})([a-z0-9\\\\-]{1,}).*[^-_]$/;\n\n/**\n * Check if `target` is a valid slug\n *\n * @param target The target\n * @return true if the `target` is a valid slug, false otherwise\n */\nexport function isSlug(target:string) {\n  assertString(target);\n  return (charsetRegex.test(target));\n}\n","import { assertString } from '../util/assertString';\n\nconst surrogatePair = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/;\n\n/**\n * Check if `target` is a valid surrogate pair\n *\n * @param target The target\n * @return true if the `target` a valid surrogate pair, false otherwise\n */\nexport function isSurrogatePair(target:string) {\n  assertString(target);\n  return surrogatePair.test(target);\n}\n","import { assertString } from '../util/assertString';\n\n\n/**\n * Check if `target` is uppercase\n *\n * @param target The target\n * @return true if the `target` is uppercase, false otherwise\n */\nexport function isUppercase(target:string) {\n  assertString(target);\n  return target === target.toUpperCase();\n}\n","import { assertString } from '../util/assertString';\n\nimport { isFQDN } from './isFQDN';\nimport { isIP } from './isIP';\nimport { merge } from '../util/merge';\n\n/*\noptions for isURL method\n\nrequire_protocol - if set as true isURL will return false if protocol is not present in the URL\nrequire_valid_protocol - isURL will check if the URL's protocol is present in the protocols option\nprotocols - valid protocols can be modified with this option\nrequire_host - if set as false isURL will not check if host is present in the URL\nallow_protocol_relative_urls - if set as true protocol relative URLs will be allowed\n\n*/\n\n/**\n * IsURL Options.\n */\nexport interface IsURLOptions {\n  protocols?: string[]\n  require_tld?: boolean\n  require_protocol?: boolean\n  require_host?: boolean\n  require_valid_protocol?: boolean\n  allow_underscores?: boolean\n  host_whitelist?: false | string[]\n  host_blacklist?: false | string[]\n  allow_trailing_dot?: boolean\n  allow_protocol_relative_urls?: boolean\n}\n\nconst default_url_options:IsURLOptions = {\n  protocols: ['http', 'https', 'ftp'],\n  require_tld: true,\n  require_protocol: false,\n  require_host: true,\n  require_valid_protocol: true,\n  allow_underscores: false,\n  allow_trailing_dot: false,\n  allow_protocol_relative_urls: false,\n}\n\nconst wrapped_ipv6 = /^\\[([^\\]]+)\\](?::([0-9]+))?$/;\n\nfunction isRegExp(obj) {\n  return Object.prototype.toString.call(obj) === '[object RegExp]';\n}\n\nfunction checkHost(host, matches) {\n  for (let i = 0; i < matches.length; i++) {\n    let match = matches[i];\n    if (host === match || (isRegExp(match) && match.test(host))) {\n      return true;\n    }\n  }\n  return false;\n}\n/**\n * Checks whether the `target` string is valid URL\n * \n * @param target The target string\n * @param options The options\n * @return true if the `target` is a valid URL, false otherwise\n */\nexport function isURL(target:string, options) {\n  assertString(target);\n  if (!target || target.length >= 2083 || /[\\s<>]/.test(target)) {\n    return false;\n  }\n  if (target.indexOf('mailto:') === 0) {\n    return false;\n  }\n  options = merge(options, default_url_options);\n  let protocol, auth, host, hostname, port, port_str, split, ipv6;\n\n  split = target.split('#');\n  target = split.shift();\n\n  split = target.split('?');\n  target = split.shift();\n\n  split = target.split('://');\n  if (split.length > 1) {\n    protocol = split.shift().toLowerCase();\n    if (options.require_valid_protocol && options.protocols.indexOf(protocol) === -1) {\n      return false;\n    }\n  } else if (options.require_protocol) {\n    return false;\n  } else if (target.substr(0, 2) === '//') {\n    if (!options.allow_protocol_relative_urls) {\n      return false;\n    }\n    split[0] = target.substr(2);\n  }\n  target = split.join('://');\n\n  if (target === '') {\n    return false;\n  }\n\n  split = target.split('/');\n  target = split.shift();\n\n  if (target === '' && !options.require_host) {\n    return true;\n  }\n\n  split = target.split('@');\n  if (split.length > 1) {\n    if (options.disallow_auth) {\n      return false;\n    }\n    auth = split.shift();\n    if (auth.indexOf(':') >= 0 && auth.split(':').length > 2) {\n      return false;\n    }\n  }\n  hostname = split.join('@');\n\n  port_str = null;\n  ipv6 = null;\n  const ipv6_match = hostname.match(wrapped_ipv6);\n  if (ipv6_match) {\n    host = '';\n    ipv6 = ipv6_match[1];\n    port_str = ipv6_match[2] || null;\n  } else {\n    split = hostname.split(':');\n    host = split.shift();\n    if (split.length) {\n      port_str = split.join(':');\n    }\n  }\n\n  if (port_str !== null) {\n    port = parseInt(port_str, 10);\n    if (!/^[0-9]+$/.test(port_str) || port <= 0 || port > 65535) {\n      return false;\n    }\n  }\n\n  if (!isIP(host) && !isFQDN(host, options) && (!ipv6 || !isIP(ipv6, '6'))) {\n    return false;\n  }\n\n  host = host || ipv6;\n\n  if (options.host_whitelist && !checkHost(host, options.host_whitelist)) {\n    return false;\n  }\n  if (options.host_blacklist && checkHost(host, options.host_blacklist)) {\n    return false;\n  }\n\n  return true;\n}\n","import { assertString } from '../util/assertString';\n\nconst uuid = {\n  3: /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\n  4: /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\n  5: /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\n  all: /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\n};\n\n/**\n * Checks whether the `target` is a valid UUID\n * \n * @param target The target string\n * @param version The version\n * @return true if the `target` is  a valid UUID, false otherwise\n */\nexport function isUUID(str, version?) {\n  version = version ? version : 'all'\n  assertString(str);\n  const pattern = uuid[version];\n  return pattern && pattern.test(str);\n}","import { assertString } from '../util/assertString';\n\nimport { fullWidth } from './isFullWidth';\nimport { halfWidth } from './isHalfWidth';\n\n/**\n * Checks whether the `target` is variable width\n * \n * @param target The target string\n * @return true if the `target` is variable width, false otherwise\n */\nexport function isVariableWidth(target:string) {\n  assertString(target);\n  return fullWidth.test(target) && halfWidth.test(target);\n}\n","import { assertString } from '../util/assertString';\n//checks characters if they appear in the whitelist.\n\n/**\n * Checks whether the `target` string appears in the white list `arg`\n * \n * @param target The target string\n * @param arg The white list\n * @return true if the `target` appears in the whitelist, false otherwise\n */\nexport function isWhitelisted(target:string, arg:string) {\n  assertString(target);\n  for (let i = target.length - 1; i >= 0; i--) {\n    if (arg.indexOf(target[i]) === -1) {\n      return false;\n    }\n  }\n  return true;\n}\n","import { assertString } from '../util/assertString';\n\n/**\n * Check whether the target matches the pattern\n * @param target The target\n * @param pattern The RegExp\n * @param modifiers The optional modifier\n * @return true if the target matches, false otherwise\n */\nexport function matches(target:string, pattern:RegExp, modifiers?:string) {\n  assertString(target);\n  if (Object.prototype.toString.call(pattern) !== '[object RegExp]') {\n    pattern = new RegExp(pattern, modifiers);\n  }\n  return pattern.test(target);\n}\n","import { assertString } from '../util/assertString';\n\nexport function blacklist(str: string, chars: string) {\n  assertString(str);\n  return str.replace(new RegExp(`[${chars}]+`, 'g'), '');\n}","import { assertString } from '../util/assertString';\n\nexport function ltrim(str, chars) {\n  assertString(str);\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Escaping\n  const pattern = chars ? new RegExp(`^[${chars.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')}]+`, 'g') : /^\\s+/g;\n  return str.replace(pattern, '');\n}\n","import { assertString } from '../util/assertString';\n\nexport function rtrim(str, chars) {\n  assertString(str);\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Escaping\n  const pattern = chars ? new RegExp(`[${chars.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&')}]+$`, 'g') : /\\s+$/g;\n  return str.replace(pattern, '');\n}\n","import { assertString } from '../util/assertString';\n\nimport { blacklist } from './blacklist';\n\nexport function stripLow(str, keep_new_lines) {\n  assertString(str);\n  const chars = keep_new_lines ? '\\\\x00-\\\\x09\\\\x0B\\\\x0C\\\\x0E-\\\\x1F\\\\x7F' : '\\\\x00-\\\\x1F\\\\x7F';\n  return blacklist(str, chars);\n}\n","import { assertString } from '../util/assertString';\n\nexport function toBoolean(str, strict) {\n  assertString(str);\n  if (strict) {\n    return str === '1' || /^true$/i.test(str);\n  }\n  return str !== '0' && !/^false$/i.test(str) && str !== '';\n}\n","import { assertString } from '../util/assertString';\n\nexport function toInt(str, radix) {\n  assertString(str);\n  return parseInt(str, radix || 10);\n}\n","import { rtrim } from './rtrim';\nimport { ltrim }  from './ltrim';\n\nexport function trim(str, chars) {\n  return rtrim(ltrim(str, chars), chars);\n}\n","import { assertString } from '../util/assertString';\n\nexport function unescape(str) {\n  assertString(str);\n  return (str.replace(/&amp;/g, '&')\n    .replace(/&quot;/g, '\"')\n    .replace(/&#x27;/g, \"'\")\n    .replace(/&lt;/g, '<')\n    .replace(/&gt;/g, '>')\n    .replace(/&#x2F;/g, '/')\n    .replace(/&#x5C;/g, '\\\\')\n    .replace(/&#96;/g, '`'));\n}\n","import { assertString } from '../util/assertString';\n\nexport function whitelist(str, chars) {\n  assertString(str);\n  return str.replace(new RegExp(`[^${chars}]+`, 'g'), '');\n}"],"names":["blacklist"],"mappings":"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"}